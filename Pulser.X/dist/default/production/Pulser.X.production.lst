

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Fri Dec 14 10:45:06 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F66K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAMh,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bitbssCOMRAMl,global,bit,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssCOMRAMh,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAMh,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssCOMRAMl,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAMh,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAMl,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    45                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    46                           	dabs	1,0x117,0,_MC4_END_FLAT
    47                           	dabs	1,0x22,1
    48                           	dabs	1,0x116,0,_MC3_END_FLAT
    49                           	dabs	1,0x22,1
    50                           	dabs	1,0x115,0,_MC2_END_FLAT
    51                           	dabs	1,0x22,1
    52                           	dabs	1,0x114,0,_MC1_END_FLAT
    53                           	dabs	1,0x22,1
    54                           	dabs	1,0x113,0,_MC4_IO_STATE
    55                           	dabs	1,0x22,1
    56                           	dabs	1,0x112,0,_MC3_IO_STATE
    57                           	dabs	1,0x22,1
    58                           	dabs	1,0x111,0,_MC2_IO_STATE
    59                           	dabs	1,0x22,1
    60                           	dabs	1,0x110,0,_MC1_IO_STATE
    61                           	dabs	1,0x22,1
    62                           	dabs	1,0x10F,0,_MC4_FZ_BZ
    63                           	dabs	1,0x21,1
    64                           	dabs	1,0x10E,0,_MC3_FZ_BZ
    65                           	dabs	1,0x21,1
    66                           	dabs	1,0x10D,0,_MC2_FZ_BZ
    67                           	dabs	1,0x21,1
    68                           	dabs	1,0x10C,0,_MC1_FZ_BZ
    69                           	dabs	1,0x21,1
    70                           	dabs	1,0x10B,0,_MC4_Start_BZ
    71                           	dabs	1,0x21,1
    72                           	dabs	1,0x10A,0,_MC3_Start_BZ
    73                           	dabs	1,0x21,1
    74                           	dabs	1,0x109,0,_MC2_Start_BZ
    75                           	dabs	1,0x21,1
    76                           	dabs	1,0x108,0,_MC1_Start_BZ
    77                           	dabs	1,0x21,1
    78                           	dabs	1,0x21,1,_MC_Start_BZ
    79                           	dabs	1,0x22,1,_MC_IO_STATE
    80  0000                     
    81                           ; Version 1.42
    82                           ; Generated 13/04/2017 GMT
    83                           ; 
    84                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    85                           ; All rights reserved.
    86                           ; 
    87                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    88                           ; 
    89                           ; Redistribution and use in source and binary forms, with or without modification, are
    90                           ; permitted provided that the following conditions are met:
    91                           ; 
    92                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    93                           ;        conditions and the following disclaimer.
    94                           ; 
    95                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    96                           ;        of conditions and the following disclaimer in the documentation and/or other
    97                           ;        materials provided with the distribution.
    98                           ; 
    99                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   100                           ;        software without specific prior written permission.
   101                           ; 
   102                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   103                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   104                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   105                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   106                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   107                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   108                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   109                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   110                           ; 
   111                           ; 
   112                           ; Code-generator required, PIC18F66K80 Definitions
   113                           ; 
   114                           ; SFR Addresses
   115  0000                     
   116                           	psect	idataCOMRAMh
   117  000ECE                     __pidataCOMRAMh:
   118                           	opt stack 0
   119                           
   120                           ;initializer for _MC4_Channel
   121  000ECE  08                 	db	8
   122                           
   123                           ;initializer for _MC3_Channel
   124  000ECF  04                 	db	4
   125                           
   126                           ;initializer for _MC2_Channel
   127  000ED0  02                 	db	2
   128                           
   129                           ;initializer for _MC1_Channel
   130  000ED1  01                 	db	1	;_MC1_Start_BZ
   131  0000                     _PMD1bits	set	3928
   132  0000                     _RCREG1	set	4014
   133  0000                     _INTCONbits	set	4082
   134  0000                     _INTCON	set	4082
   135  0000                     _SPBRG1	set	4015
   136  0000                     _BAUDCON1bits	set	4007
   137  0000                     _TXSTA1bits	set	4012
   138  0000                     _RCSTA1bits	set	4011
   139  0000                     _TRISG	set	3992
   140  0000                     _TRISF	set	3991
   141  0000                     _LATF	set	3982
   142  0000                     _PORTF	set	3973
   143  0000                     _TRISD	set	3989
   144  0000                     _LATD	set	3980
   145  0000                     _PORTD	set	3971
   146  0000                     _TRISC	set	3988
   147  0000                     _LATC	set	3979
   148  0000                     _PORTC	set	3970
   149  0000                     _PIR1bits	set	3998
   150  0000                     _PIE1bits	set	3997
   151  0000                     _T1CONbits	set	4045
   152  0000                     _TMR1L	set	4046
   153  0000                     _TMR1H	set	4047
   154  0000                     _T1CON	set	4045
   155  0000                     _TXREG	set	4013
   156  0000                     _LATF6	set	31862
   157  0000                     _LATF5	set	31861
   158  0000                     _LATF4	set	31860
   159  0000                     _LATF3	set	31859
   160  0000                     _LATF2	set	31858
   161  0000                     _LATF1	set	31857
   162  0000                     _LATF0	set	31856
   163  0000                     _LATD7	set	31847
   164  0000                     _LATD6	set	31846
   165  0000                     _LATD5	set	31845
   166  0000                     _LATD4	set	31844
   167  0000                     _LATD3	set	31843
   168  0000                     _LATD2	set	31842
   169  0000                     _LATD1	set	31841
   170  0000                     _LATD0	set	31840
   171  0000                     _LATC7	set	31839
   172  0000                     _LATC6	set	31838
   173  0000                     _LATC5	set	31837
   174  0000                     _LATC4	set	31836
   175  0000                     _LATC3	set	31835
   176  0000                     _LATC2	set	31834
   177  0000                     _LATC1	set	31833
   178  0000                     _LATC0	set	31832
   179  0000                     _RC1IF	set	31989
   180  0000                     _RC1IE	set	31981
   181  0000                     _LATF7	set	31863
   182  0000                     _TXIF	set	31988
   183                           
   184                           	psect	mediumconst
   185  00FCDA                     __pmediumconst:
   186                           	opt stack 0
   187  00FCDA  00                 	db	0
   188  00FCDB                     STR_1:
   189  00FCDB  52                 	db	82	;'R'
   190  00FCDC  78                 	db	120	;'x'
   191  00FCDD  20                 	db	32
   192  00FCDE  46                 	db	70	;'F'
   193  00FCDF  41                 	db	65	;'A'
   194  00FCE0  49                 	db	73	;'I'
   195  00FCE1  4C                 	db	76	;'L'
   196  00FCE2  2C                 	db	44
   197  00FCE3  43                 	db	67	;'C'
   198  00FCE4  6F                 	db	111	;'o'
   199  00FCE5  6D                 	db	109	;'m'
   200  00FCE6  6D                 	db	109	;'m'
   201  00FCE7  61                 	db	97	;'a'
   202  00FCE8  6E                 	db	110	;'n'
   203  00FCE9  64                 	db	100	;'d'
   204  00FCEA  20                 	db	32
   205  00FCEB  66                 	db	102	;'f'
   206  00FCEC  6F                 	db	111	;'o'
   207  00FCED  72                 	db	114	;'r'
   208  00FCEE  6D                 	db	109	;'m'
   209  00FCEF  61                 	db	97	;'a'
   210  00FCF0  74                 	db	116	;'t'
   211  00FCF1  20                 	db	32
   212  00FCF2  65                 	db	101	;'e'
   213  00FCF3  72                 	db	114	;'r'
   214  00FCF4  72                 	db	114	;'r'
   215  00FCF5  6F                 	db	111	;'o'
   216  00FCF6  72                 	db	114	;'r'
   217  00FCF7  21                 	db	33
   218  00FCF8  0D                 	db	13
   219  00FCF9  0A                 	db	10
   220  00FCFA  00                 	db	0
   221  00FCFB                     STR_26:
   222  00FCFB  CD                 	db	-51
   223  00FCFC  A8                 	db	-88
   224  00FCFD  B5                 	db	-75
   225  00FCFE  C0                 	db	-64
   226  00FCFF  31                 	db	49	;'1'
   227  00FD00  D5                 	db	-43
   228  00FD01  BC                 	db	-68
   229  00FD02  D3                 	db	-45
   230  00FD03  C3                 	db	-61
   231  00FD04  49                 	db	73	;'I'
   232  00FD05  4F                 	db	79	;'O'
   233  00FD06  B7                 	db	-73
   234  00FD07  A2                 	db	-94
   235  00FD08  C9                 	db	-55
   236  00FD09  FA                 	db	-6
   237  00FD0A  B4                 	db	-76
   238  00FD0B  ED                 	db	-19
   239  00FD0C  CE                 	db	-50
   240  00FD0D  F3                 	db	-13
   241  00FD0E  21                 	db	33
   242  00FD0F  0D                 	db	13
   243  00FD10  0A                 	db	10
   244  00FD11  00                 	db	0
   245  00FD12                     STR_22:
   246  00FD12  4D                 	db	77	;'M'
   247  00FD13  43                 	db	67	;'C'
   248  00FD14  31                 	db	49	;'1'
   249  00FD15  5F                 	db	95	;'_'
   250  00FD16  50                 	db	80	;'P'
   251  00FD17  41                 	db	65	;'A'
   252  00FD18  52                 	db	82	;'R'
   253  00FD19  4D                 	db	77	;'M'
   254  00FD1A  20                 	db	32
   255  00FD1B  57                 	db	87	;'W'
   256  00FD1C  72                 	db	114	;'r'
   257  00FD1D  69                 	db	105	;'i'
   258  00FD1E  74                 	db	116	;'t'
   259  00FD1F  65                 	db	101	;'e'
   260  00FD20  20                 	db	32
   261  00FD21  46                 	db	70	;'F'
   262  00FD22  61                 	db	97	;'a'
   263  00FD23  69                 	db	105	;'i'
   264  00FD24  6C                 	db	108	;'l'
   265  00FD25  21                 	db	33
   266  00FD26  0D                 	db	13
   267  00FD27  0A                 	db	10
   268  00FD28  00                 	db	0
   269  00FD29                     STR_23:
   270  00FD29  4D                 	db	77	;'M'
   271  00FD2A  43                 	db	67	;'C'
   272  00FD2B  32                 	db	50	;'2'
   273  00FD2C  5F                 	db	95	;'_'
   274  00FD2D  50                 	db	80	;'P'
   275  00FD2E  41                 	db	65	;'A'
   276  00FD2F  52                 	db	82	;'R'
   277  00FD30  4D                 	db	77	;'M'
   278  00FD31  20                 	db	32
   279  00FD32  57                 	db	87	;'W'
   280  00FD33  72                 	db	114	;'r'
   281  00FD34  69                 	db	105	;'i'
   282  00FD35  74                 	db	116	;'t'
   283  00FD36  65                 	db	101	;'e'
   284  00FD37  20                 	db	32
   285  00FD38  46                 	db	70	;'F'
   286  00FD39  61                 	db	97	;'a'
   287  00FD3A  69                 	db	105	;'i'
   288  00FD3B  6C                 	db	108	;'l'
   289  00FD3C  21                 	db	33
   290  00FD3D  0D                 	db	13
   291  00FD3E  0A                 	db	10
   292  00FD3F  00                 	db	0
   293  00FD40                     STR_24:
   294  00FD40  4D                 	db	77	;'M'
   295  00FD41  43                 	db	67	;'C'
   296  00FD42  33                 	db	51	;'3'
   297  00FD43  5F                 	db	95	;'_'
   298  00FD44  50                 	db	80	;'P'
   299  00FD45  41                 	db	65	;'A'
   300  00FD46  52                 	db	82	;'R'
   301  00FD47  4D                 	db	77	;'M'
   302  00FD48  20                 	db	32
   303  00FD49  57                 	db	87	;'W'
   304  00FD4A  72                 	db	114	;'r'
   305  00FD4B  69                 	db	105	;'i'
   306  00FD4C  74                 	db	116	;'t'
   307  00FD4D  65                 	db	101	;'e'
   308  00FD4E  20                 	db	32
   309  00FD4F  46                 	db	70	;'F'
   310  00FD50  61                 	db	97	;'a'
   311  00FD51  69                 	db	105	;'i'
   312  00FD52  6C                 	db	108	;'l'
   313  00FD53  21                 	db	33
   314  00FD54  0D                 	db	13
   315  00FD55  0A                 	db	10
   316  00FD56  00                 	db	0
   317  00FD57                     STR_25:
   318  00FD57  4D                 	db	77	;'M'
   319  00FD58  43                 	db	67	;'C'
   320  00FD59  34                 	db	52	;'4'
   321  00FD5A  5F                 	db	95	;'_'
   322  00FD5B  50                 	db	80	;'P'
   323  00FD5C  41                 	db	65	;'A'
   324  00FD5D  52                 	db	82	;'R'
   325  00FD5E  4D                 	db	77	;'M'
   326  00FD5F  20                 	db	32
   327  00FD60  57                 	db	87	;'W'
   328  00FD61  72                 	db	114	;'r'
   329  00FD62  69                 	db	105	;'i'
   330  00FD63  74                 	db	116	;'t'
   331  00FD64  65                 	db	101	;'e'
   332  00FD65  20                 	db	32
   333  00FD66  46                 	db	70	;'F'
   334  00FD67  61                 	db	97	;'a'
   335  00FD68  69                 	db	105	;'i'
   336  00FD69  6C                 	db	108	;'l'
   337  00FD6A  21                 	db	33
   338  00FD6B  0D                 	db	13
   339  00FD6C  0A                 	db	10
   340  00FD6D  00                 	db	0
   341  00FD6E                     STR_7:
   342  00FD6E  4D                 	db	77	;'M'
   343  00FD6F  43                 	db	67	;'C'
   344  00FD70  31                 	db	49	;'1'
   345  00FD71  5F                 	db	95	;'_'
   346  00FD72  73                 	db	115	;'s'
   347  00FD73  74                 	db	116	;'t'
   348  00FD74  6F                 	db	111	;'o'
   349  00FD75  70                 	db	112	;'p'
   350  00FD76  70                 	db	112	;'p'
   351  00FD77  65                 	db	101	;'e'
   352  00FD78  64                 	db	100	;'d'
   353  00FD79  2C                 	db	44
   354  00FD7A  45                 	db	69	;'E'
   355  00FD7B  52                 	db	82	;'R'
   356  00FD7C  52                 	db	82	;'R'
   357  00FD7D  4F                 	db	79	;'O'
   358  00FD7E  52                 	db	82	;'R'
   359  00FD7F  21                 	db	33
   360  00FD80  0D                 	db	13
   361  00FD81  0A                 	db	10
   362  00FD82  00                 	db	0
   363  00FD83                     STR_10:
   364  00FD83  4D                 	db	77	;'M'
   365  00FD84  43                 	db	67	;'C'
   366  00FD85  32                 	db	50	;'2'
   367  00FD86  5F                 	db	95	;'_'
   368  00FD87  73                 	db	115	;'s'
   369  00FD88  74                 	db	116	;'t'
   370  00FD89  6F                 	db	111	;'o'
   371  00FD8A  70                 	db	112	;'p'
   372  00FD8B  70                 	db	112	;'p'
   373  00FD8C  65                 	db	101	;'e'
   374  00FD8D  64                 	db	100	;'d'
   375  00FD8E  2C                 	db	44
   376  00FD8F  45                 	db	69	;'E'
   377  00FD90  52                 	db	82	;'R'
   378  00FD91  52                 	db	82	;'R'
   379  00FD92  4F                 	db	79	;'O'
   380  00FD93  52                 	db	82	;'R'
   381  00FD94  21                 	db	33
   382  00FD95  0D                 	db	13
   383  00FD96  0A                 	db	10
   384  00FD97  00                 	db	0
   385  00FD98                     STR_13:
   386  00FD98  4D                 	db	77	;'M'
   387  00FD99  43                 	db	67	;'C'
   388  00FD9A  33                 	db	51	;'3'
   389  00FD9B  5F                 	db	95	;'_'
   390  00FD9C  73                 	db	115	;'s'
   391  00FD9D  74                 	db	116	;'t'
   392  00FD9E  6F                 	db	111	;'o'
   393  00FD9F  70                 	db	112	;'p'
   394  00FDA0  70                 	db	112	;'p'
   395  00FDA1  65                 	db	101	;'e'
   396  00FDA2  64                 	db	100	;'d'
   397  00FDA3  2C                 	db	44
   398  00FDA4  45                 	db	69	;'E'
   399  00FDA5  52                 	db	82	;'R'
   400  00FDA6  52                 	db	82	;'R'
   401  00FDA7  4F                 	db	79	;'O'
   402  00FDA8  52                 	db	82	;'R'
   403  00FDA9  21                 	db	33
   404  00FDAA  0D                 	db	13
   405  00FDAB  0A                 	db	10
   406  00FDAC  00                 	db	0
   407  00FDAD                     STR_16:
   408  00FDAD  4D                 	db	77	;'M'
   409  00FDAE  43                 	db	67	;'C'
   410  00FDAF  34                 	db	52	;'4'
   411  00FDB0  5F                 	db	95	;'_'
   412  00FDB1  73                 	db	115	;'s'
   413  00FDB2  74                 	db	116	;'t'
   414  00FDB3  6F                 	db	111	;'o'
   415  00FDB4  70                 	db	112	;'p'
   416  00FDB5  70                 	db	112	;'p'
   417  00FDB6  65                 	db	101	;'e'
   418  00FDB7  64                 	db	100	;'d'
   419  00FDB8  2C                 	db	44
   420  00FDB9  45                 	db	69	;'E'
   421  00FDBA  52                 	db	82	;'R'
   422  00FDBB  52                 	db	82	;'R'
   423  00FDBC  4F                 	db	79	;'O'
   424  00FDBD  52                 	db	82	;'R'
   425  00FDBE  21                 	db	33
   426  00FDBF  0D                 	db	13
   427  00FDC0  0A                 	db	10
   428  00FDC1  00                 	db	0
   429  00FDC2                     STR_6:
   430  00FDC2  4D                 	db	77	;'M'
   431  00FDC3  43                 	db	67	;'C'
   432  00FDC4  31                 	db	49	;'1'
   433  00FDC5  5F                 	db	95	;'_'
   434  00FDC6  77                 	db	119	;'w'
   435  00FDC7  6F                 	db	111	;'o'
   436  00FDC8  72                 	db	114	;'r'
   437  00FDC9  6B                 	db	107	;'k'
   438  00FDCA  69                 	db	105	;'i'
   439  00FDCB  6E                 	db	110	;'n'
   440  00FDCC  67                 	db	103	;'g'
   441  00FDCD  2C                 	db	44
   442  00FDCE  45                 	db	69	;'E'
   443  00FDCF  52                 	db	82	;'R'
   444  00FDD0  52                 	db	82	;'R'
   445  00FDD1  4F                 	db	79	;'O'
   446  00FDD2  52                 	db	82	;'R'
   447  00FDD3  21                 	db	33
   448  00FDD4  0D                 	db	13
   449  00FDD5  0A                 	db	10
   450  00FDD6  00                 	db	0
   451  00FDD7                     STR_9:
   452  00FDD7  4D                 	db	77	;'M'
   453  00FDD8  43                 	db	67	;'C'
   454  00FDD9  32                 	db	50	;'2'
   455  00FDDA  5F                 	db	95	;'_'
   456  00FDDB  77                 	db	119	;'w'
   457  00FDDC  6F                 	db	111	;'o'
   458  00FDDD  72                 	db	114	;'r'
   459  00FDDE  6B                 	db	107	;'k'
   460  00FDDF  69                 	db	105	;'i'
   461  00FDE0  6E                 	db	110	;'n'
   462  00FDE1  67                 	db	103	;'g'
   463  00FDE2  2C                 	db	44
   464  00FDE3  45                 	db	69	;'E'
   465  00FDE4  52                 	db	82	;'R'
   466  00FDE5  52                 	db	82	;'R'
   467  00FDE6  4F                 	db	79	;'O'
   468  00FDE7  52                 	db	82	;'R'
   469  00FDE8  21                 	db	33
   470  00FDE9  0D                 	db	13
   471  00FDEA  0A                 	db	10
   472  00FDEB  00                 	db	0
   473  00FDEC                     STR_12:
   474  00FDEC  4D                 	db	77	;'M'
   475  00FDED  43                 	db	67	;'C'
   476  00FDEE  33                 	db	51	;'3'
   477  00FDEF  5F                 	db	95	;'_'
   478  00FDF0  77                 	db	119	;'w'
   479  00FDF1  6F                 	db	111	;'o'
   480  00FDF2  72                 	db	114	;'r'
   481  00FDF3  6B                 	db	107	;'k'
   482  00FDF4  69                 	db	105	;'i'
   483  00FDF5  6E                 	db	110	;'n'
   484  00FDF6  67                 	db	103	;'g'
   485  00FDF7  2C                 	db	44
   486  00FDF8  45                 	db	69	;'E'
   487  00FDF9  52                 	db	82	;'R'
   488  00FDFA  52                 	db	82	;'R'
   489  00FDFB  4F                 	db	79	;'O'
   490  00FDFC  52                 	db	82	;'R'
   491  00FDFD  21                 	db	33
   492  00FDFE  0D                 	db	13
   493  00FDFF  0A                 	db	10
   494  00FE00  00                 	db	0
   495  00FE01                     STR_15:
   496  00FE01  4D                 	db	77	;'M'
   497  00FE02  43                 	db	67	;'C'
   498  00FE03  34                 	db	52	;'4'
   499  00FE04  5F                 	db	95	;'_'
   500  00FE05  77                 	db	119	;'w'
   501  00FE06  6F                 	db	111	;'o'
   502  00FE07  72                 	db	114	;'r'
   503  00FE08  6B                 	db	107	;'k'
   504  00FE09  69                 	db	105	;'i'
   505  00FE0A  6E                 	db	110	;'n'
   506  00FE0B  67                 	db	103	;'g'
   507  00FE0C  2C                 	db	44
   508  00FE0D  45                 	db	69	;'E'
   509  00FE0E  52                 	db	82	;'R'
   510  00FE0F  52                 	db	82	;'R'
   511  00FE10  4F                 	db	79	;'O'
   512  00FE11  52                 	db	82	;'R'
   513  00FE12  21                 	db	33
   514  00FE13  0D                 	db	13
   515  00FE14  0A                 	db	10
   516  00FE15  00                 	db	0
   517  00FE16                     STR_8:
   518  00FE16  4D                 	db	77	;'M'
   519  00FE17  43                 	db	67	;'C'
   520  00FE18  31                 	db	49	;'1'
   521  00FE19  5F                 	db	95	;'_'
   522  00FE1A  73                 	db	115	;'s'
   523  00FE1B  74                 	db	116	;'t'
   524  00FE1C  6F                 	db	111	;'o'
   525  00FE1D  70                 	db	112	;'p'
   526  00FE1E  20                 	db	32
   527  00FE1F  73                 	db	115	;'s'
   528  00FE20  75                 	db	117	;'u'
   529  00FE21  63                 	db	99	;'c'
   530  00FE22  63                 	db	99	;'c'
   531  00FE23  65                 	db	101	;'e'
   532  00FE24  73                 	db	115	;'s'
   533  00FE25  73                 	db	115	;'s'
   534  00FE26  21                 	db	33
   535  00FE27  0D                 	db	13
   536  00FE28  0A                 	db	10
   537  00FE29  00                 	db	0
   538  00FE2A                     STR_11:
   539  00FE2A  4D                 	db	77	;'M'
   540  00FE2B  43                 	db	67	;'C'
   541  00FE2C  32                 	db	50	;'2'
   542  00FE2D  5F                 	db	95	;'_'
   543  00FE2E  73                 	db	115	;'s'
   544  00FE2F  74                 	db	116	;'t'
   545  00FE30  6F                 	db	111	;'o'
   546  00FE31  70                 	db	112	;'p'
   547  00FE32  20                 	db	32
   548  00FE33  73                 	db	115	;'s'
   549  00FE34  75                 	db	117	;'u'
   550  00FE35  63                 	db	99	;'c'
   551  00FE36  63                 	db	99	;'c'
   552  00FE37  65                 	db	101	;'e'
   553  00FE38  73                 	db	115	;'s'
   554  00FE39  73                 	db	115	;'s'
   555  00FE3A  21                 	db	33
   556  00FE3B  0D                 	db	13
   557  00FE3C  0A                 	db	10
   558  00FE3D  00                 	db	0
   559  00FE3E                     STR_14:
   560  00FE3E  4D                 	db	77	;'M'
   561  00FE3F  43                 	db	67	;'C'
   562  00FE40  33                 	db	51	;'3'
   563  00FE41  5F                 	db	95	;'_'
   564  00FE42  73                 	db	115	;'s'
   565  00FE43  74                 	db	116	;'t'
   566  00FE44  6F                 	db	111	;'o'
   567  00FE45  70                 	db	112	;'p'
   568  00FE46  20                 	db	32
   569  00FE47  73                 	db	115	;'s'
   570  00FE48  75                 	db	117	;'u'
   571  00FE49  63                 	db	99	;'c'
   572  00FE4A  63                 	db	99	;'c'
   573  00FE4B  65                 	db	101	;'e'
   574  00FE4C  73                 	db	115	;'s'
   575  00FE4D  73                 	db	115	;'s'
   576  00FE4E  21                 	db	33
   577  00FE4F  0D                 	db	13
   578  00FE50  0A                 	db	10
   579  00FE51  00                 	db	0
   580  00FE52                     STR_17:
   581  00FE52  4D                 	db	77	;'M'
   582  00FE53  43                 	db	67	;'C'
   583  00FE54  34                 	db	52	;'4'
   584  00FE55  5F                 	db	95	;'_'
   585  00FE56  73                 	db	115	;'s'
   586  00FE57  74                 	db	116	;'t'
   587  00FE58  6F                 	db	111	;'o'
   588  00FE59  70                 	db	112	;'p'
   589  00FE5A  20                 	db	32
   590  00FE5B  73                 	db	115	;'s'
   591  00FE5C  75                 	db	117	;'u'
   592  00FE5D  63                 	db	99	;'c'
   593  00FE5E  63                 	db	99	;'c'
   594  00FE5F  65                 	db	101	;'e'
   595  00FE60  73                 	db	115	;'s'
   596  00FE61  73                 	db	115	;'s'
   597  00FE62  21                 	db	33
   598  00FE63  0D                 	db	13
   599  00FE64  0A                 	db	10
   600  00FE65  00                 	db	0
   601  00FE66                     STR_18:
   602  00FE66  4D                 	db	77	;'M'
   603  00FE67  43                 	db	67	;'C'
   604  00FE68  31                 	db	49	;'1'
   605  00FE69  5F                 	db	95	;'_'
   606  00FE6A  45                 	db	69	;'E'
   607  00FE6B  6E                 	db	110	;'n'
   608  00FE6C  64                 	db	100	;'d'
   609  00FE6D  20                 	db	32
   610  00FE6E  73                 	db	115	;'s'
   611  00FE6F  75                 	db	117	;'u'
   612  00FE70  63                 	db	99	;'c'
   613  00FE71  63                 	db	99	;'c'
   614  00FE72  65                 	db	101	;'e'
   615  00FE73  73                 	db	115	;'s'
   616  00FE74  73                 	db	115	;'s'
   617  00FE75  21                 	db	33
   618  00FE76  0D                 	db	13
   619  00FE77  0A                 	db	10
   620  00FE78  00                 	db	0
   621  00FE79                     STR_19:
   622  00FE79  4D                 	db	77	;'M'
   623  00FE7A  43                 	db	67	;'C'
   624  00FE7B  32                 	db	50	;'2'
   625  00FE7C  5F                 	db	95	;'_'
   626  00FE7D  45                 	db	69	;'E'
   627  00FE7E  6E                 	db	110	;'n'
   628  00FE7F  64                 	db	100	;'d'
   629  00FE80  20                 	db	32
   630  00FE81  73                 	db	115	;'s'
   631  00FE82  75                 	db	117	;'u'
   632  00FE83  63                 	db	99	;'c'
   633  00FE84  63                 	db	99	;'c'
   634  00FE85  65                 	db	101	;'e'
   635  00FE86  73                 	db	115	;'s'
   636  00FE87  73                 	db	115	;'s'
   637  00FE88  21                 	db	33
   638  00FE89  0D                 	db	13
   639  00FE8A  0A                 	db	10
   640  00FE8B  00                 	db	0
   641  00FE8C                     STR_20:
   642  00FE8C  4D                 	db	77	;'M'
   643  00FE8D  43                 	db	67	;'C'
   644  00FE8E  33                 	db	51	;'3'
   645  00FE8F  5F                 	db	95	;'_'
   646  00FE90  45                 	db	69	;'E'
   647  00FE91  6E                 	db	110	;'n'
   648  00FE92  64                 	db	100	;'d'
   649  00FE93  20                 	db	32
   650  00FE94  73                 	db	115	;'s'
   651  00FE95  75                 	db	117	;'u'
   652  00FE96  63                 	db	99	;'c'
   653  00FE97  63                 	db	99	;'c'
   654  00FE98  65                 	db	101	;'e'
   655  00FE99  73                 	db	115	;'s'
   656  00FE9A  73                 	db	115	;'s'
   657  00FE9B  21                 	db	33
   658  00FE9C  0D                 	db	13
   659  00FE9D  0A                 	db	10
   660  00FE9E  00                 	db	0
   661  00FE9F                     STR_21:
   662  00FE9F  4D                 	db	77	;'M'
   663  00FEA0  43                 	db	67	;'C'
   664  00FEA1  34                 	db	52	;'4'
   665  00FEA2  5F                 	db	95	;'_'
   666  00FEA3  45                 	db	69	;'E'
   667  00FEA4  6E                 	db	110	;'n'
   668  00FEA5  64                 	db	100	;'d'
   669  00FEA6  20                 	db	32
   670  00FEA7  73                 	db	115	;'s'
   671  00FEA8  75                 	db	117	;'u'
   672  00FEA9  63                 	db	99	;'c'
   673  00FEAA  63                 	db	99	;'c'
   674  00FEAB  65                 	db	101	;'e'
   675  00FEAC  73                 	db	115	;'s'
   676  00FEAD  73                 	db	115	;'s'
   677  00FEAE  21                 	db	33
   678  00FEAF  0D                 	db	13
   679  00FEB0  0A                 	db	10
   680  00FEB1  00                 	db	0
   681  00FEB2                     STR_27:
   682  00FEB2  52                 	db	82	;'R'
   683  00FEB3  44                 	db	68	;'D'
   684  00FEB4  30                 	db	48	;'0'
   685  00FEB5  B1                 	db	-79
   686  00FEB6  BB                 	db	-69
   687  00FEB7  4D                 	db	77	;'M'
   688  00FEB8  43                 	db	67	;'C'
   689  00FEB9  31                 	db	49	;'1'
   690  00FEBA  D5                 	db	-43
   691  00FEBB  BC                 	db	-68
   692  00FEBC  D3                 	db	-45
   693  00FEBD  C3                 	db	-61
   694  00FEBE  D6                 	db	-42
   695  00FEBF  D0                 	db	-48
   696  00FEC0  0D                 	db	13
   697  00FEC1  0A                 	db	10
   698  00FEC2  00                 	db	0
   699  00FEC3                     STR_35:
   700  00FEC3  52                 	db	82	;'R'
   701  00FEC4  46                 	db	70	;'F'
   702  00FEC5  30                 	db	48	;'0'
   703  00FEC6  B1                 	db	-79
   704  00FEC7  BB                 	db	-69
   705  00FEC8  4D                 	db	77	;'M'
   706  00FEC9  43                 	db	67	;'C'
   707  00FECA  31                 	db	49	;'1'
   708  00FECB  D5                 	db	-43
   709  00FECC  BC                 	db	-68
   710  00FECD  D3                 	db	-45
   711  00FECE  C3                 	db	-61
   712  00FECF  D6                 	db	-42
   713  00FED0  D0                 	db	-48
   714  00FED1  0D                 	db	13
   715  00FED2  0A                 	db	10
   716  00FED3  00                 	db	0
   717  00FED4                     STR_28:
   718  00FED4  52                 	db	82	;'R'
   719  00FED5  44                 	db	68	;'D'
   720  00FED6  31                 	db	49	;'1'
   721  00FED7  B1                 	db	-79
   722  00FED8  BB                 	db	-69
   723  00FED9  4D                 	db	77	;'M'
   724  00FEDA  43                 	db	67	;'C'
   725  00FEDB  31                 	db	49	;'1'
   726  00FEDC  D5                 	db	-43
   727  00FEDD  BC                 	db	-68
   728  00FEDE  D3                 	db	-45
   729  00FEDF  C3                 	db	-61
   730  00FEE0  D6                 	db	-42
   731  00FEE1  D0                 	db	-48
   732  00FEE2  0D                 	db	13
   733  00FEE3  0A                 	db	10
   734  00FEE4  00                 	db	0
   735  00FEE5                     STR_36:
   736  00FEE5  52                 	db	82	;'R'
   737  00FEE6  46                 	db	70	;'F'
   738  00FEE7  31                 	db	49	;'1'
   739  00FEE8  B1                 	db	-79
   740  00FEE9  BB                 	db	-69
   741  00FEEA  4D                 	db	77	;'M'
   742  00FEEB  43                 	db	67	;'C'
   743  00FEEC  31                 	db	49	;'1'
   744  00FEED  D5                 	db	-43
   745  00FEEE  BC                 	db	-68
   746  00FEEF  D3                 	db	-45
   747  00FEF0  C3                 	db	-61
   748  00FEF1  D6                 	db	-42
   749  00FEF2  D0                 	db	-48
   750  00FEF3  0D                 	db	13
   751  00FEF4  0A                 	db	10
   752  00FEF5  00                 	db	0
   753  00FEF6                     STR_29:
   754  00FEF6  52                 	db	82	;'R'
   755  00FEF7  44                 	db	68	;'D'
   756  00FEF8  32                 	db	50	;'2'
   757  00FEF9  B1                 	db	-79
   758  00FEFA  BB                 	db	-69
   759  00FEFB  4D                 	db	77	;'M'
   760  00FEFC  43                 	db	67	;'C'
   761  00FEFD  32                 	db	50	;'2'
   762  00FEFE  D5                 	db	-43
   763  00FEFF  BC                 	db	-68
   764  00FF00  D3                 	db	-45
   765  00FF01  C3                 	db	-61
   766  00FF02  D6                 	db	-42
   767  00FF03  D0                 	db	-48
   768  00FF04  0D                 	db	13
   769  00FF05  0A                 	db	10
   770  00FF06  00                 	db	0
   771  00FF07                     STR_37:
   772  00FF07  52                 	db	82	;'R'
   773  00FF08  46                 	db	70	;'F'
   774  00FF09  32                 	db	50	;'2'
   775  00FF0A  B1                 	db	-79
   776  00FF0B  BB                 	db	-69
   777  00FF0C  4D                 	db	77	;'M'
   778  00FF0D  43                 	db	67	;'C'
   779  00FF0E  32                 	db	50	;'2'
   780  00FF0F  D5                 	db	-43
   781  00FF10  BC                 	db	-68
   782  00FF11  D3                 	db	-45
   783  00FF12  C3                 	db	-61
   784  00FF13  D6                 	db	-42
   785  00FF14  D0                 	db	-48
   786  00FF15  0D                 	db	13
   787  00FF16  0A                 	db	10
   788  00FF17  00                 	db	0
   789  00FF18                     STR_30:
   790  00FF18  52                 	db	82	;'R'
   791  00FF19  44                 	db	68	;'D'
   792  00FF1A  33                 	db	51	;'3'
   793  00FF1B  B1                 	db	-79
   794  00FF1C  BB                 	db	-69
   795  00FF1D  4D                 	db	77	;'M'
   796  00FF1E  43                 	db	67	;'C'
   797  00FF1F  32                 	db	50	;'2'
   798  00FF20  D5                 	db	-43
   799  00FF21  BC                 	db	-68
   800  00FF22  D3                 	db	-45
   801  00FF23  C3                 	db	-61
   802  00FF24  D6                 	db	-42
   803  00FF25  D0                 	db	-48
   804  00FF26  0D                 	db	13
   805  00FF27  0A                 	db	10
   806  00FF28  00                 	db	0
   807  00FF29                     STR_38:
   808  00FF29  52                 	db	82	;'R'
   809  00FF2A  46                 	db	70	;'F'
   810  00FF2B  33                 	db	51	;'3'
   811  00FF2C  B1                 	db	-79
   812  00FF2D  BB                 	db	-69
   813  00FF2E  4D                 	db	77	;'M'
   814  00FF2F  43                 	db	67	;'C'
   815  00FF30  32                 	db	50	;'2'
   816  00FF31  D5                 	db	-43
   817  00FF32  BC                 	db	-68
   818  00FF33  D3                 	db	-45
   819  00FF34  C3                 	db	-61
   820  00FF35  D6                 	db	-42
   821  00FF36  D0                 	db	-48
   822  00FF37  0D                 	db	13
   823  00FF38  0A                 	db	10
   824  00FF39  00                 	db	0
   825  00FF3A                     STR_31:
   826  00FF3A  52                 	db	82	;'R'
   827  00FF3B  44                 	db	68	;'D'
   828  00FF3C  34                 	db	52	;'4'
   829  00FF3D  B1                 	db	-79
   830  00FF3E  BB                 	db	-69
   831  00FF3F  4D                 	db	77	;'M'
   832  00FF40  43                 	db	67	;'C'
   833  00FF41  33                 	db	51	;'3'
   834  00FF42  D5                 	db	-43
   835  00FF43  BC                 	db	-68
   836  00FF44  D3                 	db	-45
   837  00FF45  C3                 	db	-61
   838  00FF46  D6                 	db	-42
   839  00FF47  D0                 	db	-48
   840  00FF48  0D                 	db	13
   841  00FF49  0A                 	db	10
   842  00FF4A  00                 	db	0
   843  00FF4B                     STR_39:
   844  00FF4B  52                 	db	82	;'R'
   845  00FF4C  46                 	db	70	;'F'
   846  00FF4D  34                 	db	52	;'4'
   847  00FF4E  B1                 	db	-79
   848  00FF4F  BB                 	db	-69
   849  00FF50  4D                 	db	77	;'M'
   850  00FF51  43                 	db	67	;'C'
   851  00FF52  33                 	db	51	;'3'
   852  00FF53  D5                 	db	-43
   853  00FF54  BC                 	db	-68
   854  00FF55  D3                 	db	-45
   855  00FF56  C3                 	db	-61
   856  00FF57  D6                 	db	-42
   857  00FF58  D0                 	db	-48
   858  00FF59  0D                 	db	13
   859  00FF5A  0A                 	db	10
   860  00FF5B  00                 	db	0
   861  00FF5C                     STR_32:
   862  00FF5C  52                 	db	82	;'R'
   863  00FF5D  44                 	db	68	;'D'
   864  00FF5E  35                 	db	53	;'5'
   865  00FF5F  B1                 	db	-79
   866  00FF60  BB                 	db	-69
   867  00FF61  4D                 	db	77	;'M'
   868  00FF62  43                 	db	67	;'C'
   869  00FF63  33                 	db	51	;'3'
   870  00FF64  D5                 	db	-43
   871  00FF65  BC                 	db	-68
   872  00FF66  D3                 	db	-45
   873  00FF67  C3                 	db	-61
   874  00FF68  D6                 	db	-42
   875  00FF69  D0                 	db	-48
   876  00FF6A  0D                 	db	13
   877  00FF6B  0A                 	db	10
   878  00FF6C  00                 	db	0
   879  00FF6D                     STR_40:
   880  00FF6D  52                 	db	82	;'R'
   881  00FF6E  46                 	db	70	;'F'
   882  00FF6F  35                 	db	53	;'5'
   883  00FF70  B1                 	db	-79
   884  00FF71  BB                 	db	-69
   885  00FF72  4D                 	db	77	;'M'
   886  00FF73  43                 	db	67	;'C'
   887  00FF74  33                 	db	51	;'3'
   888  00FF75  D5                 	db	-43
   889  00FF76  BC                 	db	-68
   890  00FF77  D3                 	db	-45
   891  00FF78  C3                 	db	-61
   892  00FF79  D6                 	db	-42
   893  00FF7A  D0                 	db	-48
   894  00FF7B  0D                 	db	13
   895  00FF7C  0A                 	db	10
   896  00FF7D  00                 	db	0
   897  00FF7E                     STR_33:
   898  00FF7E  52                 	db	82	;'R'
   899  00FF7F  44                 	db	68	;'D'
   900  00FF80  36                 	db	54	;'6'
   901  00FF81  B1                 	db	-79
   902  00FF82  BB                 	db	-69
   903  00FF83  4D                 	db	77	;'M'
   904  00FF84  43                 	db	67	;'C'
   905  00FF85  34                 	db	52	;'4'
   906  00FF86  D5                 	db	-43
   907  00FF87  BC                 	db	-68
   908  00FF88  D3                 	db	-45
   909  00FF89  C3                 	db	-61
   910  00FF8A  D6                 	db	-42
   911  00FF8B  D0                 	db	-48
   912  00FF8C  0D                 	db	13
   913  00FF8D  0A                 	db	10
   914  00FF8E  00                 	db	0
   915  00FF8F                     STR_41:
   916  00FF8F  52                 	db	82	;'R'
   917  00FF90  46                 	db	70	;'F'
   918  00FF91  36                 	db	54	;'6'
   919  00FF92  B1                 	db	-79
   920  00FF93  BB                 	db	-69
   921  00FF94  4D                 	db	77	;'M'
   922  00FF95  43                 	db	67	;'C'
   923  00FF96  34                 	db	52	;'4'
   924  00FF97  D5                 	db	-43
   925  00FF98  BC                 	db	-68
   926  00FF99  D3                 	db	-45
   927  00FF9A  C3                 	db	-61
   928  00FF9B  D6                 	db	-42
   929  00FF9C  D0                 	db	-48
   930  00FF9D  0D                 	db	13
   931  00FF9E  0A                 	db	10
   932  00FF9F  00                 	db	0
   933  00FFA0                     STR_34:
   934  00FFA0  52                 	db	82	;'R'
   935  00FFA1  44                 	db	68	;'D'
   936  00FFA2  37                 	db	55	;'7'
   937  00FFA3  B1                 	db	-79
   938  00FFA4  BB                 	db	-69
   939  00FFA5  4D                 	db	77	;'M'
   940  00FFA6  43                 	db	67	;'C'
   941  00FFA7  34                 	db	52	;'4'
   942  00FFA8  D5                 	db	-43
   943  00FFA9  BC                 	db	-68
   944  00FFAA  D3                 	db	-45
   945  00FFAB  C3                 	db	-61
   946  00FFAC  D6                 	db	-42
   947  00FFAD  D0                 	db	-48
   948  00FFAE  0D                 	db	13
   949  00FFAF  0A                 	db	10
   950  00FFB0  00                 	db	0
   951  00FFB1                     STR_42:
   952  00FFB1  52                 	db	82	;'R'
   953  00FFB2  46                 	db	70	;'F'
   954  00FFB3  37                 	db	55	;'7'
   955  00FFB4  B1                 	db	-79
   956  00FFB5  BB                 	db	-69
   957  00FFB6  4D                 	db	77	;'M'
   958  00FFB7  43                 	db	67	;'C'
   959  00FFB8  34                 	db	52	;'4'
   960  00FFB9  D5                 	db	-43
   961  00FFBA  BC                 	db	-68
   962  00FFBB  D3                 	db	-45
   963  00FFBC  C3                 	db	-61
   964  00FFBD  D6                 	db	-42
   965  00FFBE  D0                 	db	-48
   966  00FFBF  0D                 	db	13
   967  00FFC0  0A                 	db	10
   968  00FFC1  00                 	db	0
   969  00FFC2                     STR_2:
   970  00FFC2  BD                 	db	-67
   971  00FFC3  FB                 	db	-5
   972  00FFC4  D3                 	db	-45
   973  00FFC5  C3                 	db	-61
   974  00FFC6  4D                 	db	77	;'M'
   975  00FFC7  43                 	db	67	;'C'
   976  00FFC8  31                 	db	49	;'1'
   977  00FFC9  CD                 	db	-51
   978  00FFCA  A8                 	db	-88
   979  00FFCB  B5                 	db	-75
   980  00FFCC  C0                 	db	-64
   981  00FFCD  21                 	db	33
   982  00FFCE  0D                 	db	13
   983  00FFCF  0A                 	db	10
   984  00FFD0  00                 	db	0
   985  00FFD1                     STR_3:
   986  00FFD1  BD                 	db	-67
   987  00FFD2  FB                 	db	-5
   988  00FFD3  D3                 	db	-45
   989  00FFD4  C3                 	db	-61
   990  00FFD5  4D                 	db	77	;'M'
   991  00FFD6  43                 	db	67	;'C'
   992  00FFD7  32                 	db	50	;'2'
   993  00FFD8  CD                 	db	-51
   994  00FFD9  A8                 	db	-88
   995  00FFDA  B5                 	db	-75
   996  00FFDB  C0                 	db	-64
   997  00FFDC  21                 	db	33
   998  00FFDD  0D                 	db	13
   999  00FFDE  0A                 	db	10
  1000  00FFDF  00                 	db	0
  1001  00FFE0                     STR_4:
  1002  00FFE0  BD                 	db	-67
  1003  00FFE1  FB                 	db	-5
  1004  00FFE2  D3                 	db	-45
  1005  00FFE3  C3                 	db	-61
  1006  00FFE4  4D                 	db	77	;'M'
  1007  00FFE5  43                 	db	67	;'C'
  1008  00FFE6  33                 	db	51	;'3'
  1009  00FFE7  CD                 	db	-51
  1010  00FFE8  A8                 	db	-88
  1011  00FFE9  B5                 	db	-75
  1012  00FFEA  C0                 	db	-64
  1013  00FFEB  21                 	db	33
  1014  00FFEC  0D                 	db	13
  1015  00FFED  0A                 	db	10
  1016  00FFEE  00                 	db	0
  1017  00FFEF                     STR_5:
  1018  00FFEF  BD                 	db	-67
  1019  00FFF0  FB                 	db	-5
  1020  00FFF1  D3                 	db	-45
  1021  00FFF2  C3                 	db	-61
  1022  00FFF3  4D                 	db	77	;'M'
  1023  00FFF4  43                 	db	67	;'C'
  1024  00FFF5  34                 	db	52	;'4'
  1025  00FFF6  CD                 	db	-51
  1026  00FFF7  A8                 	db	-88
  1027  00FFF8  B5                 	db	-75
  1028  00FFF9  C0                 	db	-64
  1029  00FFFA  21                 	db	33
  1030  00FFFB  0D                 	db	13
  1031  00FFFC  0A                 	db	10
  1032  00FFFD  00                 	db	0
  1033                           
  1034                           ; #config settings
  1035  00FFFE  00                 	db	0	; dummy byte at the end
  1036  0000                     
  1037                           	psect	cinit
  1038  000B1A                     __pcinit:
  1039                           	opt stack 0
  1040  000B1A                     start_initialization:
  1041                           	opt stack 0
  1042  000B1A                     __initialization:
  1043                           	opt stack 0
  1044                           
  1045                           ; Initialize objects allocated to COMRAMh (4 bytes)
  1046                           ; load TBLPTR registers with __pidataCOMRAMh
  1047  000B1A  0ECE               	movlw	low __pidataCOMRAMh
  1048  000B1C  6EF6               	movwf	tblptrl,c
  1049  000B1E  0E0E               	movlw	high __pidataCOMRAMh
  1050  000B20  6EF7               	movwf	tblptrh,c
  1051  000B22  0E00               	movlw	low (__pidataCOMRAMh shr (0+16))
  1052  000B24  6EF8               	movwf	tblptru,c
  1053  000B26  EE00  F05A         	lfsr	0,__pdataCOMRAMh
  1054  000B2A  EE10 F004          	lfsr	1,4
  1055  000B2E                     copy_data0:
  1056  000B2E  0009               	tblrd		*+
  1057  000B30  CFF5 FFEE          	movff	tablat,postinc0
  1058  000B34  50E5               	movf	postdec1,w,c
  1059  000B36  50E1               	movf	fsr1l,w,c
  1060  000B38  E1FA               	bnz	copy_data0
  1061                           
  1062                           ; Clear objects allocated to BANK0 (50 bytes)
  1063  000B3A  EE00  F060         	lfsr	0,__pbssBANK0
  1064  000B3E  0E32               	movlw	50
  1065  000B40                     clear_0:
  1066  000B40  6AEE               	clrf	postinc0,c
  1067  000B42  06E8               	decf	wreg,f,c
  1068  000B44  E1FD               	bnz	clear_0
  1069                           
  1070                           ; Clear objects allocated to COMRAMh (13 bytes)
  1071  000B46  EE00  F001         	lfsr	0,__pbssCOMRAMh
  1072  000B4A  0E0D               	movlw	13
  1073  000B4C                     clear_1:
  1074  000B4C  6AEE               	clrf	postinc0,c
  1075  000B4E  06E8               	decf	wreg,f,c
  1076  000B50  E1FD               	bnz	clear_1
  1077                           
  1078                           ; Clear objects allocated to BITCOMRAMl (1 bytes)
  1079  000B52  6A5E               	clrf	(__pbitbssCOMRAMl/(0+8))& (0+255),c
  1080                           
  1081                           ; Clear objects allocated to COMRAMl (28 bytes)
  1082  000B54  EE00  F023         	lfsr	0,__pbssCOMRAMl
  1083  000B58  0E1C               	movlw	28
  1084  000B5A                     clear_2:
  1085  000B5A  6AEE               	clrf	postinc0,c
  1086  000B5C  06E8               	decf	wreg,f,c
  1087  000B5E  E1FD               	bnz	clear_2
  1088  000B60                     end_of_initialization:
  1089                           	opt stack 0
  1090  000B60                     __end_of__initialization:
  1091                           	opt stack 0
  1092  000B60  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1093  000B62  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1094  000B64  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1095  000B66  6EF8               	movwf	tblptru,c
  1096  000B68  0100               	movlb	0
  1097  000B6A  EFAE  F006         	goto	_main	;jump to C main() function
  1098                           tblptru	equ	0xFF8
  1099                           tblptrh	equ	0xFF7
  1100                           tblptrl	equ	0xFF6
  1101                           tablat	equ	0xFF5
  1102                           postinc0	equ	0xFEE
  1103                           wreg	equ	0xFE8
  1104                           postdec1	equ	0xFE5
  1105                           fsr1l	equ	0xFE1
  1106                           
  1107                           	psect	bitbssCOMRAMl
  1108  0002F0                     __pbitbssCOMRAMl:
  1109                           	opt stack 0
  1110  0002F0                     _RX_flag:
  1111                           	opt stack 0
  1112  0002F0                     	ds	1
  1113                           tblptru	equ	0xFF8
  1114                           tblptrh	equ	0xFF7
  1115                           tblptrl	equ	0xFF6
  1116                           tablat	equ	0xFF5
  1117                           postinc0	equ	0xFEE
  1118                           wreg	equ	0xFE8
  1119                           postdec1	equ	0xFE5
  1120                           fsr1l	equ	0xFE1
  1121                           
  1122                           	psect	bssCOMRAMh
  1123  000001                     __pbssCOMRAMh:
  1124                           	opt stack 0
  1125  000001                     _MC2_TIME_H:
  1126                           	opt stack 0
  1127  000001                     	ds	2
  1128  000003                     _MC1_TIME_H:
  1129                           	opt stack 0
  1130  000003                     	ds	2
  1131  000005                     _MC4_FZ_C:
  1132                           	opt stack 0
  1133  000005                     	ds	1
  1134  000006                     _MC3_FZ_C:
  1135                           	opt stack 0
  1136  000006                     	ds	1
  1137  000007                     _MC2_FZ_C:
  1138                           	opt stack 0
  1139  000007                     	ds	1
  1140  000008                     _MC1_FZ_C:
  1141                           	opt stack 0
  1142  000008                     	ds	1
  1143  000009                     _MC4_START_Signal:
  1144                           	opt stack 0
  1145  000009                     	ds	1
  1146  00000A                     _MC3_START_Signal:
  1147                           	opt stack 0
  1148  00000A                     	ds	1
  1149  00000B                     _MC2_START_Signal:
  1150                           	opt stack 0
  1151  00000B                     	ds	1
  1152  00000C                     _MC1_START_Signal:
  1153                           	opt stack 0
  1154  00000C                     	ds	1
  1155  00000D                     _Current_RX:
  1156                           	opt stack 0
  1157  00000D                     	ds	1
  1158                           tblptru	equ	0xFF8
  1159                           tblptrh	equ	0xFF7
  1160                           tblptrl	equ	0xFF6
  1161                           tablat	equ	0xFF5
  1162                           postinc0	equ	0xFEE
  1163                           wreg	equ	0xFE8
  1164                           postdec1	equ	0xFE5
  1165                           fsr1l	equ	0xFE1
  1166                           
  1167                           	psect	dataCOMRAMh
  1168  00005A                     __pdataCOMRAMh:
  1169                           	opt stack 0
  1170  00005A                     _MC4_Channel:
  1171                           	opt stack 0
  1172  00005A                     	ds	1
  1173  00005B                     _MC3_Channel:
  1174                           	opt stack 0
  1175  00005B                     	ds	1
  1176  00005C                     _MC2_Channel:
  1177                           	opt stack 0
  1178  00005C                     	ds	1
  1179  00005D                     _MC1_Channel:
  1180                           	opt stack 0
  1181  00005D                     	ds	1
  1182                           tblptru	equ	0xFF8
  1183                           tblptrh	equ	0xFF7
  1184                           tblptrl	equ	0xFF6
  1185                           tablat	equ	0xFF5
  1186                           postinc0	equ	0xFEE
  1187                           wreg	equ	0xFE8
  1188                           postdec1	equ	0xFE5
  1189                           fsr1l	equ	0xFE1
  1190                           
  1191                           	psect	bssCOMRAMl
  1192  000023                     __pbssCOMRAMl:
  1193                           	opt stack 0
  1194  000023                     _RX_IO_PARM:
  1195                           	opt stack 0
  1196  000023                     	ds	5
  1197  000028                     _MC4_SwapDelay:
  1198                           	opt stack 0
  1199  000028                     	ds	2
  1200  00002A                     _MC3_SwapDelay:
  1201                           	opt stack 0
  1202  00002A                     	ds	2
  1203  00002C                     _MC2_SwapDelay:
  1204                           	opt stack 0
  1205  00002C                     	ds	2
  1206  00002E                     _MC1_SwapDelay:
  1207                           	opt stack 0
  1208  00002E                     	ds	2
  1209  000030                     _MC4_TIME_L:
  1210                           	opt stack 0
  1211  000030                     	ds	2
  1212  000032                     _MC3_TIME_L:
  1213                           	opt stack 0
  1214  000032                     	ds	2
  1215  000034                     _MC2_TIME_L:
  1216                           	opt stack 0
  1217  000034                     	ds	2
  1218  000036                     _MC1_TIME_L:
  1219                           	opt stack 0
  1220  000036                     	ds	2
  1221  000038                     _MC4_TIME_H:
  1222                           	opt stack 0
  1223  000038                     	ds	2
  1224  00003A                     _MC3_TIME_H:
  1225                           	opt stack 0
  1226  00003A                     	ds	2
  1227  00003C                     _ct:
  1228                           	opt stack 0
  1229  00003C                     	ds	2
  1230  00003E                     _RX_C:
  1231                           	opt stack 0
  1232  00003E                     	ds	1
  1233                           tblptru	equ	0xFF8
  1234                           tblptrh	equ	0xFF7
  1235                           tblptrl	equ	0xFF6
  1236                           tablat	equ	0xFF5
  1237                           postinc0	equ	0xFEE
  1238                           wreg	equ	0xFE8
  1239                           postdec1	equ	0xFE5
  1240                           fsr1l	equ	0xFE1
  1241                           
  1242                           	psect	bssBANK0
  1243  000060                     __pbssBANK0:
  1244                           	opt stack 0
  1245  000060                     _MC4_PARM:
  1246                           	opt stack 0
  1247  000060                     	ds	8
  1248  000068                     _MC3_PARM:
  1249                           	opt stack 0
  1250  000068                     	ds	8
  1251  000070                     _MC2_PARM:
  1252                           	opt stack 0
  1253  000070                     	ds	8
  1254  000078                     _MC1_PARM:
  1255                           	opt stack 0
  1256  000078                     	ds	8
  1257  000080                     _RX:
  1258                           	opt stack 0
  1259  000080                     	ds	8
  1260  000088                     _McStart_PARM:
  1261                           	opt stack 0
  1262  000088                     	ds	6
  1263  00008E                     _MC_Channel_IO_PARM:
  1264                           	opt stack 0
  1265  00008E                     	ds	4
  1266                           tblptru	equ	0xFF8
  1267                           tblptrh	equ	0xFF7
  1268                           tblptrl	equ	0xFF6
  1269                           tablat	equ	0xFF5
  1270                           postinc0	equ	0xFEE
  1271                           wreg	equ	0xFE8
  1272                           postdec1	equ	0xFE5
  1273                           fsr1l	equ	0xFE1
  1274                           
  1275                           	psect	cstackBANK0
  1276  000092                     __pcstackBANK0:
  1277                           	opt stack 0
  1278  000092                     Usart_CL@i:
  1279                           	opt stack 0
  1280                           
  1281                           ; 2 bytes @ 0x0
  1282  000092                     	ds	2
  1283  000094                     Usart_CL@i_801:
  1284                           	opt stack 0
  1285                           
  1286                           ; 2 bytes @ 0x2
  1287  000094                     	ds	2
  1288  000096                     Usart_CL@i_802:
  1289                           	opt stack 0
  1290                           
  1291                           ; 2 bytes @ 0x4
  1292  000096                     	ds	2
  1293  000098                     Usart_CL@i_803:
  1294                           	opt stack 0
  1295                           
  1296                           ; 2 bytes @ 0x6
  1297  000098                     	ds	2
  1298  00009A                     Usart_CL@i_804:
  1299                           	opt stack 0
  1300                           
  1301                           ; 2 bytes @ 0x8
  1302  00009A                     	ds	2
  1303  00009C                     Usart_CL@i_805:
  1304                           	opt stack 0
  1305                           
  1306                           ; 2 bytes @ 0xA
  1307  00009C                     	ds	2
  1308  00009E                     
  1309                           ; 2 bytes @ 0xC
  1310  00009E                     	ds	2
  1311  0000A0                     
  1312                           ; 3 bytes @ 0xE
  1313  0000A0                     	ds	3
  1314                           tblptru	equ	0xFF8
  1315                           tblptrh	equ	0xFF7
  1316                           tblptrl	equ	0xFF6
  1317                           tablat	equ	0xFF5
  1318                           postinc0	equ	0xFEE
  1319                           wreg	equ	0xFE8
  1320                           postdec1	equ	0xFE5
  1321                           fsr1l	equ	0xFE1
  1322                           
  1323                           	psect	cstackCOMRAMh
  1324  00003F                     __pcstackCOMRAMh:
  1325                           	opt stack 0
  1326  00003F                     ??_ISR:
  1327                           
  1328                           ; 1 bytes @ 0x0
  1329  00003F                     	ds	14
  1330  00004D                     putch@data:
  1331                           	opt stack 0
  1332                           
  1333                           ; 1 bytes @ 0xE
  1334  00004D                     	ds	1
  1335  00004E                     ?_printf:
  1336                           	opt stack 0
  1337  00004E                     printf@f:
  1338                           	opt stack 0
  1339                           
  1340                           ; 2 bytes @ 0xF
  1341  00004E                     	ds	2
  1342  000050                     printf@ap:
  1343                           	opt stack 0
  1344                           
  1345                           ; 2 bytes @ 0x11
  1346  000050                     	ds	2
  1347  000052                     printf@c:
  1348                           	opt stack 0
  1349                           
  1350                           ; 1 bytes @ 0x13
  1351  000052                     	ds	1
  1352  000053                     IOKZ_Filter@PB_BIT:
  1353                           	opt stack 0
  1354                           
  1355                           ; 1 bytes @ 0x14
  1356  000053                     	ds	1
  1357  000054                     IOKZ_Filter@PORTX_KZ:
  1358                           	opt stack 0
  1359                           
  1360                           ; 1 bytes @ 0x15
  1361  000054                     	ds	1
  1362  000055                     ??_IOKZ_Filter:
  1363                           
  1364                           ; 1 bytes @ 0x16
  1365  000055                     	ds	2
  1366  000057                     IOKZ_Filter@RX:
  1367                           	opt stack 0
  1368                           
  1369                           ; 1 bytes @ 0x18
  1370  000057                     	ds	1
  1371  000058                     RX_IOKZ_PARM@MC_Occupy_Channel:
  1372                           	opt stack 0
  1373                           
  1374                           ; 1 bytes @ 0x19
  1375  000058                     	ds	1
  1376  000059                     RX_IOKZ_PARM@RC_PB_BIT:
  1377                           	opt stack 0
  1378                           
  1379                           ; 1 bytes @ 0x1A
  1380  000059                     	ds	1
  1381  00005A                     tblptru	equ	0xFF8
  1382                           tblptrh	equ	0xFF7
  1383                           tblptrl	equ	0xFF6
  1384                           tablat	equ	0xFF5
  1385                           postinc0	equ	0xFEE
  1386                           wreg	equ	0xFE8
  1387                           postdec1	equ	0xFE5
  1388                           fsr1l	equ	0xFE1
  1389                           
  1390                           ; 1 bytes @ 0x1B
  1391                           
  1392                           	psect	cstackCOMRAMl
  1393  000000                     __pcstackCOMRAMl:
  1394                           	opt stack 0
  1395  000000                     tblptru	equ	0xFF8
  1396                           tblptrh	equ	0xFF7
  1397                           tblptrl	equ	0xFF6
  1398                           tablat	equ	0xFF5
  1399                           postinc0	equ	0xFEE
  1400                           wreg	equ	0xFE8
  1401                           postdec1	equ	0xFE5
  1402                           fsr1l	equ	0xFE1
  1403                           
  1404                           ; 1 bytes @ 0x0
  1405 ;;
  1406 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1407 ;;
  1408 ;; *************** function _main *****************
  1409 ;; Defined at:
  1410 ;;		line 19 in file "main.c"
  1411 ;; Parameters:    Size  Location     Type
  1412 ;;  argc            2   12[BANK0 ] int 
  1413 ;;  argv            3   14[BANK0 ] PTR PTR unsigned char 
  1414 ;; Auto vars:     Size  Location     Type
  1415 ;;		None
  1416 ;; Return value:  Size  Location     Type
  1417 ;;                  2   12[BANK0 ] int 
  1418 ;; Registers used:
  1419 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1420 ;; Tracked objects:
  1421 ;;		On entry : 0/0
  1422 ;;		On exit  : 0/0
  1423 ;;		Unchanged: 0/0
  1424 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  1425 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1428 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1429 ;;Total ram usage:        5 bytes
  1430 ;; Hardware stack levels required when called:    8
  1431 ;; This function calls:
  1432 ;;		_IO_INT
  1433 ;;		_MC1_IO_SWP
  1434 ;;		_MC2_IO_SWP
  1435 ;;		_MC3_IO_SWP
  1436 ;;		_MC4_IO_SWP
  1437 ;;		_MC_END_EVENT
  1438 ;;		_UartInit
  1439 ;;		_Usart_CL
  1440 ;;		_tmr1_int
  1441 ;; This function is called by:
  1442 ;;		Startup code after reset
  1443 ;; This function uses a non-reentrant model
  1444 ;;
  1445                           
  1446                           	psect	text0
  1447  000D5C                     __ptext0:
  1448                           	opt stack 0
  1449  000D5C                     _main:
  1450                           	opt stack 23
  1451                           
  1452                           ;main.c: 20: IO_INT();
  1453                           
  1454                           ;incstack = 0
  1455  000D5C  ECDF  F006         	call	_IO_INT	;wreg free
  1456                           
  1457                           ;main.c: 21: UartInit();
  1458  000D60  ECF2  F006         	call	_UartInit	;wreg free
  1459                           
  1460                           ;main.c: 22: tmr1_int();
  1461  000D64  EC4C  F007         	call	_tmr1_int	;wreg free
  1462                           
  1463                           ;main.c: 23: MC_Start_BZ=0x00;
  1464  000D68  0E00               	movlw	0
  1465  000D6A  6E21               	movwf	33,c	;volatile
  1466                           
  1467                           ;main.c: 24: MC_IO_STATE=0x00;
  1468  000D6C  0E00               	movlw	0
  1469  000D6E  6E22               	movwf	34,c	;volatile
  1470  000D70                     l3493:
  1471                           
  1472                           ;main.c: 26: {
  1473                           ;main.c: 27: if(RX_flag==1)Usart_CL();
  1474  000D70  B05E               	btfsc	_RX_flag/(0+8),_RX_flag& (0+7),c
  1475  000D72  EC82  F002         	call	_Usart_CL	;wreg free
  1476                           
  1477                           ;main.c: 28: if(MC1_FZ_BZ)MC1_IO_SWP();
  1478  000D76  B821               	btfsc	33,4,c	;volatile
  1479  000D78  EC61  F005         	call	_MC1_IO_SWP	;wreg free
  1480                           
  1481                           ;main.c: 29: if(MC2_FZ_BZ)MC2_IO_SWP();
  1482  000D7C  BA21               	btfsc	33,5,c	;volatile
  1483  000D7E  EC35  F005         	call	_MC2_IO_SWP	;wreg free
  1484                           
  1485                           ;main.c: 30: if(MC3_FZ_BZ)MC3_IO_SWP();
  1486  000D82  BC21               	btfsc	33,6,c	;volatile
  1487  000D84  EC09  F005         	call	_MC3_IO_SWP	;wreg free
  1488                           
  1489                           ;main.c: 31: if(MC4_FZ_BZ)MC4_IO_SWP();
  1490  000D88  BE21               	btfsc	33,7,c	;volatile
  1491  000D8A  ECDD  F004         	call	_MC4_IO_SWP	;wreg free
  1492                           
  1493                           ;main.c: 32: MC_END_EVENT();
  1494  000D8E  ECB7  F005         	call	_MC_END_EVENT	;wreg free
  1495  000D92  D7EE               	goto	l3493
  1496  000D94                     __end_of_main:
  1497                           	opt stack 0
  1498                           tblptru	equ	0xFF8
  1499                           tblptrh	equ	0xFF7
  1500                           tblptrl	equ	0xFF6
  1501                           tablat	equ	0xFF5
  1502                           postinc0	equ	0xFEE
  1503                           wreg	equ	0xFE8
  1504                           postdec1	equ	0xFE5
  1505                           fsr1l	equ	0xFE1
  1506                           
  1507 ;; *************** function _tmr1_int *****************
  1508 ;; Defined at:
  1509 ;;		line 14 in file "TMR1.c"
  1510 ;; Parameters:    Size  Location     Type
  1511 ;;		None
  1512 ;; Auto vars:     Size  Location     Type
  1513 ;;		None
  1514 ;; Return value:  Size  Location     Type
  1515 ;;                  1    wreg      void 
  1516 ;; Registers used:
  1517 ;;		wreg, status,2
  1518 ;; Tracked objects:
  1519 ;;		On entry : 0/0
  1520 ;;		On exit  : 0/0
  1521 ;;		Unchanged: 0/0
  1522 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  1523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1527 ;;Total ram usage:        0 bytes
  1528 ;; Hardware stack levels used:    1
  1529 ;; Hardware stack levels required when called:    3
  1530 ;; This function calls:
  1531 ;;		Nothing
  1532 ;; This function is called by:
  1533 ;;		_main
  1534 ;; This function uses a non-reentrant model
  1535 ;;
  1536                           
  1537                           	psect	text1
  1538  000E98                     __ptext1:
  1539                           	opt stack 0
  1540  000E98                     _tmr1_int:
  1541                           	opt stack 27
  1542                           
  1543                           ;TMR1.c: 16: T1CON = 0X02;
  1544                           
  1545                           ;incstack = 0
  1546  000E98  0E02               	movlw	2
  1547  000E9A  6ECD               	movwf	4045,c	;volatile
  1548                           
  1549                           ;TMR1.c: 17: TMR1H = (65536-1560)/256;
  1550  000E9C  0EF9               	movlw	249
  1551  000E9E  6ECF               	movwf	4047,c	;volatile
  1552                           
  1553                           ;TMR1.c: 18: TMR1L = (65536-1560)%256;
  1554  000EA0  0EE8               	movlw	232
  1555  000EA2  6ECE               	movwf	4046,c	;volatile
  1556                           
  1557                           ;TMR1.c: 19: PMD1bits.TMR1MD = 0;
  1558  000EA4  010F               	movlb	15	; () banked
  1559  000EA6  9358               	bcf	88,1,b	;volatile
  1560                           
  1561                           ; BSR set to: 15
  1562                           ;TMR1.c: 20: T1CONbits.TMR1ON = 1;
  1563  000EA8  80CD               	bsf	4045,0,c	;volatile
  1564                           
  1565                           ; BSR set to: 15
  1566                           ;TMR1.c: 21: PIE1bits.TMR1IE = 1;
  1567  000EAA  809D               	bsf	3997,0,c	;volatile
  1568                           
  1569                           ; BSR set to: 15
  1570                           ;TMR1.c: 22: PIR1bits.TMR1IF = 0;
  1571  000EAC  909E               	bcf	3998,0,c	;volatile
  1572                           
  1573                           ; BSR set to: 15
  1574  000EAE  0012               	return		;funcret
  1575  000EB0                     __end_of_tmr1_int:
  1576                           	opt stack 0
  1577                           tblptru	equ	0xFF8
  1578                           tblptrh	equ	0xFF7
  1579                           tblptrl	equ	0xFF6
  1580                           tablat	equ	0xFF5
  1581                           postinc0	equ	0xFEE
  1582                           wreg	equ	0xFE8
  1583                           postdec1	equ	0xFE5
  1584                           fsr1l	equ	0xFE1
  1585                           
  1586 ;; *************** function _Usart_CL *****************
  1587 ;; Defined at:
  1588 ;;		line 36 in file "USART1.c"
  1589 ;; Parameters:    Size  Location     Type
  1590 ;;		None
  1591 ;; Auto vars:     Size  Location     Type
  1592 ;;  i               2   10[BANK0 ] int 
  1593 ;;  i               2    8[BANK0 ] int 
  1594 ;;  i               2    6[BANK0 ] int 
  1595 ;;  i               2    4[BANK0 ] int 
  1596 ;;  i               2    2[BANK0 ] int 
  1597 ;;  i               2    0[BANK0 ] int 
  1598 ;; Return value:  Size  Location     Type
  1599 ;;                  1    wreg      void 
  1600 ;; Registers used:
  1601 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1602 ;; Tracked objects:
  1603 ;;		On entry : 0/0
  1604 ;;		On exit  : 0/0
  1605 ;;		Unchanged: 0/0
  1606 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  1607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1608 ;;      Locals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1610 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1611 ;;Total ram usage:       12 bytes
  1612 ;; Hardware stack levels used:    1
  1613 ;; Hardware stack levels required when called:    7
  1614 ;; This function calls:
  1615 ;;		_MC1_PARM_CL
  1616 ;;		_MC2_PARM_CL
  1617 ;;		_MC3_PARM_CL
  1618 ;;		_MC4_PARM_CL
  1619 ;;		_MC_EVENT_Trigge
  1620 ;;		_McStart_PARM_CL
  1621 ;;		_RX_IOKZ_PARM
  1622 ;;		_printf
  1623 ;; This function is called by:
  1624 ;;		_main
  1625 ;; This function uses a non-reentrant model
  1626 ;;
  1627                           
  1628                           	psect	text2
  1629  000504                     __ptext2:
  1630                           	opt stack 0
  1631  000504                     _Usart_CL:
  1632                           	opt stack 23
  1633                           
  1634                           ;USART1.c: 38: RX_flag=0;
  1635                           
  1636                           ; BSR set to: 15
  1637                           ;incstack = 0
  1638  000504  905E               	bcf	_RX_flag/(0+8),_RX_flag& (0+7),c
  1639                           
  1640                           ;USART1.c: 41: Current_RX=RX[1];
  1641  000506  C081  F00D         	movff	_RX+1,_Current_RX
  1642                           
  1643                           ;USART1.c: 43: switch(Current_RX)
  1644  00050A  D0FF               	goto	l3421
  1645  00050C                     l3331:
  1646                           
  1647                           ;USART1.c: 47: for(int i=0; i<8;i++) MC1_PARM[i] = RX[i];
  1648  00050C  0E00               	movlw	0
  1649  00050E  0100               	movlb	0	; () banked
  1650  000510  6F93               	movwf	(Usart_CL@i+1)& (0+255),b
  1651  000512  0E00               	movlw	0
  1652  000514  6F92               	movwf	Usart_CL@i& (0+255),b
  1653  000516                     l3333:
  1654                           
  1655                           ; BSR set to: 0
  1656  000516  0100               	movlb	0	; () banked
  1657  000518  BF93               	btfsc	(Usart_CL@i+1)& (0+255),7,b
  1658  00051A  D008               	goto	l3337
  1659  00051C  0100               	movlb	0	; () banked
  1660  00051E  5193               	movf	(Usart_CL@i+1)& (0+255),w,b
  1661  000520  E11B               	bnz	l3343
  1662  000522  0E08               	movlw	8
  1663  000524  0100               	movlb	0	; () banked
  1664  000526  5D92               	subwf	Usart_CL@i& (0+255),w,b
  1665  000528  B0D8               	btfsc	status,0,c
  1666  00052A  D016               	goto	l3343
  1667  00052C                     l3337:
  1668                           
  1669                           ; BSR set to: 0
  1670  00052C  0E80               	movlw	low _RX
  1671  00052E  0100               	movlb	0	; () banked
  1672  000530  2592               	addwf	Usart_CL@i& (0+255),w,b
  1673  000532  6ED9               	movwf	fsr2l,c
  1674  000534  0E00               	movlw	high _RX
  1675  000536  0100               	movlb	0	; () banked
  1676  000538  2193               	addwfc	(Usart_CL@i+1)& (0+255),w,b
  1677  00053A  6EDA               	movwf	fsr2h,c
  1678  00053C  0E78               	movlw	low _MC1_PARM
  1679  00053E  0100               	movlb	0	; () banked
  1680  000540  2592               	addwf	Usart_CL@i& (0+255),w,b
  1681  000542  6EE1               	movwf	fsr1l,c
  1682  000544  0E00               	movlw	high _MC1_PARM
  1683  000546  0100               	movlb	0	; () banked
  1684  000548  2193               	addwfc	(Usart_CL@i+1)& (0+255),w,b
  1685  00054A  6EE2               	movwf	fsr1h,c
  1686  00054C  CFDF FFE7          	movff	indf2,indf1
  1687                           
  1688                           ; BSR set to: 0
  1689  000550  0100               	movlb	0	; () banked
  1690  000552  4B92               	infsnz	Usart_CL@i& (0+255),f,b
  1691  000554  2B93               	incf	(Usart_CL@i+1)& (0+255),f,b
  1692  000556  D7DF               	goto	l3333
  1693  000558                     l3343:
  1694                           
  1695                           ; BSR set to: 0
  1696                           ;USART1.c: 48: MC1_PARM_CL();
  1697  000558  EC6D  F006         	call	_MC1_PARM_CL	;wreg free
  1698                           
  1699                           ;USART1.c: 50: break;
  1700  00055C  0012               	return	
  1701  00055E                     l3345:
  1702                           
  1703                           ;USART1.c: 53: for(int i=0; i<8;i++) MC2_PARM[i] = RX[i];
  1704  00055E  0E00               	movlw	0
  1705  000560  0100               	movlb	0	; () banked
  1706  000562  6F95               	movwf	(Usart_CL@i_801+1)& (0+255),b
  1707  000564  0E00               	movlw	0
  1708  000566  6F94               	movwf	Usart_CL@i_801& (0+255),b
  1709  000568                     l3347:
  1710                           
  1711                           ; BSR set to: 0
  1712  000568  0100               	movlb	0	; () banked
  1713  00056A  BF95               	btfsc	(Usart_CL@i_801+1)& (0+255),7,b
  1714  00056C  D008               	goto	l3351
  1715  00056E  0100               	movlb	0	; () banked
  1716  000570  5195               	movf	(Usart_CL@i_801+1)& (0+255),w,b
  1717  000572  E11B               	bnz	l3357
  1718  000574  0E08               	movlw	8
  1719  000576  0100               	movlb	0	; () banked
  1720  000578  5D94               	subwf	Usart_CL@i_801& (0+255),w,b
  1721  00057A  B0D8               	btfsc	status,0,c
  1722  00057C  D016               	goto	l3357
  1723  00057E                     l3351:
  1724                           
  1725                           ; BSR set to: 0
  1726  00057E  0E80               	movlw	low _RX
  1727  000580  0100               	movlb	0	; () banked
  1728  000582  2594               	addwf	Usart_CL@i_801& (0+255),w,b
  1729  000584  6ED9               	movwf	fsr2l,c
  1730  000586  0E00               	movlw	high _RX
  1731  000588  0100               	movlb	0	; () banked
  1732  00058A  2195               	addwfc	(Usart_CL@i_801+1)& (0+255),w,b
  1733  00058C  6EDA               	movwf	fsr2h,c
  1734  00058E  0E70               	movlw	low _MC2_PARM
  1735  000590  0100               	movlb	0	; () banked
  1736  000592  2594               	addwf	Usart_CL@i_801& (0+255),w,b
  1737  000594  6EE1               	movwf	fsr1l,c
  1738  000596  0E00               	movlw	high _MC2_PARM
  1739  000598  0100               	movlb	0	; () banked
  1740  00059A  2195               	addwfc	(Usart_CL@i_801+1)& (0+255),w,b
  1741  00059C  6EE2               	movwf	fsr1h,c
  1742  00059E  CFDF FFE7          	movff	indf2,indf1
  1743                           
  1744                           ; BSR set to: 0
  1745  0005A2  0100               	movlb	0	; () banked
  1746  0005A4  4B94               	infsnz	Usart_CL@i_801& (0+255),f,b
  1747  0005A6  2B95               	incf	(Usart_CL@i_801+1)& (0+255),f,b
  1748  0005A8  D7DF               	goto	l3347
  1749  0005AA                     l3357:
  1750                           
  1751                           ; BSR set to: 0
  1752                           ;USART1.c: 54: MC2_PARM_CL();
  1753  0005AA  EC49  F006         	call	_MC2_PARM_CL	;wreg free
  1754                           
  1755                           ;USART1.c: 56: break;
  1756  0005AE  0012               	return	
  1757  0005B0                     l3359:
  1758                           
  1759                           ;USART1.c: 59: for(int i=0; i<8;i++) MC3_PARM[i] = RX[i];
  1760  0005B0  0E00               	movlw	0
  1761  0005B2  0100               	movlb	0	; () banked
  1762  0005B4  6F97               	movwf	(Usart_CL@i_802+1)& (0+255),b
  1763  0005B6  0E00               	movlw	0
  1764  0005B8  6F96               	movwf	Usart_CL@i_802& (0+255),b
  1765  0005BA                     l3361:
  1766                           
  1767                           ; BSR set to: 0
  1768  0005BA  0100               	movlb	0	; () banked
  1769  0005BC  BF97               	btfsc	(Usart_CL@i_802+1)& (0+255),7,b
  1770  0005BE  D008               	goto	l3365
  1771  0005C0  0100               	movlb	0	; () banked
  1772  0005C2  5197               	movf	(Usart_CL@i_802+1)& (0+255),w,b
  1773  0005C4  E11B               	bnz	l3371
  1774  0005C6  0E08               	movlw	8
  1775  0005C8  0100               	movlb	0	; () banked
  1776  0005CA  5D96               	subwf	Usart_CL@i_802& (0+255),w,b
  1777  0005CC  B0D8               	btfsc	status,0,c
  1778  0005CE  D016               	goto	l3371
  1779  0005D0                     l3365:
  1780                           
  1781                           ; BSR set to: 0
  1782  0005D0  0E80               	movlw	low _RX
  1783  0005D2  0100               	movlb	0	; () banked
  1784  0005D4  2596               	addwf	Usart_CL@i_802& (0+255),w,b
  1785  0005D6  6ED9               	movwf	fsr2l,c
  1786  0005D8  0E00               	movlw	high _RX
  1787  0005DA  0100               	movlb	0	; () banked
  1788  0005DC  2197               	addwfc	(Usart_CL@i_802+1)& (0+255),w,b
  1789  0005DE  6EDA               	movwf	fsr2h,c
  1790  0005E0  0E68               	movlw	low _MC3_PARM
  1791  0005E2  0100               	movlb	0	; () banked
  1792  0005E4  2596               	addwf	Usart_CL@i_802& (0+255),w,b
  1793  0005E6  6EE1               	movwf	fsr1l,c
  1794  0005E8  0E00               	movlw	high _MC3_PARM
  1795  0005EA  0100               	movlb	0	; () banked
  1796  0005EC  2197               	addwfc	(Usart_CL@i_802+1)& (0+255),w,b
  1797  0005EE  6EE2               	movwf	fsr1h,c
  1798  0005F0  CFDF FFE7          	movff	indf2,indf1
  1799                           
  1800                           ; BSR set to: 0
  1801  0005F4  0100               	movlb	0	; () banked
  1802  0005F6  4B96               	infsnz	Usart_CL@i_802& (0+255),f,b
  1803  0005F8  2B97               	incf	(Usart_CL@i_802+1)& (0+255),f,b
  1804  0005FA  D7DF               	goto	l3361
  1805  0005FC                     l3371:
  1806                           
  1807                           ; BSR set to: 0
  1808                           ;USART1.c: 60: MC3_PARM_CL();
  1809  0005FC  EC25  F006         	call	_MC3_PARM_CL	;wreg free
  1810                           
  1811                           ;USART1.c: 62: break;
  1812  000600  0012               	return	
  1813  000602                     l3373:
  1814                           
  1815                           ;USART1.c: 65: for(int i=0; i<8;i++) MC4_PARM[i] = RX[i];
  1816  000602  0E00               	movlw	0
  1817  000604  0100               	movlb	0	; () banked
  1818  000606  6F99               	movwf	(Usart_CL@i_803+1)& (0+255),b
  1819  000608  0E00               	movlw	0
  1820  00060A  6F98               	movwf	Usart_CL@i_803& (0+255),b
  1821  00060C                     l3375:
  1822                           
  1823                           ; BSR set to: 0
  1824  00060C  0100               	movlb	0	; () banked
  1825  00060E  BF99               	btfsc	(Usart_CL@i_803+1)& (0+255),7,b
  1826  000610  D008               	goto	l3379
  1827  000612  0100               	movlb	0	; () banked
  1828  000614  5199               	movf	(Usart_CL@i_803+1)& (0+255),w,b
  1829  000616  E11B               	bnz	l3385
  1830  000618  0E08               	movlw	8
  1831  00061A  0100               	movlb	0	; () banked
  1832  00061C  5D98               	subwf	Usart_CL@i_803& (0+255),w,b
  1833  00061E  B0D8               	btfsc	status,0,c
  1834  000620  D016               	goto	l3385
  1835  000622                     l3379:
  1836                           
  1837                           ; BSR set to: 0
  1838  000622  0E80               	movlw	low _RX
  1839  000624  0100               	movlb	0	; () banked
  1840  000626  2598               	addwf	Usart_CL@i_803& (0+255),w,b
  1841  000628  6ED9               	movwf	fsr2l,c
  1842  00062A  0E00               	movlw	high _RX
  1843  00062C  0100               	movlb	0	; () banked
  1844  00062E  2199               	addwfc	(Usart_CL@i_803+1)& (0+255),w,b
  1845  000630  6EDA               	movwf	fsr2h,c
  1846  000632  0E60               	movlw	low _MC4_PARM
  1847  000634  0100               	movlb	0	; () banked
  1848  000636  2598               	addwf	Usart_CL@i_803& (0+255),w,b
  1849  000638  6EE1               	movwf	fsr1l,c
  1850  00063A  0E00               	movlw	high _MC4_PARM
  1851  00063C  0100               	movlb	0	; () banked
  1852  00063E  2199               	addwfc	(Usart_CL@i_803+1)& (0+255),w,b
  1853  000640  6EE2               	movwf	fsr1h,c
  1854  000642  CFDF FFE7          	movff	indf2,indf1
  1855                           
  1856                           ; BSR set to: 0
  1857  000646  0100               	movlb	0	; () banked
  1858  000648  4B98               	infsnz	Usart_CL@i_803& (0+255),f,b
  1859  00064A  2B99               	incf	(Usart_CL@i_803+1)& (0+255),f,b
  1860  00064C  D7DF               	goto	l3375
  1861  00064E                     l3385:
  1862                           
  1863                           ; BSR set to: 0
  1864                           ;USART1.c: 66: MC4_PARM_CL();
  1865  00064E  EC01  F006         	call	_MC4_PARM_CL	;wreg free
  1866                           
  1867                           ;USART1.c: 68: break;
  1868  000652  0012               	return	
  1869  000654                     l3387:
  1870                           
  1871                           ;USART1.c: 71: for(int i=0; i<6;i++) McStart_PARM[i] = RX[i];
  1872  000654  0E00               	movlw	0
  1873  000656  0100               	movlb	0	; () banked
  1874  000658  6F9B               	movwf	(Usart_CL@i_804+1)& (0+255),b
  1875  00065A  0E00               	movlw	0
  1876  00065C  6F9A               	movwf	Usart_CL@i_804& (0+255),b
  1877  00065E                     l3389:
  1878                           
  1879                           ; BSR set to: 0
  1880  00065E  0100               	movlb	0	; () banked
  1881  000660  BF9B               	btfsc	(Usart_CL@i_804+1)& (0+255),7,b
  1882  000662  D008               	goto	l3393
  1883  000664  0100               	movlb	0	; () banked
  1884  000666  519B               	movf	(Usart_CL@i_804+1)& (0+255),w,b
  1885  000668  E11B               	bnz	l3399
  1886  00066A  0E06               	movlw	6
  1887  00066C  0100               	movlb	0	; () banked
  1888  00066E  5D9A               	subwf	Usart_CL@i_804& (0+255),w,b
  1889  000670  B0D8               	btfsc	status,0,c
  1890  000672  D016               	goto	l3399
  1891  000674                     l3393:
  1892                           
  1893                           ; BSR set to: 0
  1894  000674  0E80               	movlw	low _RX
  1895  000676  0100               	movlb	0	; () banked
  1896  000678  259A               	addwf	Usart_CL@i_804& (0+255),w,b
  1897  00067A  6ED9               	movwf	fsr2l,c
  1898  00067C  0E00               	movlw	high _RX
  1899  00067E  0100               	movlb	0	; () banked
  1900  000680  219B               	addwfc	(Usart_CL@i_804+1)& (0+255),w,b
  1901  000682  6EDA               	movwf	fsr2h,c
  1902  000684  0E88               	movlw	low _McStart_PARM
  1903  000686  0100               	movlb	0	; () banked
  1904  000688  259A               	addwf	Usart_CL@i_804& (0+255),w,b
  1905  00068A  6EE1               	movwf	fsr1l,c
  1906  00068C  0E00               	movlw	high _McStart_PARM
  1907  00068E  0100               	movlb	0	; () banked
  1908  000690  219B               	addwfc	(Usart_CL@i_804+1)& (0+255),w,b
  1909  000692  6EE2               	movwf	fsr1h,c
  1910  000694  CFDF FFE7          	movff	indf2,indf1
  1911                           
  1912                           ; BSR set to: 0
  1913  000698  0100               	movlb	0	; () banked
  1914  00069A  4B9A               	infsnz	Usart_CL@i_804& (0+255),f,b
  1915  00069C  2B9B               	incf	(Usart_CL@i_804+1)& (0+255),f,b
  1916  00069E  D7DF               	goto	l3389
  1917  0006A0                     l3399:
  1918                           
  1919                           ; BSR set to: 0
  1920                           ;USART1.c: 72: McStart_PARM_CL();
  1921  0006A0  EC58  F007         	call	_McStart_PARM_CL	;wreg free
  1922                           
  1923                           ;USART1.c: 73: MC_EVENT_Trigge();
  1924  0006A4  EC99  F003         	call	_MC_EVENT_Trigge	;wreg free
  1925                           
  1926                           ;USART1.c: 75: break;
  1927  0006A8  0012               	return	
  1928  0006AA                     l3403:
  1929                           
  1930                           ;USART1.c: 80: for(int i=0; i<5;i++) RX_IO_PARM[i] = RX[i];
  1931  0006AA  0E00               	movlw	0
  1932  0006AC  0100               	movlb	0	; () banked
  1933  0006AE  6F9D               	movwf	(Usart_CL@i_805+1)& (0+255),b
  1934  0006B0  0E00               	movlw	0
  1935  0006B2  6F9C               	movwf	Usart_CL@i_805& (0+255),b
  1936  0006B4                     l3405:
  1937                           
  1938                           ; BSR set to: 0
  1939  0006B4  0100               	movlb	0	; () banked
  1940  0006B6  BF9D               	btfsc	(Usart_CL@i_805+1)& (0+255),7,b
  1941  0006B8  D008               	goto	l3409
  1942  0006BA  0100               	movlb	0	; () banked
  1943  0006BC  519D               	movf	(Usart_CL@i_805+1)& (0+255),w,b
  1944  0006BE  E11B               	bnz	l3415
  1945  0006C0  0E05               	movlw	5
  1946  0006C2  0100               	movlb	0	; () banked
  1947  0006C4  5D9C               	subwf	Usart_CL@i_805& (0+255),w,b
  1948  0006C6  B0D8               	btfsc	status,0,c
  1949  0006C8  D016               	goto	l3415
  1950  0006CA                     l3409:
  1951                           
  1952                           ; BSR set to: 0
  1953  0006CA  0E80               	movlw	low _RX
  1954  0006CC  0100               	movlb	0	; () banked
  1955  0006CE  259C               	addwf	Usart_CL@i_805& (0+255),w,b
  1956  0006D0  6ED9               	movwf	fsr2l,c
  1957  0006D2  0E00               	movlw	high _RX
  1958  0006D4  0100               	movlb	0	; () banked
  1959  0006D6  219D               	addwfc	(Usart_CL@i_805+1)& (0+255),w,b
  1960  0006D8  6EDA               	movwf	fsr2h,c
  1961  0006DA  0E23               	movlw	low _RX_IO_PARM
  1962  0006DC  0100               	movlb	0	; () banked
  1963  0006DE  259C               	addwf	Usart_CL@i_805& (0+255),w,b
  1964  0006E0  6EE1               	movwf	fsr1l,c
  1965  0006E2  0E00               	movlw	high _RX_IO_PARM
  1966  0006E4  0100               	movlb	0	; () banked
  1967  0006E6  219D               	addwfc	(Usart_CL@i_805+1)& (0+255),w,b
  1968  0006E8  6EE2               	movwf	fsr1h,c
  1969  0006EA  CFDF FFE7          	movff	indf2,indf1
  1970                           
  1971                           ; BSR set to: 0
  1972  0006EE  0100               	movlb	0	; () banked
  1973  0006F0  4B9C               	infsnz	Usart_CL@i_805& (0+255),f,b
  1974  0006F2  2B9D               	incf	(Usart_CL@i_805+1)& (0+255),f,b
  1975  0006F4  D7DF               	goto	l3405
  1976  0006F6                     l3415:
  1977                           
  1978                           ; BSR set to: 0
  1979                           ;USART1.c: 81: RX_IOKZ_PARM();
  1980  0006F6  EC66  F004         	call	_RX_IOKZ_PARM	;wreg free
  1981                           
  1982                           ;USART1.c: 83: break;
  1983  0006FA  0012               	return	
  1984  0006FC                     l3417:
  1985                           
  1986                           ;USART1.c: 86: printf("Rx FAIL,Command format error!\r\n");
  1987  0006FC  0EDB               	movlw	low STR_1
  1988  0006FE  6E4E               	movwf	printf@f,c
  1989  000700  0EFC               	movlw	high STR_1
  1990  000702  6E4F               	movwf	printf@f+1,c
  1991  000704  ECCA  F006         	call	_printf	;wreg free
  1992                           
  1993                           ;USART1.c: 90: }
  1994                           
  1995                           ;USART1.c: 87: break;
  1996  000708  0012               	return	
  1997  00070A                     l3421:
  1998  00070A  500D               	movf	_Current_RX,w,c
  1999                           
  2000                           ; Switch size 1, requested type "space"
  2001                           ; Number of cases is 6, Range of values is 1 to 49
  2002                           ; switch strategies available:
  2003                           ; Name         Instructions Cycles
  2004                           ; simple_byte           19    10 (average)
  2005                           ;	Chosen strategy is simple_byte
  2006  00070C  0A01               	xorlw	1	; case 1
  2007  00070E  B4D8               	btfsc	status,2,c
  2008  000710  D6FD               	goto	l3331
  2009  000712  0A03               	xorlw	3	; case 2
  2010  000714  B4D8               	btfsc	status,2,c
  2011  000716  D723               	goto	l3345
  2012  000718  0A01               	xorlw	1	; case 3
  2013  00071A  B4D8               	btfsc	status,2,c
  2014  00071C  D749               	goto	l3359
  2015  00071E  0A07               	xorlw	7	; case 4
  2016  000720  B4D8               	btfsc	status,2,c
  2017  000722  D76F               	goto	l3373
  2018  000724  0A15               	xorlw	21	; case 17
  2019  000726  B4D8               	btfsc	status,2,c
  2020  000728  D795               	goto	l3387
  2021  00072A  0A20               	xorlw	32	; case 49
  2022  00072C  B4D8               	btfsc	status,2,c
  2023  00072E  D7BD               	goto	l3403
  2024  000730  D7E5               	goto	l3417
  2025  000732                     __end_of_Usart_CL:
  2026                           	opt stack 0
  2027                           tblptru	equ	0xFF8
  2028                           tblptrh	equ	0xFF7
  2029                           tblptrl	equ	0xFF6
  2030                           tablat	equ	0xFF5
  2031                           postinc0	equ	0xFEE
  2032                           wreg	equ	0xFE8
  2033                           indf1	equ	0xFE7
  2034                           postdec1	equ	0xFE5
  2035                           fsr1h	equ	0xFE2
  2036                           fsr1l	equ	0xFE1
  2037                           indf2	equ	0xFDF
  2038                           fsr2h	equ	0xFDA
  2039                           fsr2l	equ	0xFD9
  2040                           status	equ	0xFD8
  2041                           
  2042 ;; *************** function _RX_IOKZ_PARM *****************
  2043 ;; Defined at:
  2044 ;;		line 93 in file "PARM_CL.c"
  2045 ;; Parameters:    Size  Location     Type
  2046 ;;		None
  2047 ;; Auto vars:     Size  Location     Type
  2048 ;;  RC_PB_BIT       1   26[COMRAM] unsigned char 
  2049 ;;  MC_Occupy_Ch    1   25[COMRAM] unsigned char 
  2050 ;; Return value:  Size  Location     Type
  2051 ;;                  1    wreg      void 
  2052 ;; Registers used:
  2053 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2054 ;; Tracked objects:
  2055 ;;		On entry : 0/0
  2056 ;;		On exit  : 0/0
  2057 ;;		Unchanged: 0/0
  2058 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  2059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2060 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2062 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2063 ;;Total ram usage:        2 bytes
  2064 ;; Hardware stack levels used:    1
  2065 ;; Hardware stack levels required when called:    6
  2066 ;; This function calls:
  2067 ;;		_IOKZ_Filter
  2068 ;;		_printf
  2069 ;; This function is called by:
  2070 ;;		_Usart_CL
  2071 ;; This function uses a non-reentrant model
  2072 ;;
  2073                           
  2074                           	psect	text3
  2075  0008CC                     __ptext3:
  2076                           	opt stack 0
  2077  0008CC                     _RX_IOKZ_PARM:
  2078                           	opt stack 23
  2079                           
  2080                           ;PARM_CL.c: 97: unsigned char MC_Occupy_Channel,RC_PB_BIT;
  2081                           ;PARM_CL.c: 98: MC_Occupy_Channel=MC_Start_BZ & 0x0F;
  2082                           
  2083                           ;incstack = 0
  2084  0008CC  5021               	movf	33,w,c	;volatile
  2085  0008CE  0B0F               	andlw	15
  2086  0008D0  6E58               	movwf	RX_IOKZ_PARM@MC_Occupy_Channel,c
  2087                           
  2088                           ;PARM_CL.c: 100: switch (MC_Occupy_Channel)
  2089  0008D2  D035               	goto	l3321
  2090  0008D4                     l3293:
  2091                           
  2092                           ;PARM_CL.c: 103: RC_PB_BIT=0;
  2093  0008D4  0E00               	movlw	0
  2094  0008D6  D00E               	goto	L2
  2095  0008D8                     l993:
  2096                           
  2097                           ;PARM_CL.c: 107: RC_PB_BIT=MC1_Channel;
  2098  0008D8  C05D  F059         	movff	_MC1_Channel,RX_IOKZ_PARM@RC_PB_BIT
  2099                           
  2100                           ;PARM_CL.c: 110: break;
  2101  0008DC  D062               	goto	l3323
  2102  0008DE                     l994:
  2103                           
  2104                           ;PARM_CL.c: 113: RC_PB_BIT=MC2_Channel;
  2105  0008DE  C05C  F059         	movff	_MC2_Channel,RX_IOKZ_PARM@RC_PB_BIT
  2106                           
  2107                           ;PARM_CL.c: 115: break;
  2108  0008E2  D05F               	goto	l3323
  2109  0008E4                     l3295:
  2110                           
  2111                           ;PARM_CL.c: 118: RC_PB_BIT=MC1_Channel+MC2_Channel;
  2112  0008E4  505D               	movf	_MC1_Channel,w,c
  2113  0008E6  245C               	addwf	_MC2_Channel,w,c
  2114  0008E8  D005               	goto	L2
  2115  0008EA                     l996:
  2116                           
  2117                           ;PARM_CL.c: 123: RC_PB_BIT=MC3_Channel;
  2118  0008EA  C05B  F059         	movff	_MC3_Channel,RX_IOKZ_PARM@RC_PB_BIT
  2119                           
  2120                           ;PARM_CL.c: 125: break;
  2121  0008EE  D059               	goto	l3323
  2122  0008F0                     l3297:
  2123                           
  2124                           ;PARM_CL.c: 127: RC_PB_BIT=MC1_Channel+MC3_Channel;
  2125  0008F0  505D               	movf	_MC1_Channel,w,c
  2126  0008F2  D006               	goto	L4
  2127  0008F4                     L2:
  2128  0008F4  6E59               	movwf	RX_IOKZ_PARM@RC_PB_BIT,c
  2129                           
  2130                           ;PARM_CL.c: 129: break;
  2131  0008F6  D055               	goto	l3323
  2132  0008F8                     l3299:
  2133                           
  2134                           ;PARM_CL.c: 132: RC_PB_BIT=MC2_Channel+MC3_Channel;
  2135  0008F8  505C               	movf	_MC2_Channel,w,c
  2136  0008FA  D002               	goto	L4
  2137  0008FC                     l3301:
  2138                           
  2139                           ;PARM_CL.c: 138: RC_PB_BIT=MC1_Channel+MC2_Channel+MC3_Channel;
  2140  0008FC  505D               	movf	_MC1_Channel,w,c
  2141  0008FE  245C               	addwf	_MC2_Channel,w,c
  2142  000900                     L4:
  2143  000900  245B               	addwf	_MC3_Channel,w,c
  2144  000902  D7F8               	goto	L2
  2145  000904                     l1000:
  2146                           
  2147                           ;PARM_CL.c: 144: RC_PB_BIT=MC4_Channel;
  2148  000904  C05A  F059         	movff	_MC4_Channel,RX_IOKZ_PARM@RC_PB_BIT
  2149                           
  2150                           ;PARM_CL.c: 147: break;
  2151  000908  D04C               	goto	l3323
  2152  00090A                     l3303:
  2153                           
  2154                           ;PARM_CL.c: 149: RC_PB_BIT=MC1_Channel+MC4_Channel;
  2155  00090A  505D               	movf	_MC1_Channel,w,c
  2156  00090C  D009               	goto	L8
  2157  00090E                     l3305:
  2158                           
  2159                           ;PARM_CL.c: 155: RC_PB_BIT=MC2_Channel+MC4_Channel;
  2160  00090E  505C               	movf	_MC2_Channel,w,c
  2161  000910  D007               	goto	L8
  2162  000912                     l3307:
  2163                           
  2164                           ;PARM_CL.c: 161: RC_PB_BIT=MC1_Channel+MC2_Channel+MC4_Channel;
  2165  000912  505D               	movf	_MC1_Channel,w,c
  2166  000914  245C               	addwf	_MC2_Channel,w,c
  2167  000916  D004               	goto	L8
  2168  000918                     l3309:
  2169                           
  2170                           ;PARM_CL.c: 167: RC_PB_BIT=MC3_Channel+MC4_Channel;
  2171  000918  505B               	movf	_MC3_Channel,w,c
  2172  00091A  D002               	goto	L8
  2173  00091C                     l3311:
  2174                           
  2175                           ;PARM_CL.c: 173: RC_PB_BIT=MC1_Channel+MC3_Channel+MC4_Channel;
  2176  00091C  505D               	movf	_MC1_Channel,w,c
  2177  00091E  D006               	goto	L10
  2178  000920                     L8:
  2179  000920  245A               	addwf	_MC4_Channel,w,c
  2180  000922  D7E8               	goto	L2
  2181  000924                     l3313:
  2182                           
  2183                           ;PARM_CL.c: 179: RC_PB_BIT=MC2_Channel+MC3_Channel+MC4_Channel;
  2184  000924  505C               	movf	_MC2_Channel,w,c
  2185  000926  D002               	goto	L10
  2186  000928                     l3315:
  2187                           
  2188                           ;PARM_CL.c: 185: RC_PB_BIT=MC1_Channel+MC2_Channel+MC3_Channel+MC4_Channel;
  2189  000928  505D               	movf	_MC1_Channel,w,c
  2190  00092A  245C               	addwf	_MC2_Channel,w,c
  2191  00092C                     L10:
  2192  00092C  245B               	addwf	_MC3_Channel,w,c
  2193  00092E  D7F8               	goto	L8
  2194  000930                     l3317:
  2195                           
  2196                           ;PARM_CL.c: 191: printf("Í¨µÀ1Õ¼ÓÃIO·¢Éú´íÎó!\r\n");
  2197  000930  0EFB               	movlw	low STR_26
  2198  000932  6E4E               	movwf	printf@f,c
  2199  000934  0EFC               	movlw	high STR_26
  2200  000936  6E4F               	movwf	printf@f+1,c
  2201  000938  ECCA  F006         	call	_printf	;wreg free
  2202                           
  2203                           ;PARM_CL.c: 196: }
  2204                           
  2205                           ;PARM_CL.c: 192: break;
  2206  00093C  D032               	goto	l3323
  2207  00093E                     l3321:
  2208  00093E  5058               	movf	RX_IOKZ_PARM@MC_Occupy_Channel,w,c
  2209                           
  2210                           ; Switch size 1, requested type "space"
  2211                           ; Number of cases is 16, Range of values is 0 to 15
  2212                           ; switch strategies available:
  2213                           ; Name         Instructions Cycles
  2214                           ; simple_byte           49    25 (average)
  2215                           ;	Chosen strategy is simple_byte
  2216  000940  0A00               	xorlw	0	; case 0
  2217  000942  B4D8               	btfsc	status,2,c
  2218  000944  D7C7               	goto	l3293
  2219  000946  0A01               	xorlw	1	; case 1
  2220  000948  B4D8               	btfsc	status,2,c
  2221  00094A  D7C6               	goto	l993
  2222  00094C  0A03               	xorlw	3	; case 2
  2223  00094E  B4D8               	btfsc	status,2,c
  2224  000950  D7C6               	goto	l994
  2225  000952  0A01               	xorlw	1	; case 3
  2226  000954  B4D8               	btfsc	status,2,c
  2227  000956  D7C6               	goto	l3295
  2228  000958  0A07               	xorlw	7	; case 4
  2229  00095A  B4D8               	btfsc	status,2,c
  2230  00095C  D7C6               	goto	l996
  2231  00095E  0A01               	xorlw	1	; case 5
  2232  000960  B4D8               	btfsc	status,2,c
  2233  000962  D7C6               	goto	l3297
  2234  000964  0A03               	xorlw	3	; case 6
  2235  000966  B4D8               	btfsc	status,2,c
  2236  000968  D7C7               	goto	l3299
  2237  00096A  0A01               	xorlw	1	; case 7
  2238  00096C  B4D8               	btfsc	status,2,c
  2239  00096E  D7C6               	goto	l3301
  2240  000970  0A0F               	xorlw	15	; case 8
  2241  000972  B4D8               	btfsc	status,2,c
  2242  000974  D7C7               	goto	l1000
  2243  000976  0A01               	xorlw	1	; case 9
  2244  000978  B4D8               	btfsc	status,2,c
  2245  00097A  D7C7               	goto	l3303
  2246  00097C  0A03               	xorlw	3	; case 10
  2247  00097E  B4D8               	btfsc	status,2,c
  2248  000980  D7C6               	goto	l3305
  2249  000982  0A01               	xorlw	1	; case 11
  2250  000984  B4D8               	btfsc	status,2,c
  2251  000986  D7C5               	goto	l3307
  2252  000988  0A07               	xorlw	7	; case 12
  2253  00098A  B4D8               	btfsc	status,2,c
  2254  00098C  D7C5               	goto	l3309
  2255  00098E  0A01               	xorlw	1	; case 13
  2256  000990  B4D8               	btfsc	status,2,c
  2257  000992  D7C4               	goto	l3311
  2258  000994  0A03               	xorlw	3	; case 14
  2259  000996  B4D8               	btfsc	status,2,c
  2260  000998  D7C5               	goto	l3313
  2261  00099A  0A01               	xorlw	1	; case 15
  2262  00099C  B4D8               	btfsc	status,2,c
  2263  00099E  D7C4               	goto	l3315
  2264  0009A0  D7C7               	goto	l3317
  2265  0009A2                     l3323:
  2266                           
  2267                           ;PARM_CL.c: 198: IOKZ_Filter(0X0C,RC_PB_BIT,RX_IO_PARM[2]);
  2268  0009A2  C059  F053         	movff	RX_IOKZ_PARM@RC_PB_BIT,IOKZ_Filter@PB_BIT
  2269  0009A6  C025  F054         	movff	_RX_IO_PARM+2,IOKZ_Filter@PORTX_KZ
  2270  0009AA  0E0C               	movlw	12
  2271  0009AC  EC45  F000         	call	_IOKZ_Filter
  2272                           
  2273                           ;PARM_CL.c: 199: LATD=RX_IO_PARM[3];
  2274  0009B0  C026  FF8C         	movff	_RX_IO_PARM+3,3980	;volatile
  2275                           
  2276                           ;PARM_CL.c: 200: LATF=RX_IO_PARM[4];
  2277  0009B4  C027  FF8E         	movff	_RX_IO_PARM+4,3982	;volatile
  2278  0009B8  0012               	return		;funcret
  2279  0009BA                     __end_of_RX_IOKZ_PARM:
  2280                           	opt stack 0
  2281                           tblptru	equ	0xFF8
  2282                           tblptrh	equ	0xFF7
  2283                           tblptrl	equ	0xFF6
  2284                           tablat	equ	0xFF5
  2285                           postinc0	equ	0xFEE
  2286                           wreg	equ	0xFE8
  2287                           indf1	equ	0xFE7
  2288                           postdec1	equ	0xFE5
  2289                           fsr1h	equ	0xFE2
  2290                           fsr1l	equ	0xFE1
  2291                           indf2	equ	0xFDF
  2292                           fsr2h	equ	0xFDA
  2293                           fsr2l	equ	0xFD9
  2294                           status	equ	0xFD8
  2295                           
  2296 ;; *************** function _IOKZ_Filter *****************
  2297 ;; Defined at:
  2298 ;;		line 14 in file "PORT_Filter_OUT.c"
  2299 ;; Parameters:    Size  Location     Type
  2300 ;;  RX              1    wreg     unsigned char 
  2301 ;;  PB_BIT          1   20[COMRAM] unsigned char 
  2302 ;;  PORTX_KZ        1   21[COMRAM] unsigned char 
  2303 ;; Auto vars:     Size  Location     Type
  2304 ;;  RX              1   24[COMRAM] unsigned char 
  2305 ;; Return value:  Size  Location     Type
  2306 ;;                  1    wreg      void 
  2307 ;; Registers used:
  2308 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2309 ;; Tracked objects:
  2310 ;;		On entry : 0/0
  2311 ;;		On exit  : 0/0
  2312 ;;		Unchanged: 0/0
  2313 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  2314 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2315 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2316 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2317 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2318 ;;Total ram usage:        5 bytes
  2319 ;; Hardware stack levels used:    1
  2320 ;; Hardware stack levels required when called:    5
  2321 ;; This function calls:
  2322 ;;		_printf
  2323 ;; This function is called by:
  2324 ;;		_RX_IOKZ_PARM
  2325 ;; This function uses a non-reentrant model
  2326 ;;
  2327                           
  2328                           	psect	text4
  2329  00008A                     __ptext4:
  2330                           	opt stack 0
  2331  00008A                     _IOKZ_Filter:
  2332                           	opt stack 23
  2333                           
  2334                           ;incstack = 0
  2335                           ;IOKZ_Filter@RX stored from wreg
  2336  00008A  6E57               	movwf	IOKZ_Filter@RX,c
  2337                           
  2338                           ;PORT_Filter_OUT.c: 17: if(RX==0X0C)
  2339  00008C  0E0C               	movlw	12
  2340  00008E  1857               	xorwf	IOKZ_Filter@RX,w,c
  2341  000090  A4D8               	btfss	status,2,c
  2342  000092  D095               	goto	l1170
  2343                           
  2344                           ;PORT_Filter_OUT.c: 18: {
  2345                           ;PORT_Filter_OUT.c: 19: if(( PB_BIT & 0x01)==!1) LATC0= PORTX_KZ & 0x01;
  2346  000094  B053               	btfsc	IOKZ_Filter@PB_BIT,0,c
  2347  000096  D005               	goto	l3049
  2348  000098  A054               	btfss	IOKZ_Filter@PORTX_KZ,0,c
  2349  00009A  D002               	goto	u3670
  2350  00009C  808B               	bsf	3979,0,c	;volatile
  2351  00009E  D001               	goto	l3049
  2352  0000A0                     u3670:
  2353  0000A0  908B               	bcf	3979,0,c	;volatile
  2354  0000A2                     l3049:
  2355                           
  2356                           ;PORT_Filter_OUT.c: 21: if( (PB_BIT>>1 & 0x01)==!1) LATC1= PORTX_KZ>>1 & 0x01;
  2357  0000A2  C053  F055         	movff	IOKZ_Filter@PB_BIT,??_IOKZ_Filter
  2358  0000A6  90D8               	bcf	status,0,c
  2359  0000A8  3255               	rrcf	??_IOKZ_Filter,f,c
  2360  0000AA  B055               	btfsc	??_IOKZ_Filter,0,c
  2361  0000AC  D00A               	goto	l3053
  2362  0000AE  C054  F055         	movff	IOKZ_Filter@PORTX_KZ,??_IOKZ_Filter
  2363  0000B2  90D8               	bcf	status,0,c
  2364  0000B4  3255               	rrcf	??_IOKZ_Filter,f,c
  2365  0000B6  3055               	rrcf	??_IOKZ_Filter,w,c
  2366  0000B8  A0D8               	btfss	status,0,c
  2367  0000BA  D002               	goto	u3700
  2368  0000BC  828B               	bsf	3979,1,c	;volatile
  2369  0000BE  D001               	goto	l3053
  2370  0000C0                     u3700:
  2371  0000C0  928B               	bcf	3979,1,c	;volatile
  2372  0000C2                     l3053:
  2373                           
  2374                           ;PORT_Filter_OUT.c: 23: if( (PB_BIT>>2 & 0x01)==!1) LATC2= PORTX_KZ>>2 & 0x01;
  2375  0000C2  C053  F055         	movff	IOKZ_Filter@PB_BIT,??_IOKZ_Filter
  2376  0000C6  90D8               	bcf	status,0,c
  2377  0000C8  3255               	rrcf	??_IOKZ_Filter,f,c
  2378  0000CA  90D8               	bcf	status,0,c
  2379  0000CC  3255               	rrcf	??_IOKZ_Filter,f,c
  2380  0000CE  B055               	btfsc	??_IOKZ_Filter,0,c
  2381  0000D0  D00C               	goto	l3057
  2382  0000D2  C054  F055         	movff	IOKZ_Filter@PORTX_KZ,??_IOKZ_Filter
  2383  0000D6  90D8               	bcf	status,0,c
  2384  0000D8  3255               	rrcf	??_IOKZ_Filter,f,c
  2385  0000DA  90D8               	bcf	status,0,c
  2386  0000DC  3255               	rrcf	??_IOKZ_Filter,f,c
  2387  0000DE  3055               	rrcf	??_IOKZ_Filter,w,c
  2388  0000E0  A0D8               	btfss	status,0,c
  2389  0000E2  D002               	goto	u3730
  2390  0000E4  848B               	bsf	3979,2,c	;volatile
  2391  0000E6  D001               	goto	l3057
  2392  0000E8                     u3730:
  2393  0000E8  948B               	bcf	3979,2,c	;volatile
  2394  0000EA                     l3057:
  2395                           
  2396                           ;PORT_Filter_OUT.c: 25: if( (PB_BIT>>3 & 0x01)==!1) LATC3= PORTX_KZ>>3 & 0x01;
  2397  0000EA  C053  F055         	movff	IOKZ_Filter@PB_BIT,??_IOKZ_Filter
  2398  0000EE  90D8               	bcf	status,0,c
  2399  0000F0  3255               	rrcf	??_IOKZ_Filter,f,c
  2400  0000F2  90D8               	bcf	status,0,c
  2401  0000F4  3255               	rrcf	??_IOKZ_Filter,f,c
  2402  0000F6  90D8               	bcf	status,0,c
  2403  0000F8  3255               	rrcf	??_IOKZ_Filter,f,c
  2404  0000FA  B055               	btfsc	??_IOKZ_Filter,0,c
  2405  0000FC  D00E               	goto	l1174
  2406  0000FE  C054  F055         	movff	IOKZ_Filter@PORTX_KZ,??_IOKZ_Filter
  2407  000102  90D8               	bcf	status,0,c
  2408  000104  3255               	rrcf	??_IOKZ_Filter,f,c
  2409  000106  90D8               	bcf	status,0,c
  2410  000108  3255               	rrcf	??_IOKZ_Filter,f,c
  2411  00010A  90D8               	bcf	status,0,c
  2412  00010C  3255               	rrcf	??_IOKZ_Filter,f,c
  2413  00010E  3055               	rrcf	??_IOKZ_Filter,w,c
  2414  000110  A0D8               	btfss	status,0,c
  2415  000112  D002               	goto	u3760
  2416  000114  868B               	bsf	3979,3,c	;volatile
  2417  000116  D001               	goto	l1174
  2418  000118                     u3760:
  2419  000118  968B               	bcf	3979,3,c	;volatile
  2420  00011A                     l1174:
  2421                           
  2422                           ;PORT_Filter_OUT.c: 27: if( (PB_BIT>>4 & 0x01)==!1) LATC4= PORTX_KZ>>4 & 0x01;
  2423  00011A  C053  F055         	movff	IOKZ_Filter@PB_BIT,??_IOKZ_Filter
  2424  00011E  3A55               	swapf	??_IOKZ_Filter,f,c
  2425  000120  0E0F               	movlw	15
  2426  000122  1655               	andwf	??_IOKZ_Filter,f,c
  2427  000124  B055               	btfsc	??_IOKZ_Filter,0,c
  2428  000126  D00B               	goto	l1175
  2429  000128  C054  F055         	movff	IOKZ_Filter@PORTX_KZ,??_IOKZ_Filter
  2430  00012C  3A55               	swapf	??_IOKZ_Filter,f,c
  2431  00012E  0E0F               	movlw	15
  2432  000130  1655               	andwf	??_IOKZ_Filter,f,c
  2433  000132  3055               	rrcf	??_IOKZ_Filter,w,c
  2434  000134  A0D8               	btfss	status,0,c
  2435  000136  D002               	goto	u3790
  2436  000138  888B               	bsf	3979,4,c	;volatile
  2437  00013A  D001               	goto	l1175
  2438  00013C                     u3790:
  2439  00013C  988B               	bcf	3979,4,c	;volatile
  2440  00013E                     l1175:
  2441                           
  2442                           ;PORT_Filter_OUT.c: 29: if( (PB_BIT>>5 & 0x01)==!1) LATC5= PORTX_KZ>>5 & 0x01;
  2443  00013E  C053  F055         	movff	IOKZ_Filter@PB_BIT,??_IOKZ_Filter
  2444  000142  0E05               	movlw	5
  2445  000144  6E56               	movwf	(??_IOKZ_Filter+1)& (0+255),c
  2446  000146                     u3815:
  2447  000146  90D8               	bcf	status,0,c
  2448  000148  3255               	rrcf	??_IOKZ_Filter,f,c
  2449  00014A  2E56               	decfsz	(??_IOKZ_Filter+1)& (0+255),f,c
  2450  00014C  D7FC               	goto	u3815
  2451  00014E  B055               	btfsc	??_IOKZ_Filter,0,c
  2452  000150  D00E               	goto	l1176
  2453  000152  C054  F055         	movff	IOKZ_Filter@PORTX_KZ,??_IOKZ_Filter
  2454  000156  0E05               	movlw	5
  2455  000158  6E56               	movwf	(??_IOKZ_Filter+1)& (0+255),c
  2456  00015A                     u3835:
  2457  00015A  90D8               	bcf	status,0,c
  2458  00015C  3255               	rrcf	??_IOKZ_Filter,f,c
  2459  00015E  2E56               	decfsz	(??_IOKZ_Filter+1)& (0+255),f,c
  2460  000160  D7FC               	goto	u3835
  2461  000162  3055               	rrcf	??_IOKZ_Filter,w,c
  2462  000164  A0D8               	btfss	status,0,c
  2463  000166  D002               	goto	u3840
  2464  000168  8A8B               	bsf	3979,5,c	;volatile
  2465  00016A  D001               	goto	l1176
  2466  00016C                     u3840:
  2467  00016C  9A8B               	bcf	3979,5,c	;volatile
  2468  00016E                     l1176:
  2469                           
  2470                           ;PORT_Filter_OUT.c: 31: if( (PB_BIT>>6 & 0x01)==!1) LATC6= PORTX_KZ>>6 & 0x01;
  2471  00016E  C053  F055         	movff	IOKZ_Filter@PB_BIT,??_IOKZ_Filter
  2472  000172  0E06               	movlw	6
  2473  000174  6E56               	movwf	(??_IOKZ_Filter+1)& (0+255),c
  2474  000176                     u3865:
  2475  000176  90D8               	bcf	status,0,c
  2476  000178  3255               	rrcf	??_IOKZ_Filter,f,c
  2477  00017A  2E56               	decfsz	(??_IOKZ_Filter+1)& (0+255),f,c
  2478  00017C  D7FC               	goto	u3865
  2479  00017E  B055               	btfsc	??_IOKZ_Filter,0,c
  2480  000180  D00E               	goto	l3067
  2481  000182  C054  F055         	movff	IOKZ_Filter@PORTX_KZ,??_IOKZ_Filter
  2482  000186  0E06               	movlw	6
  2483  000188  6E56               	movwf	(??_IOKZ_Filter+1)& (0+255),c
  2484  00018A                     u3885:
  2485  00018A  90D8               	bcf	status,0,c
  2486  00018C  3255               	rrcf	??_IOKZ_Filter,f,c
  2487  00018E  2E56               	decfsz	(??_IOKZ_Filter+1)& (0+255),f,c
  2488  000190  D7FC               	goto	u3885
  2489  000192  3055               	rrcf	??_IOKZ_Filter,w,c
  2490  000194  A0D8               	btfss	status,0,c
  2491  000196  D002               	goto	u3890
  2492  000198  8C8B               	bsf	3979,6,c	;volatile
  2493  00019A  D001               	goto	l3067
  2494  00019C                     u3890:
  2495  00019C  9C8B               	bcf	3979,6,c	;volatile
  2496  00019E                     l3067:
  2497                           
  2498                           ;PORT_Filter_OUT.c: 33: if( (PB_BIT>>7 & 0x01)==!1) LATC7= PORTX_KZ>>7 & 0x01;
  2499  00019E  6A55               	clrf	??_IOKZ_Filter& (0+255),c
  2500  0001A0  AE53               	btfss	IOKZ_Filter@PB_BIT,7,c
  2501  0001A2  D001               	bra	u3915
  2502  0001A4  2A55               	incf	??_IOKZ_Filter& (0+255),f,c
  2503  0001A6                     u3915:
  2504  0001A6  B055               	btfsc	??_IOKZ_Filter,0,c
  2505  0001A8  D00A               	goto	l1170
  2506  0001AA  6A55               	clrf	??_IOKZ_Filter& (0+255),c
  2507  0001AC  AE54               	btfss	IOKZ_Filter@PORTX_KZ,7,c
  2508  0001AE  D001               	bra	u3935
  2509  0001B0  2A55               	incf	??_IOKZ_Filter& (0+255),f,c
  2510  0001B2                     u3935:
  2511  0001B2  3055               	rrcf	??_IOKZ_Filter,w,c
  2512  0001B4  A0D8               	btfss	status,0,c
  2513  0001B6  D002               	goto	u3940
  2514  0001B8  8E8B               	bsf	3979,7,c	;volatile
  2515  0001BA  D001               	goto	l1170
  2516  0001BC                     u3940:
  2517  0001BC  9E8B               	bcf	3979,7,c	;volatile
  2518  0001BE                     l1170:
  2519                           
  2520                           ;PORT_Filter_OUT.c: 37: }
  2521                           ;PORT_Filter_OUT.c: 39: if(RX==0X0D)
  2522  0001BE  0E0D               	movlw	13
  2523  0001C0  1857               	xorwf	IOKZ_Filter@RX,w,c
  2524  0001C2  A4D8               	btfss	status,2,c
  2525  0001C4  D0CD               	goto	l3119
  2526                           
  2527                           ;PORT_Filter_OUT.c: 40: {
  2528                           ;PORT_Filter_OUT.c: 41: if(( PB_BIT & 0x01)==!1) LATD0= PORTX_KZ & 0x01;
  2529  0001C6  B053               	btfsc	IOKZ_Filter@PB_BIT,0,c
  2530  0001C8  D006               	goto	l3075
  2531  0001CA  A054               	btfss	IOKZ_Filter@PORTX_KZ,0,c
  2532  0001CC  D002               	goto	u3980
  2533  0001CE  808C               	bsf	3980,0,c	;volatile
  2534  0001D0  D008               	goto	l3077
  2535  0001D2                     u3980:
  2536  0001D2  908C               	bcf	3980,0,c	;volatile
  2537  0001D4  D006               	goto	l3077
  2538  0001D6                     l3075:
  2539                           
  2540                           ;PORT_Filter_OUT.c: 42: else printf("RD0±»MC1Õ¼ÓÃÖÐ\r\n");
  2541  0001D6  0EB2               	movlw	low STR_27
  2542  0001D8  6E4E               	movwf	printf@f,c
  2543  0001DA  0EFE               	movlw	high STR_27
  2544  0001DC  6E4F               	movwf	printf@f+1,c
  2545  0001DE  ECCA  F006         	call	_printf	;wreg free
  2546  0001E2                     l3077:
  2547                           
  2548                           ;PORT_Filter_OUT.c: 43: if( (PB_BIT>>1 & 0x01)==!1) LATD1= PORTX_KZ>>1 & 0x01;
  2549  0001E2  C053  F055         	movff	IOKZ_Filter@PB_BIT,??_IOKZ_Filter
  2550  0001E6  90D8               	bcf	status,0,c
  2551  0001E8  3255               	rrcf	??_IOKZ_Filter,f,c
  2552  0001EA  B055               	btfsc	??_IOKZ_Filter,0,c
  2553  0001EC  D00B               	goto	l3081
  2554  0001EE  C054  F055         	movff	IOKZ_Filter@PORTX_KZ,??_IOKZ_Filter
  2555  0001F2  90D8               	bcf	status,0,c
  2556  0001F4  3255               	rrcf	??_IOKZ_Filter,f,c
  2557  0001F6  3055               	rrcf	??_IOKZ_Filter,w,c
  2558  0001F8  A0D8               	btfss	status,0,c
  2559  0001FA  D002               	goto	u4010
  2560  0001FC  828C               	bsf	3980,1,c	;volatile
  2561  0001FE  D008               	goto	l3083
  2562  000200                     u4010:
  2563  000200  928C               	bcf	3980,1,c	;volatile
  2564  000202  D006               	goto	l3083
  2565  000204                     l3081:
  2566                           
  2567                           ;PORT_Filter_OUT.c: 44: else printf("RD1±»MC1Õ¼ÓÃÖÐ\r\n");
  2568  000204  0ED4               	movlw	low STR_28
  2569  000206  6E4E               	movwf	printf@f,c
  2570  000208  0EFE               	movlw	high STR_28
  2571  00020A  6E4F               	movwf	printf@f+1,c
  2572  00020C  ECCA  F006         	call	_printf	;wreg free
  2573  000210                     l3083:
  2574                           
  2575                           ;PORT_Filter_OUT.c: 45: if( (PB_BIT>>2 & 0x01)==!1) LATD2= PORTX_KZ>>2 & 0x01;
  2576  000210  C053  F055         	movff	IOKZ_Filter@PB_BIT,??_IOKZ_Filter
  2577  000214  90D8               	bcf	status,0,c
  2578  000216  3255               	rrcf	??_IOKZ_Filter,f,c
  2579  000218  90D8               	bcf	status,0,c
  2580  00021A  3255               	rrcf	??_IOKZ_Filter,f,c
  2581  00021C  B055               	btfsc	??_IOKZ_Filter,0,c
  2582  00021E  D00D               	goto	l3087
  2583  000220  C054  F055         	movff	IOKZ_Filter@PORTX_KZ,??_IOKZ_Filter
  2584  000224  90D8               	bcf	status,0,c
  2585  000226  3255               	rrcf	??_IOKZ_Filter,f,c
  2586  000228  90D8               	bcf	status,0,c
  2587  00022A  3255               	rrcf	??_IOKZ_Filter,f,c
  2588  00022C  3055               	rrcf	??_IOKZ_Filter,w,c
  2589  00022E  A0D8               	btfss	status,0,c
  2590  000230  D002               	goto	u4040
  2591  000232  848C               	bsf	3980,2,c	;volatile
  2592  000234  D008               	goto	l3089
  2593  000236                     u4040:
  2594  000236  948C               	bcf	3980,2,c	;volatile
  2595  000238  D006               	goto	l3089
  2596  00023A                     l3087:
  2597                           
  2598                           ;PORT_Filter_OUT.c: 46: else printf("RD2±»MC2Õ¼ÓÃÖÐ\r\n");
  2599  00023A  0EF6               	movlw	low STR_29
  2600  00023C  6E4E               	movwf	printf@f,c
  2601  00023E  0EFE               	movlw	high STR_29
  2602  000240  6E4F               	movwf	printf@f+1,c
  2603  000242  ECCA  F006         	call	_printf	;wreg free
  2604  000246                     l3089:
  2605                           
  2606                           ;PORT_Filter_OUT.c: 47: if( (PB_BIT>>3 & 0x01)==!1) LATD3= PORTX_KZ>>3 & 0x01;
  2607  000246  C053  F055         	movff	IOKZ_Filter@PB_BIT,??_IOKZ_Filter
  2608  00024A  90D8               	bcf	status,0,c
  2609  00024C  3255               	rrcf	??_IOKZ_Filter,f,c
  2610  00024E  90D8               	bcf	status,0,c
  2611  000250  3255               	rrcf	??_IOKZ_Filter,f,c
  2612  000252  90D8               	bcf	status,0,c
  2613  000254  3255               	rrcf	??_IOKZ_Filter,f,c
  2614  000256  B055               	btfsc	??_IOKZ_Filter,0,c
  2615  000258  D00F               	goto	l3093
  2616  00025A  C054  F055         	movff	IOKZ_Filter@PORTX_KZ,??_IOKZ_Filter
  2617  00025E  90D8               	bcf	status,0,c
  2618  000260  3255               	rrcf	??_IOKZ_Filter,f,c
  2619  000262  90D8               	bcf	status,0,c
  2620  000264  3255               	rrcf	??_IOKZ_Filter,f,c
  2621  000266  90D8               	bcf	status,0,c
  2622  000268  3255               	rrcf	??_IOKZ_Filter,f,c
  2623  00026A  3055               	rrcf	??_IOKZ_Filter,w,c
  2624  00026C  A0D8               	btfss	status,0,c
  2625  00026E  D002               	goto	u4070
  2626  000270  868C               	bsf	3980,3,c	;volatile
  2627  000272  D008               	goto	l3095
  2628  000274                     u4070:
  2629  000274  968C               	bcf	3980,3,c	;volatile
  2630  000276  D006               	goto	l3095
  2631  000278                     l3093:
  2632                           
  2633                           ;PORT_Filter_OUT.c: 48: else printf("RD3±»MC2Õ¼ÓÃÖÐ\r\n");
  2634  000278  0E18               	movlw	low STR_30
  2635  00027A  6E4E               	movwf	printf@f,c
  2636  00027C  0EFF               	movlw	high STR_30
  2637  00027E  6E4F               	movwf	printf@f+1,c
  2638  000280  ECCA  F006         	call	_printf	;wreg free
  2639  000284                     l3095:
  2640                           
  2641                           ;PORT_Filter_OUT.c: 49: if( (PB_BIT>>4 & 0x01)==!1) LATD4= PORTX_KZ>>4 & 0x01;
  2642  000284  C053  F055         	movff	IOKZ_Filter@PB_BIT,??_IOKZ_Filter
  2643  000288  3A55               	swapf	??_IOKZ_Filter,f,c
  2644  00028A  0E0F               	movlw	15
  2645  00028C  1655               	andwf	??_IOKZ_Filter,f,c
  2646  00028E  B055               	btfsc	??_IOKZ_Filter,0,c
  2647  000290  D00C               	goto	l3099
  2648  000292  C054  F055         	movff	IOKZ_Filter@PORTX_KZ,??_IOKZ_Filter
  2649  000296  3A55               	swapf	??_IOKZ_Filter,f,c
  2650  000298  0E0F               	movlw	15
  2651  00029A  1655               	andwf	??_IOKZ_Filter,f,c
  2652  00029C  3055               	rrcf	??_IOKZ_Filter,w,c
  2653  00029E  A0D8               	btfss	status,0,c
  2654  0002A0  D002               	goto	u4100
  2655  0002A2  888C               	bsf	3980,4,c	;volatile
  2656  0002A4  D008               	goto	l3101
  2657  0002A6                     u4100:
  2658  0002A6  988C               	bcf	3980,4,c	;volatile
  2659  0002A8  D006               	goto	l3101
  2660  0002AA                     l3099:
  2661                           
  2662                           ;PORT_Filter_OUT.c: 50: else printf("RD4±»MC3Õ¼ÓÃÖÐ\r\n");
  2663  0002AA  0E3A               	movlw	low STR_31
  2664  0002AC  6E4E               	movwf	printf@f,c
  2665  0002AE  0EFF               	movlw	high STR_31
  2666  0002B0  6E4F               	movwf	printf@f+1,c
  2667  0002B2  ECCA  F006         	call	_printf	;wreg free
  2668  0002B6                     l3101:
  2669                           
  2670                           ;PORT_Filter_OUT.c: 51: if( (PB_BIT>>5 & 0x01)==!1) LATD5= PORTX_KZ>>5 & 0x01;
  2671  0002B6  C053  F055         	movff	IOKZ_Filter@PB_BIT,??_IOKZ_Filter
  2672  0002BA  0E05               	movlw	5
  2673  0002BC  6E56               	movwf	(??_IOKZ_Filter+1)& (0+255),c
  2674  0002BE                     u4125:
  2675  0002BE  90D8               	bcf	status,0,c
  2676  0002C0  3255               	rrcf	??_IOKZ_Filter,f,c
  2677  0002C2  2E56               	decfsz	(??_IOKZ_Filter+1)& (0+255),f,c
  2678  0002C4  D7FC               	goto	u4125
  2679  0002C6  B055               	btfsc	??_IOKZ_Filter,0,c
  2680  0002C8  D00F               	goto	l3105
  2681  0002CA  C054  F055         	movff	IOKZ_Filter@PORTX_KZ,??_IOKZ_Filter
  2682  0002CE  0E05               	movlw	5
  2683  0002D0  6E56               	movwf	(??_IOKZ_Filter+1)& (0+255),c
  2684  0002D2                     u4145:
  2685  0002D2  90D8               	bcf	status,0,c
  2686  0002D4  3255               	rrcf	??_IOKZ_Filter,f,c
  2687  0002D6  2E56               	decfsz	(??_IOKZ_Filter+1)& (0+255),f,c
  2688  0002D8  D7FC               	goto	u4145
  2689  0002DA  3055               	rrcf	??_IOKZ_Filter,w,c
  2690  0002DC  A0D8               	btfss	status,0,c
  2691  0002DE  D002               	goto	u4150
  2692  0002E0  8A8C               	bsf	3980,5,c	;volatile
  2693  0002E2  D008               	goto	l3107
  2694  0002E4                     u4150:
  2695  0002E4  9A8C               	bcf	3980,5,c	;volatile
  2696  0002E6  D006               	goto	l3107
  2697  0002E8                     l3105:
  2698                           
  2699                           ;PORT_Filter_OUT.c: 52: else printf("RD5±»MC3Õ¼ÓÃÖÐ\r\n");
  2700  0002E8  0E5C               	movlw	low STR_32
  2701  0002EA  6E4E               	movwf	printf@f,c
  2702  0002EC  0EFF               	movlw	high STR_32
  2703  0002EE  6E4F               	movwf	printf@f+1,c
  2704  0002F0  ECCA  F006         	call	_printf	;wreg free
  2705  0002F4                     l3107:
  2706                           
  2707                           ;PORT_Filter_OUT.c: 53: if( (PB_BIT>>6 & 0x01)==!1) LATD6= PORTX_KZ>>6 & 0x01;
  2708  0002F4  C053  F055         	movff	IOKZ_Filter@PB_BIT,??_IOKZ_Filter
  2709  0002F8  0E06               	movlw	6
  2710  0002FA  6E56               	movwf	(??_IOKZ_Filter+1)& (0+255),c
  2711  0002FC                     u4175:
  2712  0002FC  90D8               	bcf	status,0,c
  2713  0002FE  3255               	rrcf	??_IOKZ_Filter,f,c
  2714  000300  2E56               	decfsz	(??_IOKZ_Filter+1)& (0+255),f,c
  2715  000302  D7FC               	goto	u4175
  2716  000304  B055               	btfsc	??_IOKZ_Filter,0,c
  2717  000306  D00F               	goto	l3111
  2718  000308  C054  F055         	movff	IOKZ_Filter@PORTX_KZ,??_IOKZ_Filter
  2719  00030C  0E06               	movlw	6
  2720  00030E  6E56               	movwf	(??_IOKZ_Filter+1)& (0+255),c
  2721  000310                     u4195:
  2722  000310  90D8               	bcf	status,0,c
  2723  000312  3255               	rrcf	??_IOKZ_Filter,f,c
  2724  000314  2E56               	decfsz	(??_IOKZ_Filter+1)& (0+255),f,c
  2725  000316  D7FC               	goto	u4195
  2726  000318  3055               	rrcf	??_IOKZ_Filter,w,c
  2727  00031A  A0D8               	btfss	status,0,c
  2728  00031C  D002               	goto	u4200
  2729  00031E  8C8C               	bsf	3980,6,c	;volatile
  2730  000320  D008               	goto	l3113
  2731  000322                     u4200:
  2732  000322  9C8C               	bcf	3980,6,c	;volatile
  2733  000324  D006               	goto	l3113
  2734  000326                     l3111:
  2735                           
  2736                           ;PORT_Filter_OUT.c: 54: else printf("RD6±»MC4Õ¼ÓÃÖÐ\r\n");
  2737  000326  0E7E               	movlw	low STR_33
  2738  000328  6E4E               	movwf	printf@f,c
  2739  00032A  0EFF               	movlw	high STR_33
  2740  00032C  6E4F               	movwf	printf@f+1,c
  2741  00032E  ECCA  F006         	call	_printf	;wreg free
  2742  000332                     l3113:
  2743                           
  2744                           ;PORT_Filter_OUT.c: 55: if( (PB_BIT>>7 & 0x01)==!1) LATD7= PORTX_KZ>>7 & 0x01;
  2745  000332  6A55               	clrf	??_IOKZ_Filter& (0+255),c
  2746  000334  AE53               	btfss	IOKZ_Filter@PB_BIT,7,c
  2747  000336  D001               	bra	u4225
  2748  000338  2A55               	incf	??_IOKZ_Filter& (0+255),f,c
  2749  00033A                     u4225:
  2750  00033A  B055               	btfsc	??_IOKZ_Filter,0,c
  2751  00033C  D00B               	goto	l3117
  2752  00033E  6A55               	clrf	??_IOKZ_Filter& (0+255),c
  2753  000340  AE54               	btfss	IOKZ_Filter@PORTX_KZ,7,c
  2754  000342  D001               	bra	u4245
  2755  000344  2A55               	incf	??_IOKZ_Filter& (0+255),f,c
  2756  000346                     u4245:
  2757  000346  3055               	rrcf	??_IOKZ_Filter,w,c
  2758  000348  A0D8               	btfss	status,0,c
  2759  00034A  D002               	goto	u4250
  2760  00034C  8E8C               	bsf	3980,7,c	;volatile
  2761  00034E  D008               	goto	l3119
  2762  000350                     u4250:
  2763  000350  9E8C               	bcf	3980,7,c	;volatile
  2764  000352  D006               	goto	l3119
  2765  000354                     l3117:
  2766                           
  2767                           ;PORT_Filter_OUT.c: 56: else printf("RD7±»MC4Õ¼ÓÃÖÐ\r\n");
  2768  000354  0EA0               	movlw	low STR_34
  2769  000356  6E4E               	movwf	printf@f,c
  2770  000358  0EFF               	movlw	high STR_34
  2771  00035A  6E4F               	movwf	printf@f+1,c
  2772  00035C  ECCA  F006         	call	_printf	;wreg free
  2773  000360                     l3119:
  2774                           
  2775                           ;PORT_Filter_OUT.c: 57: }
  2776                           ;PORT_Filter_OUT.c: 59: if(RX==0X0F)
  2777  000360  0E0F               	movlw	15
  2778  000362  1857               	xorwf	IOKZ_Filter@RX,w,c
  2779  000364  A4D8               	btfss	status,2,c
  2780  000366  0012               	return	
  2781                           
  2782                           ;PORT_Filter_OUT.c: 60: {
  2783                           ;PORT_Filter_OUT.c: 61: if(( PB_BIT & 0x01)==!1) LATF0= PORTX_KZ & 0x01;
  2784  000368  B053               	btfsc	IOKZ_Filter@PB_BIT,0,c
  2785  00036A  D006               	goto	l3125
  2786  00036C  A054               	btfss	IOKZ_Filter@PORTX_KZ,0,c
  2787  00036E  D002               	goto	u4290
  2788  000370  808E               	bsf	3982,0,c	;volatile
  2789  000372  D008               	goto	l3127
  2790  000374                     u4290:
  2791  000374  908E               	bcf	3982,0,c	;volatile
  2792  000376  D006               	goto	l3127
  2793  000378                     l3125:
  2794                           
  2795                           ;PORT_Filter_OUT.c: 62: else printf("RF0±»MC1Õ¼ÓÃÖÐ\r\n");
  2796  000378  0EC3               	movlw	low STR_35
  2797  00037A  6E4E               	movwf	printf@f,c
  2798  00037C  0EFE               	movlw	high STR_35
  2799  00037E  6E4F               	movwf	printf@f+1,c
  2800  000380  ECCA  F006         	call	_printf	;wreg free
  2801  000384                     l3127:
  2802                           
  2803                           ;PORT_Filter_OUT.c: 63: if( (PB_BIT>>1 & 0x01)==!1) LATF1= PORTX_KZ>>1 & 0x01;
  2804  000384  C053  F055         	movff	IOKZ_Filter@PB_BIT,??_IOKZ_Filter
  2805  000388  90D8               	bcf	status,0,c
  2806  00038A  3255               	rrcf	??_IOKZ_Filter,f,c
  2807  00038C  B055               	btfsc	??_IOKZ_Filter,0,c
  2808  00038E  D00B               	goto	l3131
  2809  000390  C054  F055         	movff	IOKZ_Filter@PORTX_KZ,??_IOKZ_Filter
  2810  000394  90D8               	bcf	status,0,c
  2811  000396  3255               	rrcf	??_IOKZ_Filter,f,c
  2812  000398  3055               	rrcf	??_IOKZ_Filter,w,c
  2813  00039A  A0D8               	btfss	status,0,c
  2814  00039C  D002               	goto	u4320
  2815  00039E  828E               	bsf	3982,1,c	;volatile
  2816  0003A0  D008               	goto	l3133
  2817  0003A2                     u4320:
  2818  0003A2  928E               	bcf	3982,1,c	;volatile
  2819  0003A4  D006               	goto	l3133
  2820  0003A6                     l3131:
  2821                           
  2822                           ;PORT_Filter_OUT.c: 64: else printf("RF1±»MC1Õ¼ÓÃÖÐ\r\n");
  2823  0003A6  0EE5               	movlw	low STR_36
  2824  0003A8  6E4E               	movwf	printf@f,c
  2825  0003AA  0EFE               	movlw	high STR_36
  2826  0003AC  6E4F               	movwf	printf@f+1,c
  2827  0003AE  ECCA  F006         	call	_printf	;wreg free
  2828  0003B2                     l3133:
  2829                           
  2830                           ;PORT_Filter_OUT.c: 65: if( (PB_BIT>>2 & 0x01)==!1) LATF2= PORTX_KZ>>2 & 0x01;
  2831  0003B2  C053  F055         	movff	IOKZ_Filter@PB_BIT,??_IOKZ_Filter
  2832  0003B6  90D8               	bcf	status,0,c
  2833  0003B8  3255               	rrcf	??_IOKZ_Filter,f,c
  2834  0003BA  90D8               	bcf	status,0,c
  2835  0003BC  3255               	rrcf	??_IOKZ_Filter,f,c
  2836  0003BE  B055               	btfsc	??_IOKZ_Filter,0,c
  2837  0003C0  D00D               	goto	l3137
  2838  0003C2  C054  F055         	movff	IOKZ_Filter@PORTX_KZ,??_IOKZ_Filter
  2839  0003C6  90D8               	bcf	status,0,c
  2840  0003C8  3255               	rrcf	??_IOKZ_Filter,f,c
  2841  0003CA  90D8               	bcf	status,0,c
  2842  0003CC  3255               	rrcf	??_IOKZ_Filter,f,c
  2843  0003CE  3055               	rrcf	??_IOKZ_Filter,w,c
  2844  0003D0  A0D8               	btfss	status,0,c
  2845  0003D2  D002               	goto	u4350
  2846  0003D4  848E               	bsf	3982,2,c	;volatile
  2847  0003D6  D008               	goto	l3139
  2848  0003D8                     u4350:
  2849  0003D8  948E               	bcf	3982,2,c	;volatile
  2850  0003DA  D006               	goto	l3139
  2851  0003DC                     l3137:
  2852                           
  2853                           ;PORT_Filter_OUT.c: 66: else printf("RF2±»MC2Õ¼ÓÃÖÐ\r\n");
  2854  0003DC  0E07               	movlw	low STR_37
  2855  0003DE  6E4E               	movwf	printf@f,c
  2856  0003E0  0EFF               	movlw	high STR_37
  2857  0003E2  6E4F               	movwf	printf@f+1,c
  2858  0003E4  ECCA  F006         	call	_printf	;wreg free
  2859  0003E8                     l3139:
  2860                           
  2861                           ;PORT_Filter_OUT.c: 67: if( (PB_BIT>>3 & 0x01)==!1) LATF3= PORTX_KZ>>3 & 0x01;
  2862  0003E8  C053  F055         	movff	IOKZ_Filter@PB_BIT,??_IOKZ_Filter
  2863  0003EC  90D8               	bcf	status,0,c
  2864  0003EE  3255               	rrcf	??_IOKZ_Filter,f,c
  2865  0003F0  90D8               	bcf	status,0,c
  2866  0003F2  3255               	rrcf	??_IOKZ_Filter,f,c
  2867  0003F4  90D8               	bcf	status,0,c
  2868  0003F6  3255               	rrcf	??_IOKZ_Filter,f,c
  2869  0003F8  B055               	btfsc	??_IOKZ_Filter,0,c
  2870  0003FA  D00F               	goto	l3143
  2871  0003FC  C054  F055         	movff	IOKZ_Filter@PORTX_KZ,??_IOKZ_Filter
  2872  000400  90D8               	bcf	status,0,c
  2873  000402  3255               	rrcf	??_IOKZ_Filter,f,c
  2874  000404  90D8               	bcf	status,0,c
  2875  000406  3255               	rrcf	??_IOKZ_Filter,f,c
  2876  000408  90D8               	bcf	status,0,c
  2877  00040A  3255               	rrcf	??_IOKZ_Filter,f,c
  2878  00040C  3055               	rrcf	??_IOKZ_Filter,w,c
  2879  00040E  A0D8               	btfss	status,0,c
  2880  000410  D002               	goto	u4380
  2881  000412  868E               	bsf	3982,3,c	;volatile
  2882  000414  D008               	goto	l3145
  2883  000416                     u4380:
  2884  000416  968E               	bcf	3982,3,c	;volatile
  2885  000418  D006               	goto	l3145
  2886  00041A                     l3143:
  2887                           
  2888                           ;PORT_Filter_OUT.c: 68: else printf("RF3±»MC2Õ¼ÓÃÖÐ\r\n");
  2889  00041A  0E29               	movlw	low STR_38
  2890  00041C  6E4E               	movwf	printf@f,c
  2891  00041E  0EFF               	movlw	high STR_38
  2892  000420  6E4F               	movwf	printf@f+1,c
  2893  000422  ECCA  F006         	call	_printf	;wreg free
  2894  000426                     l3145:
  2895                           
  2896                           ;PORT_Filter_OUT.c: 69: if( (PB_BIT>>4 & 0x01)==!1) LATF4= PORTX_KZ>>4 & 0x01;
  2897  000426  C053  F055         	movff	IOKZ_Filter@PB_BIT,??_IOKZ_Filter
  2898  00042A  3A55               	swapf	??_IOKZ_Filter,f,c
  2899  00042C  0E0F               	movlw	15
  2900  00042E  1655               	andwf	??_IOKZ_Filter,f,c
  2901  000430  B055               	btfsc	??_IOKZ_Filter,0,c
  2902  000432  D00C               	goto	l3149
  2903  000434  C054  F055         	movff	IOKZ_Filter@PORTX_KZ,??_IOKZ_Filter
  2904  000438  3A55               	swapf	??_IOKZ_Filter,f,c
  2905  00043A  0E0F               	movlw	15
  2906  00043C  1655               	andwf	??_IOKZ_Filter,f,c
  2907  00043E  3055               	rrcf	??_IOKZ_Filter,w,c
  2908  000440  A0D8               	btfss	status,0,c
  2909  000442  D002               	goto	u4410
  2910  000444  888E               	bsf	3982,4,c	;volatile
  2911  000446  D008               	goto	l3151
  2912  000448                     u4410:
  2913  000448  988E               	bcf	3982,4,c	;volatile
  2914  00044A  D006               	goto	l3151
  2915  00044C                     l3149:
  2916                           
  2917                           ;PORT_Filter_OUT.c: 70: else printf("RF4±»MC3Õ¼ÓÃÖÐ\r\n");
  2918  00044C  0E4B               	movlw	low STR_39
  2919  00044E  6E4E               	movwf	printf@f,c
  2920  000450  0EFF               	movlw	high STR_39
  2921  000452  6E4F               	movwf	printf@f+1,c
  2922  000454  ECCA  F006         	call	_printf	;wreg free
  2923  000458                     l3151:
  2924                           
  2925                           ;PORT_Filter_OUT.c: 71: if( (PB_BIT>>5 & 0x01)==!1) LATF5= PORTX_KZ>>5 & 0x01;
  2926  000458  C053  F055         	movff	IOKZ_Filter@PB_BIT,??_IOKZ_Filter
  2927  00045C  0E05               	movlw	5
  2928  00045E  6E56               	movwf	(??_IOKZ_Filter+1)& (0+255),c
  2929  000460                     u4435:
  2930  000460  90D8               	bcf	status,0,c
  2931  000462  3255               	rrcf	??_IOKZ_Filter,f,c
  2932  000464  2E56               	decfsz	(??_IOKZ_Filter+1)& (0+255),f,c
  2933  000466  D7FC               	goto	u4435
  2934  000468  B055               	btfsc	??_IOKZ_Filter,0,c
  2935  00046A  D00F               	goto	l3155
  2936  00046C  C054  F055         	movff	IOKZ_Filter@PORTX_KZ,??_IOKZ_Filter
  2937  000470  0E05               	movlw	5
  2938  000472  6E56               	movwf	(??_IOKZ_Filter+1)& (0+255),c
  2939  000474                     u4455:
  2940  000474  90D8               	bcf	status,0,c
  2941  000476  3255               	rrcf	??_IOKZ_Filter,f,c
  2942  000478  2E56               	decfsz	(??_IOKZ_Filter+1)& (0+255),f,c
  2943  00047A  D7FC               	goto	u4455
  2944  00047C  3055               	rrcf	??_IOKZ_Filter,w,c
  2945  00047E  A0D8               	btfss	status,0,c
  2946  000480  D002               	goto	u4460
  2947  000482  8A8E               	bsf	3982,5,c	;volatile
  2948  000484  D008               	goto	l3157
  2949  000486                     u4460:
  2950  000486  9A8E               	bcf	3982,5,c	;volatile
  2951  000488  D006               	goto	l3157
  2952  00048A                     l3155:
  2953                           
  2954                           ;PORT_Filter_OUT.c: 72: else printf("RF5±»MC3Õ¼ÓÃÖÐ\r\n");
  2955  00048A  0E6D               	movlw	low STR_40
  2956  00048C  6E4E               	movwf	printf@f,c
  2957  00048E  0EFF               	movlw	high STR_40
  2958  000490  6E4F               	movwf	printf@f+1,c
  2959  000492  ECCA  F006         	call	_printf	;wreg free
  2960  000496                     l3157:
  2961                           
  2962                           ;PORT_Filter_OUT.c: 73: if( (PB_BIT>>6 & 0x01)==!1) LATF6= PORTX_KZ>>6 & 0x01;
  2963  000496  C053  F055         	movff	IOKZ_Filter@PB_BIT,??_IOKZ_Filter
  2964  00049A  0E06               	movlw	6
  2965  00049C  6E56               	movwf	(??_IOKZ_Filter+1)& (0+255),c
  2966  00049E                     u4485:
  2967  00049E  90D8               	bcf	status,0,c
  2968  0004A0  3255               	rrcf	??_IOKZ_Filter,f,c
  2969  0004A2  2E56               	decfsz	(??_IOKZ_Filter+1)& (0+255),f,c
  2970  0004A4  D7FC               	goto	u4485
  2971  0004A6  B055               	btfsc	??_IOKZ_Filter,0,c
  2972  0004A8  D00F               	goto	l3161
  2973  0004AA  C054  F055         	movff	IOKZ_Filter@PORTX_KZ,??_IOKZ_Filter
  2974  0004AE  0E06               	movlw	6
  2975  0004B0  6E56               	movwf	(??_IOKZ_Filter+1)& (0+255),c
  2976  0004B2                     u4505:
  2977  0004B2  90D8               	bcf	status,0,c
  2978  0004B4  3255               	rrcf	??_IOKZ_Filter,f,c
  2979  0004B6  2E56               	decfsz	(??_IOKZ_Filter+1)& (0+255),f,c
  2980  0004B8  D7FC               	goto	u4505
  2981  0004BA  3055               	rrcf	??_IOKZ_Filter,w,c
  2982  0004BC  A0D8               	btfss	status,0,c
  2983  0004BE  D002               	goto	u4510
  2984  0004C0  8C8E               	bsf	3982,6,c	;volatile
  2985  0004C2  D008               	goto	l3163
  2986  0004C4                     u4510:
  2987  0004C4  9C8E               	bcf	3982,6,c	;volatile
  2988  0004C6  D006               	goto	l3163
  2989  0004C8                     l3161:
  2990                           
  2991                           ;PORT_Filter_OUT.c: 74: else printf("RF6±»MC4Õ¼ÓÃÖÐ\r\n");
  2992  0004C8  0E8F               	movlw	low STR_41
  2993  0004CA  6E4E               	movwf	printf@f,c
  2994  0004CC  0EFF               	movlw	high STR_41
  2995  0004CE  6E4F               	movwf	printf@f+1,c
  2996  0004D0  ECCA  F006         	call	_printf	;wreg free
  2997  0004D4                     l3163:
  2998                           
  2999                           ;PORT_Filter_OUT.c: 75: if( (PB_BIT>>7 & 0x01)==!1) LATF7= PORTX_KZ>>7 & 0x01;
  3000  0004D4  6A55               	clrf	??_IOKZ_Filter& (0+255),c
  3001  0004D6  AE53               	btfss	IOKZ_Filter@PB_BIT,7,c
  3002  0004D8  D001               	bra	u4535
  3003  0004DA  2A55               	incf	??_IOKZ_Filter& (0+255),f,c
  3004  0004DC                     u4535:
  3005  0004DC  B055               	btfsc	??_IOKZ_Filter,0,c
  3006  0004DE  D00B               	goto	l3167
  3007  0004E0  6A55               	clrf	??_IOKZ_Filter& (0+255),c
  3008  0004E2  AE54               	btfss	IOKZ_Filter@PORTX_KZ,7,c
  3009  0004E4  D001               	bra	u4555
  3010  0004E6  2A55               	incf	??_IOKZ_Filter& (0+255),f,c
  3011  0004E8                     u4555:
  3012  0004E8  3055               	rrcf	??_IOKZ_Filter,w,c
  3013  0004EA  A0D8               	btfss	status,0,c
  3014  0004EC  D002               	goto	u4560
  3015  0004EE  8E8E               	bsf	3982,7,c	;volatile
  3016  0004F0  0012               	return	
  3017  0004F2                     u4560:
  3018  0004F2  9E8E               	bcf	3982,7,c	;volatile
  3019  0004F4  0012               	return	
  3020  0004F6                     l3167:
  3021                           
  3022                           ;PORT_Filter_OUT.c: 76: else printf("RF7±»MC4Õ¼ÓÃÖÐ\r\n");
  3023  0004F6  0EB1               	movlw	low STR_42
  3024  0004F8  6E4E               	movwf	printf@f,c
  3025  0004FA  0EFF               	movlw	high STR_42
  3026  0004FC  6E4F               	movwf	printf@f+1,c
  3027  0004FE  ECCA  F006         	call	_printf	;wreg free
  3028  000502  0012               	return	
  3029  000504                     __end_of_IOKZ_Filter:
  3030                           	opt stack 0
  3031                           tblptru	equ	0xFF8
  3032                           tblptrh	equ	0xFF7
  3033                           tblptrl	equ	0xFF6
  3034                           tablat	equ	0xFF5
  3035                           postinc0	equ	0xFEE
  3036                           wreg	equ	0xFE8
  3037                           indf1	equ	0xFE7
  3038                           postdec1	equ	0xFE5
  3039                           fsr1h	equ	0xFE2
  3040                           fsr1l	equ	0xFE1
  3041                           indf2	equ	0xFDF
  3042                           fsr2h	equ	0xFDA
  3043                           fsr2l	equ	0xFD9
  3044                           status	equ	0xFD8
  3045                           
  3046 ;; *************** function _McStart_PARM_CL *****************
  3047 ;; Defined at:
  3048 ;;		line 77 in file "PARM_CL.c"
  3049 ;; Parameters:    Size  Location     Type
  3050 ;;		None
  3051 ;; Auto vars:     Size  Location     Type
  3052 ;;		None
  3053 ;; Return value:  Size  Location     Type
  3054 ;;                  1    wreg      void 
  3055 ;; Registers used:
  3056 ;;		None
  3057 ;; Tracked objects:
  3058 ;;		On entry : 0/0
  3059 ;;		On exit  : 0/0
  3060 ;;		Unchanged: 0/0
  3061 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  3062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3066 ;;Total ram usage:        0 bytes
  3067 ;; Hardware stack levels used:    1
  3068 ;; Hardware stack levels required when called:    3
  3069 ;; This function calls:
  3070 ;;		Nothing
  3071 ;; This function is called by:
  3072 ;;		_Usart_CL
  3073 ;; This function uses a non-reentrant model
  3074 ;;
  3075                           
  3076                           	psect	text5
  3077  000EB0                     __ptext5:
  3078                           	opt stack 0
  3079  000EB0                     _McStart_PARM_CL:
  3080                           	opt stack 26
  3081                           
  3082                           ;PARM_CL.c: 79: MC1_START_Signal=McStart_PARM[2];
  3083                           
  3084                           ;incstack = 0
  3085  000EB0  C08A  F00C         	movff	_McStart_PARM+2,_MC1_START_Signal
  3086                           
  3087                           ;PARM_CL.c: 80: MC2_START_Signal=McStart_PARM[3];
  3088  000EB4  C08B  F00B         	movff	_McStart_PARM+3,_MC2_START_Signal
  3089                           
  3090                           ;PARM_CL.c: 81: MC3_START_Signal=McStart_PARM[4];
  3091  000EB8  C08C  F00A         	movff	_McStart_PARM+4,_MC3_START_Signal
  3092                           
  3093                           ;PARM_CL.c: 82: MC4_START_Signal=McStart_PARM[5];
  3094  000EBC  C08D  F009         	movff	_McStart_PARM+5,_MC4_START_Signal
  3095  000EC0  0012               	return		;funcret
  3096  000EC2                     __end_of_McStart_PARM_CL:
  3097                           	opt stack 0
  3098                           tblptru	equ	0xFF8
  3099                           tblptrh	equ	0xFF7
  3100                           tblptrl	equ	0xFF6
  3101                           tablat	equ	0xFF5
  3102                           postinc0	equ	0xFEE
  3103                           wreg	equ	0xFE8
  3104                           indf1	equ	0xFE7
  3105                           postdec1	equ	0xFE5
  3106                           fsr1h	equ	0xFE2
  3107                           fsr1l	equ	0xFE1
  3108                           indf2	equ	0xFDF
  3109                           fsr2h	equ	0xFDA
  3110                           fsr2l	equ	0xFD9
  3111                           status	equ	0xFD8
  3112                           
  3113 ;; *************** function _MC_EVENT_Trigge *****************
  3114 ;; Defined at:
  3115 ;;		line 16 in file "MC_EVENT.c"
  3116 ;; Parameters:    Size  Location     Type
  3117 ;;		None
  3118 ;; Auto vars:     Size  Location     Type
  3119 ;;		None
  3120 ;; Return value:  Size  Location     Type
  3121 ;;                  1    wreg      void 
  3122 ;; Registers used:
  3123 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3124 ;; Tracked objects:
  3125 ;;		On entry : 0/0
  3126 ;;		On exit  : 0/0
  3127 ;;		Unchanged: 0/0
  3128 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  3129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3133 ;;Total ram usage:        0 bytes
  3134 ;; Hardware stack levels used:    1
  3135 ;; Hardware stack levels required when called:    5
  3136 ;; This function calls:
  3137 ;;		_printf
  3138 ;; This function is called by:
  3139 ;;		_Usart_CL
  3140 ;; This function uses a non-reentrant model
  3141 ;;
  3142                           
  3143                           	psect	text6
  3144  000732                     __ptext6:
  3145                           	opt stack 0
  3146  000732                     _MC_EVENT_Trigge:
  3147                           	opt stack 24
  3148                           
  3149                           ;MC_EVENT.c: 19: if(MC1_START_Signal==0X01)
  3150                           
  3151                           ;incstack = 0
  3152  000732  040C               	decf	_MC1_START_Signal,w,c
  3153  000734  A4D8               	btfss	status,2,c
  3154  000736  D016               	goto	l3215
  3155                           
  3156                           ;MC_EVENT.c: 20: {
  3157                           ;MC_EVENT.c: 21: if(MC1_Start_BZ==1) printf("MC1_working,ERROR!\r\n");
  3158  000738  A021               	btfss	33,0,c	;volatile
  3159  00073A  D007               	goto	l806
  3160  00073C  0EC2               	movlw	low STR_6
  3161  00073E  6E4E               	movwf	printf@f,c
  3162  000740  0EFD               	movlw	high STR_6
  3163  000742  6E4F               	movwf	printf@f+1,c
  3164  000744  ECCA  F006         	call	_printf	;wreg free
  3165  000748  D027               	goto	l3225
  3166  00074A                     l806:
  3167                           
  3168                           ;MC_EVENT.c: 22: else{
  3169                           ;MC_EVENT.c: 23: MC1_IO_STATE=0;
  3170  00074A  9022               	bcf	34,0,c	;volatile
  3171                           
  3172                           ;MC_EVENT.c: 24: MC1_SwapDelay=10;
  3173  00074C  0E00               	movlw	0
  3174  00074E  6E2F               	movwf	_MC1_SwapDelay+1,c
  3175  000750  0E0A               	movlw	10
  3176  000752  6E2E               	movwf	_MC1_SwapDelay,c
  3177                           
  3178                           ;MC_EVENT.c: 25: if(MC1_TIME_H==0)MC1_Start_BZ=0;
  3179  000754  5003               	movf	_MC1_TIME_H,w,c
  3180  000756  1004               	iorwf	_MC1_TIME_H+1,w,c
  3181  000758  A4D8               	btfss	status,2,c
  3182  00075A  D002               	goto	l808
  3183  00075C  9021               	bcf	33,0,c	;volatile
  3184  00075E  D01C               	goto	l3225
  3185  000760                     l808:
  3186                           
  3187                           ;MC_EVENT.c: 26: else
  3188                           ;MC_EVENT.c: 27: {
  3189                           ;MC_EVENT.c: 28: MC1_Start_BZ=1;
  3190  000760  8021               	bsf	33,0,c	;volatile
  3191                           
  3192                           ;MC_EVENT.c: 30: }
  3193                           ;MC_EVENT.c: 31: }
  3194                           ;MC_EVENT.c: 32: }
  3195  000762  D01A               	goto	l3225
  3196  000764                     l3215:
  3197                           
  3198                           ;MC_EVENT.c: 33: else if(MC1_START_Signal==0X02)
  3199  000764  0E02               	movlw	2
  3200  000766  180C               	xorwf	_MC1_START_Signal,w,c
  3201  000768  A4D8               	btfss	status,2,c
  3202  00076A  D016               	goto	l3225
  3203                           
  3204                           ;MC_EVENT.c: 34: {
  3205                           ;MC_EVENT.c: 35: if(MC1_Start_BZ==0) printf("MC1_stopped,ERROR!\r\n");
  3206  00076C  B021               	btfsc	33,0,c	;volatile
  3207  00076E  D007               	goto	l812
  3208  000770  0E6E               	movlw	low STR_7
  3209  000772  6E4E               	movwf	printf@f,c
  3210  000774  0EFD               	movlw	high STR_7
  3211  000776  6E4F               	movwf	printf@f+1,c
  3212  000778  ECCA  F006         	call	_printf	;wreg free
  3213  00077C  D00D               	goto	l3225
  3214  00077E                     l812:
  3215                           
  3216                           ;MC_EVENT.c: 36: else{
  3217                           ;MC_EVENT.c: 38: MC1_Start_BZ=0;
  3218  00077E  9021               	bcf	33,0,c	;volatile
  3219                           
  3220                           ;MC_EVENT.c: 39: MC1_FZ_C=0;
  3221  000780  0E00               	movlw	0
  3222  000782  6E08               	movwf	_MC1_FZ_C,c
  3223                           
  3224                           ;MC_EVENT.c: 40: MC1_TIME_H=0;
  3225  000784  0E00               	movlw	0
  3226  000786  6E04               	movwf	_MC1_TIME_H+1,c
  3227  000788  0E00               	movlw	0
  3228  00078A  6E03               	movwf	_MC1_TIME_H,c
  3229                           
  3230                           ;MC_EVENT.c: 41: printf("MC1_stop success!\r\n");
  3231  00078C  0E16               	movlw	low STR_8
  3232  00078E  6E4E               	movwf	printf@f,c
  3233  000790  0EFE               	movlw	high STR_8
  3234  000792  6E4F               	movwf	printf@f+1,c
  3235  000794  ECCA  F006         	call	_printf	;wreg free
  3236  000798                     l3225:
  3237                           
  3238                           ;MC_EVENT.c: 42: }
  3239                           ;MC_EVENT.c: 44: }
  3240                           ;MC_EVENT.c: 49: if(MC2_START_Signal==0X01)
  3241  000798  040B               	decf	_MC2_START_Signal,w,c
  3242  00079A  A4D8               	btfss	status,2,c
  3243  00079C  D016               	goto	l3237
  3244                           
  3245                           ;MC_EVENT.c: 50: {
  3246                           ;MC_EVENT.c: 51: if(MC2_Start_BZ==1) printf("MC2_working,ERROR!\r\n");
  3247  00079E  A221               	btfss	33,1,c	;volatile
  3248  0007A0  D007               	goto	l815
  3249  0007A2  0ED7               	movlw	low STR_9
  3250  0007A4  6E4E               	movwf	printf@f,c
  3251  0007A6  0EFD               	movlw	high STR_9
  3252  0007A8  6E4F               	movwf	printf@f+1,c
  3253  0007AA  ECCA  F006         	call	_printf	;wreg free
  3254  0007AE  D027               	goto	l3247
  3255  0007B0                     l815:
  3256                           
  3257                           ;MC_EVENT.c: 52: else{
  3258                           ;MC_EVENT.c: 53: MC2_IO_STATE=0;
  3259  0007B0  9222               	bcf	34,1,c	;volatile
  3260                           
  3261                           ;MC_EVENT.c: 54: MC2_SwapDelay=10;
  3262  0007B2  0E00               	movlw	0
  3263  0007B4  6E2D               	movwf	_MC2_SwapDelay+1,c
  3264  0007B6  0E0A               	movlw	10
  3265  0007B8  6E2C               	movwf	_MC2_SwapDelay,c
  3266                           
  3267                           ;MC_EVENT.c: 55: if(MC2_TIME_H==0)MC2_Start_BZ=0;
  3268  0007BA  5001               	movf	_MC2_TIME_H,w,c
  3269  0007BC  1002               	iorwf	_MC2_TIME_H+1,w,c
  3270  0007BE  A4D8               	btfss	status,2,c
  3271  0007C0  D002               	goto	l817
  3272  0007C2  9221               	bcf	33,1,c	;volatile
  3273  0007C4  D01C               	goto	l3247
  3274  0007C6                     l817:
  3275                           
  3276                           ;MC_EVENT.c: 56: else
  3277                           ;MC_EVENT.c: 57: {
  3278                           ;MC_EVENT.c: 58: MC2_Start_BZ=1;
  3279  0007C6  8221               	bsf	33,1,c	;volatile
  3280                           
  3281                           ;MC_EVENT.c: 60: }
  3282                           ;MC_EVENT.c: 61: }
  3283                           ;MC_EVENT.c: 62: }
  3284  0007C8  D01A               	goto	l3247
  3285  0007CA                     l3237:
  3286                           
  3287                           ;MC_EVENT.c: 63: else if(MC2_START_Signal==0X02)
  3288  0007CA  0E02               	movlw	2
  3289  0007CC  180B               	xorwf	_MC2_START_Signal,w,c
  3290  0007CE  A4D8               	btfss	status,2,c
  3291  0007D0  D016               	goto	l3247
  3292                           
  3293                           ;MC_EVENT.c: 64: {
  3294                           ;MC_EVENT.c: 65: if(MC2_Start_BZ==0) printf("MC2_stopped,ERROR!\r\n");
  3295  0007D2  B221               	btfsc	33,1,c	;volatile
  3296  0007D4  D007               	goto	l821
  3297  0007D6  0E83               	movlw	low STR_10
  3298  0007D8  6E4E               	movwf	printf@f,c
  3299  0007DA  0EFD               	movlw	high STR_10
  3300  0007DC  6E4F               	movwf	printf@f+1,c
  3301  0007DE  ECCA  F006         	call	_printf	;wreg free
  3302  0007E2  D00D               	goto	l3247
  3303  0007E4                     l821:
  3304                           
  3305                           ;MC_EVENT.c: 66: else{
  3306                           ;MC_EVENT.c: 67: MC2_Start_BZ=0;
  3307  0007E4  9221               	bcf	33,1,c	;volatile
  3308                           
  3309                           ;MC_EVENT.c: 68: MC2_FZ_C=0;
  3310  0007E6  0E00               	movlw	0
  3311  0007E8  6E07               	movwf	_MC2_FZ_C,c
  3312                           
  3313                           ;MC_EVENT.c: 69: MC2_TIME_H=0;
  3314  0007EA  0E00               	movlw	0
  3315  0007EC  6E02               	movwf	_MC2_TIME_H+1,c
  3316  0007EE  0E00               	movlw	0
  3317  0007F0  6E01               	movwf	_MC2_TIME_H,c
  3318                           
  3319                           ;MC_EVENT.c: 70: printf("MC2_stop success!\r\n");
  3320  0007F2  0E2A               	movlw	low STR_11
  3321  0007F4  6E4E               	movwf	printf@f,c
  3322  0007F6  0EFE               	movlw	high STR_11
  3323  0007F8  6E4F               	movwf	printf@f+1,c
  3324  0007FA  ECCA  F006         	call	_printf	;wreg free
  3325  0007FE                     l3247:
  3326                           
  3327                           ;MC_EVENT.c: 71: }
  3328                           ;MC_EVENT.c: 74: }
  3329                           ;MC_EVENT.c: 78: if(MC3_START_Signal==0X01)
  3330  0007FE  040A               	decf	_MC3_START_Signal,w,c
  3331  000800  A4D8               	btfss	status,2,c
  3332  000802  D016               	goto	l3259
  3333                           
  3334                           ;MC_EVENT.c: 79: {
  3335                           ;MC_EVENT.c: 80: if(MC3_Start_BZ==1) printf("MC3_working,ERROR!\r\n");
  3336  000804  A421               	btfss	33,2,c	;volatile
  3337  000806  D007               	goto	l824
  3338  000808  0EEC               	movlw	low STR_12
  3339  00080A  6E4E               	movwf	printf@f,c
  3340  00080C  0EFD               	movlw	high STR_12
  3341  00080E  6E4F               	movwf	printf@f+1,c
  3342  000810  ECCA  F006         	call	_printf	;wreg free
  3343  000814  D027               	goto	l3269
  3344  000816                     l824:
  3345                           
  3346                           ;MC_EVENT.c: 81: else{
  3347                           ;MC_EVENT.c: 82: MC3_IO_STATE=0;
  3348  000816  9422               	bcf	34,2,c	;volatile
  3349                           
  3350                           ;MC_EVENT.c: 83: MC3_SwapDelay=10;
  3351  000818  0E00               	movlw	0
  3352  00081A  6E2B               	movwf	_MC3_SwapDelay+1,c
  3353  00081C  0E0A               	movlw	10
  3354  00081E  6E2A               	movwf	_MC3_SwapDelay,c
  3355                           
  3356                           ;MC_EVENT.c: 84: if(MC3_TIME_H==0)MC3_Start_BZ=0;
  3357  000820  503A               	movf	_MC3_TIME_H,w,c
  3358  000822  103B               	iorwf	_MC3_TIME_H+1,w,c
  3359  000824  A4D8               	btfss	status,2,c
  3360  000826  D002               	goto	l826
  3361  000828  9421               	bcf	33,2,c	;volatile
  3362  00082A  D01C               	goto	l3269
  3363  00082C                     l826:
  3364                           
  3365                           ;MC_EVENT.c: 85: else
  3366                           ;MC_EVENT.c: 86: {
  3367                           ;MC_EVENT.c: 87: MC3_Start_BZ=1;
  3368  00082C  8421               	bsf	33,2,c	;volatile
  3369                           
  3370                           ;MC_EVENT.c: 89: }
  3371                           ;MC_EVENT.c: 90: }
  3372                           ;MC_EVENT.c: 91: }
  3373  00082E  D01A               	goto	l3269
  3374  000830                     l3259:
  3375                           
  3376                           ;MC_EVENT.c: 92: else if(MC3_START_Signal==0X02)
  3377  000830  0E02               	movlw	2
  3378  000832  180A               	xorwf	_MC3_START_Signal,w,c
  3379  000834  A4D8               	btfss	status,2,c
  3380  000836  D016               	goto	l3269
  3381                           
  3382                           ;MC_EVENT.c: 93: {
  3383                           ;MC_EVENT.c: 94: if(MC3_Start_BZ==0) printf("MC3_stopped,ERROR!\r\n");
  3384  000838  B421               	btfsc	33,2,c	;volatile
  3385  00083A  D007               	goto	l830
  3386  00083C  0E98               	movlw	low STR_13
  3387  00083E  6E4E               	movwf	printf@f,c
  3388  000840  0EFD               	movlw	high STR_13
  3389  000842  6E4F               	movwf	printf@f+1,c
  3390  000844  ECCA  F006         	call	_printf	;wreg free
  3391  000848  D00D               	goto	l3269
  3392  00084A                     l830:
  3393                           
  3394                           ;MC_EVENT.c: 95: else{
  3395                           ;MC_EVENT.c: 96: MC3_Start_BZ=0;
  3396  00084A  9421               	bcf	33,2,c	;volatile
  3397                           
  3398                           ;MC_EVENT.c: 97: MC3_FZ_C=0;
  3399  00084C  0E00               	movlw	0
  3400  00084E  6E06               	movwf	_MC3_FZ_C,c
  3401                           
  3402                           ;MC_EVENT.c: 98: MC3_TIME_H=0;
  3403  000850  0E00               	movlw	0
  3404  000852  6E3B               	movwf	_MC3_TIME_H+1,c
  3405  000854  0E00               	movlw	0
  3406  000856  6E3A               	movwf	_MC3_TIME_H,c
  3407                           
  3408                           ;MC_EVENT.c: 99: printf("MC3_stop success!\r\n");
  3409  000858  0E3E               	movlw	low STR_14
  3410  00085A  6E4E               	movwf	printf@f,c
  3411  00085C  0EFE               	movlw	high STR_14
  3412  00085E  6E4F               	movwf	printf@f+1,c
  3413  000860  ECCA  F006         	call	_printf	;wreg free
  3414  000864                     l3269:
  3415                           
  3416                           ;MC_EVENT.c: 100: }
  3417                           ;MC_EVENT.c: 101: }
  3418                           ;MC_EVENT.c: 104: if(MC4_START_Signal==0X01)
  3419  000864  0409               	decf	_MC4_START_Signal,w,c
  3420  000866  A4D8               	btfss	status,2,c
  3421  000868  D016               	goto	l3281
  3422                           
  3423                           ;MC_EVENT.c: 105: {
  3424                           ;MC_EVENT.c: 106: if(MC4_Start_BZ==1) printf("MC4_working,ERROR!\r\n");
  3425  00086A  A621               	btfss	33,3,c	;volatile
  3426  00086C  D007               	goto	l833
  3427  00086E  0E01               	movlw	low STR_15
  3428  000870  6E4E               	movwf	printf@f,c
  3429  000872  0EFE               	movlw	high STR_15
  3430  000874  6E4F               	movwf	printf@f+1,c
  3431  000876  ECCA  F006         	call	_printf	;wreg free
  3432  00087A  0012               	return	
  3433  00087C                     l833:
  3434                           
  3435                           ;MC_EVENT.c: 107: else{
  3436                           ;MC_EVENT.c: 109: MC4_IO_STATE=0;
  3437  00087C  9622               	bcf	34,3,c	;volatile
  3438                           
  3439                           ;MC_EVENT.c: 110: MC4_SwapDelay=10;
  3440  00087E  0E00               	movlw	0
  3441  000880  6E29               	movwf	_MC4_SwapDelay+1,c
  3442  000882  0E0A               	movlw	10
  3443  000884  6E28               	movwf	_MC4_SwapDelay,c
  3444                           
  3445                           ;MC_EVENT.c: 111: if(MC4_TIME_H==0)MC4_Start_BZ=0;
  3446  000886  5038               	movf	_MC4_TIME_H,w,c
  3447  000888  1039               	iorwf	_MC4_TIME_H+1,w,c
  3448  00088A  A4D8               	btfss	status,2,c
  3449  00088C  D002               	goto	l835
  3450  00088E  9621               	bcf	33,3,c	;volatile
  3451  000890  0012               	return	
  3452  000892                     l835:
  3453                           
  3454                           ;MC_EVENT.c: 112: else
  3455                           ;MC_EVENT.c: 113: {
  3456                           ;MC_EVENT.c: 114: MC4_Start_BZ=1;
  3457  000892  8621               	bsf	33,3,c	;volatile
  3458                           
  3459                           ;MC_EVENT.c: 116: }
  3460                           ;MC_EVENT.c: 117: }
  3461                           ;MC_EVENT.c: 118: }
  3462  000894  0012               	return	
  3463  000896                     l3281:
  3464                           
  3465                           ;MC_EVENT.c: 119: else if(MC4_START_Signal==0X02)
  3466  000896  0E02               	movlw	2
  3467  000898  1809               	xorwf	_MC4_START_Signal,w,c
  3468  00089A  A4D8               	btfss	status,2,c
  3469  00089C  0012               	return	
  3470                           
  3471                           ;MC_EVENT.c: 120: {
  3472                           ;MC_EVENT.c: 121: if(MC4_Start_BZ==0) printf("MC4_stopped,ERROR!\r\n");
  3473  00089E  B621               	btfsc	33,3,c	;volatile
  3474  0008A0  D007               	goto	l839
  3475  0008A2  0EAD               	movlw	low STR_16
  3476  0008A4  6E4E               	movwf	printf@f,c
  3477  0008A6  0EFD               	movlw	high STR_16
  3478  0008A8  6E4F               	movwf	printf@f+1,c
  3479  0008AA  ECCA  F006         	call	_printf	;wreg free
  3480  0008AE  0012               	return	
  3481  0008B0                     l839:
  3482                           
  3483                           ;MC_EVENT.c: 122: else{
  3484                           ;MC_EVENT.c: 123: MC4_Start_BZ=0;
  3485  0008B0  9621               	bcf	33,3,c	;volatile
  3486                           
  3487                           ;MC_EVENT.c: 124: MC4_FZ_C=0;
  3488  0008B2  0E00               	movlw	0
  3489  0008B4  6E05               	movwf	_MC4_FZ_C,c
  3490                           
  3491                           ;MC_EVENT.c: 125: MC4_TIME_H=0;
  3492  0008B6  0E00               	movlw	0
  3493  0008B8  6E39               	movwf	_MC4_TIME_H+1,c
  3494  0008BA  0E00               	movlw	0
  3495  0008BC  6E38               	movwf	_MC4_TIME_H,c
  3496                           
  3497                           ;MC_EVENT.c: 126: printf("MC4_stop success!\r\n");
  3498  0008BE  0E52               	movlw	low STR_17
  3499  0008C0  6E4E               	movwf	printf@f,c
  3500  0008C2  0EFE               	movlw	high STR_17
  3501  0008C4  6E4F               	movwf	printf@f+1,c
  3502  0008C6  ECCA  F006         	call	_printf	;wreg free
  3503  0008CA  0012               	return	
  3504  0008CC                     __end_of_MC_EVENT_Trigge:
  3505                           	opt stack 0
  3506                           tblptru	equ	0xFF8
  3507                           tblptrh	equ	0xFF7
  3508                           tblptrl	equ	0xFF6
  3509                           tablat	equ	0xFF5
  3510                           postinc0	equ	0xFEE
  3511                           wreg	equ	0xFE8
  3512                           indf1	equ	0xFE7
  3513                           postdec1	equ	0xFE5
  3514                           fsr1h	equ	0xFE2
  3515                           fsr1l	equ	0xFE1
  3516                           indf2	equ	0xFDF
  3517                           fsr2h	equ	0xFDA
  3518                           fsr2l	equ	0xFD9
  3519                           status	equ	0xFD8
  3520                           
  3521 ;; *************** function _MC4_PARM_CL *****************
  3522 ;; Defined at:
  3523 ;;		line 64 in file "PARM_CL.c"
  3524 ;; Parameters:    Size  Location     Type
  3525 ;;		None
  3526 ;; Auto vars:     Size  Location     Type
  3527 ;;		None
  3528 ;; Return value:  Size  Location     Type
  3529 ;;                  1    wreg      void 
  3530 ;; Registers used:
  3531 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3532 ;; Tracked objects:
  3533 ;;		On entry : 0/0
  3534 ;;		On exit  : 0/0
  3535 ;;		Unchanged: 0/0
  3536 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  3537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3540 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3541 ;;Total ram usage:        0 bytes
  3542 ;; Hardware stack levels used:    1
  3543 ;; Hardware stack levels required when called:    5
  3544 ;; This function calls:
  3545 ;;		_printf
  3546 ;; This function is called by:
  3547 ;;		_Usart_CL
  3548 ;; This function uses a non-reentrant model
  3549 ;;
  3550                           
  3551                           	psect	text7
  3552  000C02                     __ptext7:
  3553                           	opt stack 0
  3554  000C02                     _MC4_PARM_CL:
  3555                           	opt stack 24
  3556                           
  3557                           ;PARM_CL.c: 66: if( MC4_Start_BZ==0)
  3558                           
  3559                           ;incstack = 0
  3560  000C02  B621               	btfsc	33,3,c	;volatile
  3561  000C04  D01B               	goto	l3199
  3562                           
  3563                           ;PARM_CL.c: 67: {
  3564                           ;PARM_CL.c: 68: MC4_Channel= MC4_PARM[2];
  3565  000C06  C062  F05A         	movff	_MC4_PARM+2,_MC4_Channel
  3566                           
  3567                           ;PARM_CL.c: 69: MC4_FZ_C= MC4_PARM[3];
  3568  000C0A  C063  F005         	movff	_MC4_PARM+3,_MC4_FZ_C
  3569                           
  3570                           ;PARM_CL.c: 70: MC4_TIME_H = MC4_PARM[4]*255+MC4_PARM[5];
  3571  000C0E  0100               	movlb	0	; () banked
  3572  000C10  5164               	movf	(_MC4_PARM+4)& (0+255),w,b
  3573  000C12  0DFF               	mullw	255
  3574  000C14  0100               	movlb	0	; () banked
  3575  000C16  5165               	movf	(_MC4_PARM+5)& (0+255),w,b
  3576  000C18  24F3               	addwf	prodl,w,c
  3577  000C1A  6E38               	movwf	_MC4_TIME_H,c
  3578  000C1C  0100               	movlb	0	; () banked
  3579  000C1E  0E00               	movlw	0
  3580  000C20  20F4               	addwfc	prodh,w,c
  3581  000C22  6E39               	movwf	_MC4_TIME_H+1,c
  3582                           
  3583                           ;PARM_CL.c: 71: MC4_TIME_L = MC4_PARM[6]*255+MC4_PARM[7];
  3584  000C24  0100               	movlb	0	; () banked
  3585  000C26  5166               	movf	(_MC4_PARM+6)& (0+255),w,b
  3586  000C28  0DFF               	mullw	255
  3587  000C2A  0100               	movlb	0	; () banked
  3588  000C2C  5167               	movf	(_MC4_PARM+7)& (0+255),w,b
  3589  000C2E  24F3               	addwf	prodl,w,c
  3590  000C30  6E30               	movwf	_MC4_TIME_L,c
  3591  000C32  0100               	movlb	0	; () banked
  3592  000C34  0E00               	movlw	0
  3593  000C36  20F4               	addwfc	prodh,w,c
  3594  000C38  6E31               	movwf	_MC4_TIME_L+1,c
  3595                           
  3596                           ;PARM_CL.c: 73: }
  3597  000C3A  0012               	return	
  3598  000C3C                     l3199:
  3599                           
  3600                           ;PARM_CL.c: 74: else printf("MC4_PARM Write Fail!\r\n");
  3601  000C3C  0E57               	movlw	low STR_25
  3602  000C3E  6E4E               	movwf	printf@f,c
  3603  000C40  0EFD               	movlw	high STR_25
  3604  000C42  6E4F               	movwf	printf@f+1,c
  3605  000C44  ECCA  F006         	call	_printf	;wreg free
  3606  000C48  0012               	return	
  3607  000C4A                     __end_of_MC4_PARM_CL:
  3608                           	opt stack 0
  3609                           tblptru	equ	0xFF8
  3610                           tblptrh	equ	0xFF7
  3611                           tblptrl	equ	0xFF6
  3612                           tablat	equ	0xFF5
  3613                           prodh	equ	0xFF4
  3614                           prodl	equ	0xFF3
  3615                           postinc0	equ	0xFEE
  3616                           wreg	equ	0xFE8
  3617                           indf1	equ	0xFE7
  3618                           postdec1	equ	0xFE5
  3619                           fsr1h	equ	0xFE2
  3620                           fsr1l	equ	0xFE1
  3621                           indf2	equ	0xFDF
  3622                           fsr2h	equ	0xFDA
  3623                           fsr2l	equ	0xFD9
  3624                           status	equ	0xFD8
  3625                           
  3626 ;; *************** function _MC3_PARM_CL *****************
  3627 ;; Defined at:
  3628 ;;		line 50 in file "PARM_CL.c"
  3629 ;; Parameters:    Size  Location     Type
  3630 ;;		None
  3631 ;; Auto vars:     Size  Location     Type
  3632 ;;		None
  3633 ;; Return value:  Size  Location     Type
  3634 ;;                  1    wreg      void 
  3635 ;; Registers used:
  3636 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3637 ;; Tracked objects:
  3638 ;;		On entry : 0/0
  3639 ;;		On exit  : 0/0
  3640 ;;		Unchanged: 0/0
  3641 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  3642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3645 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3646 ;;Total ram usage:        0 bytes
  3647 ;; Hardware stack levels used:    1
  3648 ;; Hardware stack levels required when called:    5
  3649 ;; This function calls:
  3650 ;;		_printf
  3651 ;; This function is called by:
  3652 ;;		_Usart_CL
  3653 ;; This function uses a non-reentrant model
  3654 ;;
  3655                           
  3656                           	psect	text8
  3657  000C4A                     __ptext8:
  3658                           	opt stack 0
  3659  000C4A                     _MC3_PARM_CL:
  3660                           	opt stack 24
  3661                           
  3662                           ;PARM_CL.c: 52: if( MC3_Start_BZ==0)
  3663                           
  3664                           ;incstack = 0
  3665  000C4A  B421               	btfsc	33,2,c	;volatile
  3666  000C4C  D01B               	goto	l3191
  3667                           
  3668                           ;PARM_CL.c: 53: {
  3669                           ;PARM_CL.c: 54: MC3_Channel= MC3_PARM[2];
  3670  000C4E  C06A  F05B         	movff	_MC3_PARM+2,_MC3_Channel
  3671                           
  3672                           ;PARM_CL.c: 55: MC3_FZ_C= MC3_PARM[3];
  3673  000C52  C06B  F006         	movff	_MC3_PARM+3,_MC3_FZ_C
  3674                           
  3675                           ;PARM_CL.c: 56: MC3_TIME_H = MC3_PARM[4]*255+MC3_PARM[5];
  3676  000C56  0100               	movlb	0	; () banked
  3677  000C58  516C               	movf	(_MC3_PARM+4)& (0+255),w,b
  3678  000C5A  0DFF               	mullw	255
  3679  000C5C  0100               	movlb	0	; () banked
  3680  000C5E  516D               	movf	(_MC3_PARM+5)& (0+255),w,b
  3681  000C60  24F3               	addwf	prodl,w,c
  3682  000C62  6E3A               	movwf	_MC3_TIME_H,c
  3683  000C64  0100               	movlb	0	; () banked
  3684  000C66  0E00               	movlw	0
  3685  000C68  20F4               	addwfc	prodh,w,c
  3686  000C6A  6E3B               	movwf	_MC3_TIME_H+1,c
  3687                           
  3688                           ;PARM_CL.c: 57: MC3_TIME_L = MC3_PARM[6]*255+MC3_PARM[7];
  3689  000C6C  0100               	movlb	0	; () banked
  3690  000C6E  516E               	movf	(_MC3_PARM+6)& (0+255),w,b
  3691  000C70  0DFF               	mullw	255
  3692  000C72  0100               	movlb	0	; () banked
  3693  000C74  516F               	movf	(_MC3_PARM+7)& (0+255),w,b
  3694  000C76  24F3               	addwf	prodl,w,c
  3695  000C78  6E32               	movwf	_MC3_TIME_L,c
  3696  000C7A  0100               	movlb	0	; () banked
  3697  000C7C  0E00               	movlw	0
  3698  000C7E  20F4               	addwfc	prodh,w,c
  3699  000C80  6E33               	movwf	_MC3_TIME_L+1,c
  3700                           
  3701                           ;PARM_CL.c: 59: }
  3702  000C82  0012               	return	
  3703  000C84                     l3191:
  3704                           
  3705                           ;PARM_CL.c: 60: else printf("MC3_PARM Write Fail!\r\n");
  3706  000C84  0E40               	movlw	low STR_24
  3707  000C86  6E4E               	movwf	printf@f,c
  3708  000C88  0EFD               	movlw	high STR_24
  3709  000C8A  6E4F               	movwf	printf@f+1,c
  3710  000C8C  ECCA  F006         	call	_printf	;wreg free
  3711  000C90  0012               	return	
  3712  000C92                     __end_of_MC3_PARM_CL:
  3713                           	opt stack 0
  3714                           tblptru	equ	0xFF8
  3715                           tblptrh	equ	0xFF7
  3716                           tblptrl	equ	0xFF6
  3717                           tablat	equ	0xFF5
  3718                           prodh	equ	0xFF4
  3719                           prodl	equ	0xFF3
  3720                           postinc0	equ	0xFEE
  3721                           wreg	equ	0xFE8
  3722                           indf1	equ	0xFE7
  3723                           postdec1	equ	0xFE5
  3724                           fsr1h	equ	0xFE2
  3725                           fsr1l	equ	0xFE1
  3726                           indf2	equ	0xFDF
  3727                           fsr2h	equ	0xFDA
  3728                           fsr2l	equ	0xFD9
  3729                           status	equ	0xFD8
  3730                           
  3731 ;; *************** function _MC2_PARM_CL *****************
  3732 ;; Defined at:
  3733 ;;		line 36 in file "PARM_CL.c"
  3734 ;; Parameters:    Size  Location     Type
  3735 ;;		None
  3736 ;; Auto vars:     Size  Location     Type
  3737 ;;		None
  3738 ;; Return value:  Size  Location     Type
  3739 ;;                  1    wreg      void 
  3740 ;; Registers used:
  3741 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3742 ;; Tracked objects:
  3743 ;;		On entry : 0/0
  3744 ;;		On exit  : 0/0
  3745 ;;		Unchanged: 0/0
  3746 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  3747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3751 ;;Total ram usage:        0 bytes
  3752 ;; Hardware stack levels used:    1
  3753 ;; Hardware stack levels required when called:    5
  3754 ;; This function calls:
  3755 ;;		_printf
  3756 ;; This function is called by:
  3757 ;;		_Usart_CL
  3758 ;; This function uses a non-reentrant model
  3759 ;;
  3760                           
  3761                           	psect	text9
  3762  000C92                     __ptext9:
  3763                           	opt stack 0
  3764  000C92                     _MC2_PARM_CL:
  3765                           	opt stack 24
  3766                           
  3767                           ;PARM_CL.c: 38: if( MC2_Start_BZ==0)
  3768                           
  3769                           ;incstack = 0
  3770  000C92  B221               	btfsc	33,1,c	;volatile
  3771  000C94  D01B               	goto	l3183
  3772                           
  3773                           ;PARM_CL.c: 39: {
  3774                           ;PARM_CL.c: 40: MC2_Channel= MC2_PARM[2];
  3775  000C96  C072  F05C         	movff	_MC2_PARM+2,_MC2_Channel
  3776                           
  3777                           ;PARM_CL.c: 41: MC2_FZ_C= MC2_PARM[3];
  3778  000C9A  C073  F007         	movff	_MC2_PARM+3,_MC2_FZ_C
  3779                           
  3780                           ;PARM_CL.c: 42: MC2_TIME_H = MC2_PARM[4]*255+MC2_PARM[5];
  3781  000C9E  0100               	movlb	0	; () banked
  3782  000CA0  5174               	movf	(_MC2_PARM+4)& (0+255),w,b
  3783  000CA2  0DFF               	mullw	255
  3784  000CA4  0100               	movlb	0	; () banked
  3785  000CA6  5175               	movf	(_MC2_PARM+5)& (0+255),w,b
  3786  000CA8  24F3               	addwf	prodl,w,c
  3787  000CAA  6E01               	movwf	_MC2_TIME_H,c
  3788  000CAC  0100               	movlb	0	; () banked
  3789  000CAE  0E00               	movlw	0
  3790  000CB0  20F4               	addwfc	prodh,w,c
  3791  000CB2  6E02               	movwf	_MC2_TIME_H+1,c
  3792                           
  3793                           ;PARM_CL.c: 43: MC2_TIME_L = MC2_PARM[6]*255+MC2_PARM[7];
  3794  000CB4  0100               	movlb	0	; () banked
  3795  000CB6  5176               	movf	(_MC2_PARM+6)& (0+255),w,b
  3796  000CB8  0DFF               	mullw	255
  3797  000CBA  0100               	movlb	0	; () banked
  3798  000CBC  5177               	movf	(_MC2_PARM+7)& (0+255),w,b
  3799  000CBE  24F3               	addwf	prodl,w,c
  3800  000CC0  6E34               	movwf	_MC2_TIME_L,c
  3801  000CC2  0100               	movlb	0	; () banked
  3802  000CC4  0E00               	movlw	0
  3803  000CC6  20F4               	addwfc	prodh,w,c
  3804  000CC8  6E35               	movwf	_MC2_TIME_L+1,c
  3805                           
  3806                           ;PARM_CL.c: 45: }
  3807  000CCA  0012               	return	
  3808  000CCC                     l3183:
  3809                           
  3810                           ;PARM_CL.c: 46: else printf("MC2_PARM Write Fail!\r\n");
  3811  000CCC  0E29               	movlw	low STR_23
  3812  000CCE  6E4E               	movwf	printf@f,c
  3813  000CD0  0EFD               	movlw	high STR_23
  3814  000CD2  6E4F               	movwf	printf@f+1,c
  3815  000CD4  ECCA  F006         	call	_printf	;wreg free
  3816  000CD8  0012               	return	
  3817  000CDA                     __end_of_MC2_PARM_CL:
  3818                           	opt stack 0
  3819                           tblptru	equ	0xFF8
  3820                           tblptrh	equ	0xFF7
  3821                           tblptrl	equ	0xFF6
  3822                           tablat	equ	0xFF5
  3823                           prodh	equ	0xFF4
  3824                           prodl	equ	0xFF3
  3825                           postinc0	equ	0xFEE
  3826                           wreg	equ	0xFE8
  3827                           indf1	equ	0xFE7
  3828                           postdec1	equ	0xFE5
  3829                           fsr1h	equ	0xFE2
  3830                           fsr1l	equ	0xFE1
  3831                           indf2	equ	0xFDF
  3832                           fsr2h	equ	0xFDA
  3833                           fsr2l	equ	0xFD9
  3834                           status	equ	0xFD8
  3835                           
  3836 ;; *************** function _MC1_PARM_CL *****************
  3837 ;; Defined at:
  3838 ;;		line 20 in file "PARM_CL.c"
  3839 ;; Parameters:    Size  Location     Type
  3840 ;;		None
  3841 ;; Auto vars:     Size  Location     Type
  3842 ;;		None
  3843 ;; Return value:  Size  Location     Type
  3844 ;;                  1    wreg      void 
  3845 ;; Registers used:
  3846 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3847 ;; Tracked objects:
  3848 ;;		On entry : 0/0
  3849 ;;		On exit  : 0/0
  3850 ;;		Unchanged: 0/0
  3851 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  3852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3855 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3856 ;;Total ram usage:        0 bytes
  3857 ;; Hardware stack levels used:    1
  3858 ;; Hardware stack levels required when called:    5
  3859 ;; This function calls:
  3860 ;;		_printf
  3861 ;; This function is called by:
  3862 ;;		_Usart_CL
  3863 ;; This function uses a non-reentrant model
  3864 ;;
  3865                           
  3866                           	psect	text10
  3867  000CDA                     __ptext10:
  3868                           	opt stack 0
  3869  000CDA                     _MC1_PARM_CL:
  3870                           	opt stack 24
  3871                           
  3872                           ;PARM_CL.c: 23: if( MC1_Start_BZ==0)
  3873                           
  3874                           ;incstack = 0
  3875  000CDA  B021               	btfsc	33,0,c	;volatile
  3876  000CDC  D01B               	goto	l3175
  3877                           
  3878                           ;PARM_CL.c: 24: {
  3879                           ;PARM_CL.c: 26: MC1_Channel= MC1_PARM[2];
  3880  000CDE  C07A  F05D         	movff	_MC1_PARM+2,_MC1_Channel
  3881                           
  3882                           ;PARM_CL.c: 27: MC1_FZ_C= MC1_PARM[3];
  3883  000CE2  C07B  F008         	movff	_MC1_PARM+3,_MC1_FZ_C
  3884                           
  3885                           ;PARM_CL.c: 28: MC1_TIME_H = MC1_PARM[4]*255+MC1_PARM[5];
  3886  000CE6  0100               	movlb	0	; () banked
  3887  000CE8  517C               	movf	(_MC1_PARM+4)& (0+255),w,b
  3888  000CEA  0DFF               	mullw	255
  3889  000CEC  0100               	movlb	0	; () banked
  3890  000CEE  517D               	movf	(_MC1_PARM+5)& (0+255),w,b
  3891  000CF0  24F3               	addwf	prodl,w,c
  3892  000CF2  6E03               	movwf	_MC1_TIME_H,c
  3893  000CF4  0100               	movlb	0	; () banked
  3894  000CF6  0E00               	movlw	0
  3895  000CF8  20F4               	addwfc	prodh,w,c
  3896  000CFA  6E04               	movwf	_MC1_TIME_H+1,c
  3897                           
  3898                           ;PARM_CL.c: 29: MC1_TIME_L = MC1_PARM[6]*255+MC1_PARM[7];
  3899  000CFC  0100               	movlb	0	; () banked
  3900  000CFE  517E               	movf	(_MC1_PARM+6)& (0+255),w,b
  3901  000D00  0DFF               	mullw	255
  3902  000D02  0100               	movlb	0	; () banked
  3903  000D04  517F               	movf	(_MC1_PARM+7)& (0+255),w,b
  3904  000D06  24F3               	addwf	prodl,w,c
  3905  000D08  6E36               	movwf	_MC1_TIME_L,c
  3906  000D0A  0100               	movlb	0	; () banked
  3907  000D0C  0E00               	movlw	0
  3908  000D0E  20F4               	addwfc	prodh,w,c
  3909  000D10  6E37               	movwf	_MC1_TIME_L+1,c
  3910                           
  3911                           ;PARM_CL.c: 32: }
  3912  000D12  0012               	return	
  3913  000D14                     l3175:
  3914                           
  3915                           ;PARM_CL.c: 33: else printf("MC1_PARM Write Fail!\r\n");
  3916  000D14  0E12               	movlw	low STR_22
  3917  000D16  6E4E               	movwf	printf@f,c
  3918  000D18  0EFD               	movlw	high STR_22
  3919  000D1A  6E4F               	movwf	printf@f+1,c
  3920  000D1C  ECCA  F006         	call	_printf	;wreg free
  3921  000D20  0012               	return	
  3922  000D22                     __end_of_MC1_PARM_CL:
  3923                           	opt stack 0
  3924                           tblptru	equ	0xFF8
  3925                           tblptrh	equ	0xFF7
  3926                           tblptrl	equ	0xFF6
  3927                           tablat	equ	0xFF5
  3928                           prodh	equ	0xFF4
  3929                           prodl	equ	0xFF3
  3930                           postinc0	equ	0xFEE
  3931                           wreg	equ	0xFE8
  3932                           indf1	equ	0xFE7
  3933                           postdec1	equ	0xFE5
  3934                           fsr1h	equ	0xFE2
  3935                           fsr1l	equ	0xFE1
  3936                           indf2	equ	0xFDF
  3937                           fsr2h	equ	0xFDA
  3938                           fsr2l	equ	0xFD9
  3939                           status	equ	0xFD8
  3940                           
  3941 ;; *************** function _UartInit *****************
  3942 ;; Defined at:
  3943 ;;		line 12 in file "USART1.c"
  3944 ;; Parameters:    Size  Location     Type
  3945 ;;		None
  3946 ;; Auto vars:     Size  Location     Type
  3947 ;;		None
  3948 ;; Return value:  Size  Location     Type
  3949 ;;                  1    wreg      void 
  3950 ;; Registers used:
  3951 ;;		wreg, status,2
  3952 ;; Tracked objects:
  3953 ;;		On entry : 0/0
  3954 ;;		On exit  : 0/0
  3955 ;;		Unchanged: 0/0
  3956 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  3957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3960 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3961 ;;Total ram usage:        0 bytes
  3962 ;; Hardware stack levels used:    1
  3963 ;; Hardware stack levels required when called:    3
  3964 ;; This function calls:
  3965 ;;		Nothing
  3966 ;; This function is called by:
  3967 ;;		_main
  3968 ;; This function uses a non-reentrant model
  3969 ;;
  3970                           
  3971                           	psect	text11
  3972  000DE4                     __ptext11:
  3973                           	opt stack 0
  3974  000DE4                     _UartInit:
  3975                           	opt stack 27
  3976                           
  3977                           ;USART1.c: 14: TRISG=0xFF;
  3978                           
  3979                           ;incstack = 0
  3980  000DE4  6898               	setf	3992,c	;volatile
  3981                           
  3982                           ;USART1.c: 15: RCSTA1bits.SPEN=1;
  3983  000DE6  8EAB               	bsf	4011,7,c	;volatile
  3984                           
  3985                           ;USART1.c: 17: TXSTA1bits.SYNC=0;
  3986  000DE8  98AC               	bcf	4012,4,c	;volatile
  3987                           
  3988                           ;USART1.c: 18: TXSTA1bits.TX9=0;
  3989  000DEA  9CAC               	bcf	4012,6,c	;volatile
  3990                           
  3991                           ;USART1.c: 19: TXSTA1bits.TXEN=1;
  3992  000DEC  8AAC               	bsf	4012,5,c	;volatile
  3993                           
  3994                           ;USART1.c: 20: TXSTA1bits.BRGH=1;
  3995  000DEE  84AC               	bsf	4012,2,c	;volatile
  3996                           
  3997                           ;USART1.c: 21: TXSTA1bits.TXEN=1;
  3998  000DF0  8AAC               	bsf	4012,5,c	;volatile
  3999                           
  4000                           ;USART1.c: 23: RCSTA1bits.RX9=0;
  4001  000DF2  9CAB               	bcf	4011,6,c	;volatile
  4002                           
  4003                           ;USART1.c: 24: RCSTA1bits.CREN=1;
  4004  000DF4  88AB               	bsf	4011,4,c	;volatile
  4005                           
  4006                           ;USART1.c: 26: BAUDCON1bits.BRG16=0;
  4007  000DF6  96A7               	bcf	4007,3,c	;volatile
  4008                           
  4009                           ;USART1.c: 27: SPBRG1=68;
  4010  000DF8  0E44               	movlw	68
  4011  000DFA  6EAF               	movwf	4015,c	;volatile
  4012                           
  4013                           ;USART1.c: 28: INTCON=0;
  4014  000DFC  0E00               	movlw	0
  4015  000DFE  6EF2               	movwf	intcon,c	;volatile
  4016                           
  4017                           ;USART1.c: 30: INTCONbits.GIE=1;
  4018  000E00  8EF2               	bsf	intcon,7,c	;volatile
  4019                           
  4020                           ;USART1.c: 31: INTCONbits.PEIE=1;
  4021  000E02  8CF2               	bsf	intcon,6,c	;volatile
  4022                           
  4023                           ;USART1.c: 32: PIE1bits.RCIE=1;
  4024  000E04  8A9D               	bsf	3997,5,c	;volatile
  4025  000E06  0012               	return		;funcret
  4026  000E08                     __end_of_UartInit:
  4027                           	opt stack 0
  4028                           tblptru	equ	0xFF8
  4029                           tblptrh	equ	0xFF7
  4030                           tblptrl	equ	0xFF6
  4031                           tablat	equ	0xFF5
  4032                           prodh	equ	0xFF4
  4033                           prodl	equ	0xFF3
  4034                           intcon	equ	0xFF2
  4035                           postinc0	equ	0xFEE
  4036                           wreg	equ	0xFE8
  4037                           indf1	equ	0xFE7
  4038                           postdec1	equ	0xFE5
  4039                           fsr1h	equ	0xFE2
  4040                           fsr1l	equ	0xFE1
  4041                           indf2	equ	0xFDF
  4042                           fsr2h	equ	0xFDA
  4043                           fsr2l	equ	0xFD9
  4044                           status	equ	0xFD8
  4045                           
  4046 ;; *************** function _MC_END_EVENT *****************
  4047 ;; Defined at:
  4048 ;;		line 134 in file "MC_EVENT.c"
  4049 ;; Parameters:    Size  Location     Type
  4050 ;;		None
  4051 ;; Auto vars:     Size  Location     Type
  4052 ;;		None
  4053 ;; Return value:  Size  Location     Type
  4054 ;;                  1    wreg      void 
  4055 ;; Registers used:
  4056 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4057 ;; Tracked objects:
  4058 ;;		On entry : 0/0
  4059 ;;		On exit  : 0/0
  4060 ;;		Unchanged: 0/0
  4061 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4066 ;;Total ram usage:        0 bytes
  4067 ;; Hardware stack levels used:    1
  4068 ;; Hardware stack levels required when called:    5
  4069 ;; This function calls:
  4070 ;;		_printf
  4071 ;; This function is called by:
  4072 ;;		_main
  4073 ;; This function uses a non-reentrant model
  4074 ;;
  4075                           
  4076                           	psect	text12
  4077  000B6E                     __ptext12:
  4078                           	opt stack 0
  4079  000B6E                     _MC_END_EVENT:
  4080                           	opt stack 25
  4081                           
  4082                           ;MC_EVENT.c: 136: if(MC1_END_FLAT)
  4083                           
  4084                           ;incstack = 0
  4085  000B6E  A822               	btfss	34,4,c	;volatile
  4086  000B70  D007               	goto	l3469
  4087                           
  4088                           ;MC_EVENT.c: 137: { MC1_END_FLAT=0;
  4089  000B72  9822               	bcf	34,4,c	;volatile
  4090                           
  4091                           ;MC_EVENT.c: 138: printf("MC1_End success!\r\n");
  4092  000B74  0E66               	movlw	low STR_18
  4093  000B76  6E4E               	movwf	printf@f,c
  4094  000B78  0EFE               	movlw	high STR_18
  4095  000B7A  6E4F               	movwf	printf@f+1,c
  4096  000B7C  ECCA  F006         	call	_printf	;wreg free
  4097  000B80                     l3469:
  4098                           
  4099                           ;MC_EVENT.c: 139: }
  4100                           ;MC_EVENT.c: 140: if(MC2_END_FLAT)
  4101  000B80  AA22               	btfss	34,5,c	;volatile
  4102  000B82  D007               	goto	l3475
  4103                           
  4104                           ;MC_EVENT.c: 141: { MC2_END_FLAT=0;
  4105  000B84  9A22               	bcf	34,5,c	;volatile
  4106                           
  4107                           ;MC_EVENT.c: 142: printf("MC2_End success!\r\n");
  4108  000B86  0E79               	movlw	low STR_19
  4109  000B88  6E4E               	movwf	printf@f,c
  4110  000B8A  0EFE               	movlw	high STR_19
  4111  000B8C  6E4F               	movwf	printf@f+1,c
  4112  000B8E  ECCA  F006         	call	_printf	;wreg free
  4113  000B92                     l3475:
  4114                           
  4115                           ;MC_EVENT.c: 143: }
  4116                           ;MC_EVENT.c: 144: if(MC3_END_FLAT)
  4117  000B92  AC22               	btfss	34,6,c	;volatile
  4118  000B94  D007               	goto	l3481
  4119                           
  4120                           ;MC_EVENT.c: 145: { MC3_END_FLAT=0;
  4121  000B96  9C22               	bcf	34,6,c	;volatile
  4122                           
  4123                           ;MC_EVENT.c: 146: printf("MC3_End success!\r\n");
  4124  000B98  0E8C               	movlw	low STR_20
  4125  000B9A  6E4E               	movwf	printf@f,c
  4126  000B9C  0EFE               	movlw	high STR_20
  4127  000B9E  6E4F               	movwf	printf@f+1,c
  4128  000BA0  ECCA  F006         	call	_printf	;wreg free
  4129  000BA4                     l3481:
  4130                           
  4131                           ;MC_EVENT.c: 147: }
  4132                           ;MC_EVENT.c: 148: if(MC4_END_FLAT)
  4133  000BA4  AE22               	btfss	34,7,c	;volatile
  4134  000BA6  0012               	return	
  4135                           
  4136                           ;MC_EVENT.c: 149: { MC4_END_FLAT=0;
  4137  000BA8  9E22               	bcf	34,7,c	;volatile
  4138                           
  4139                           ;MC_EVENT.c: 150: printf("MC4_End success!\r\n");
  4140  000BAA  0E9F               	movlw	low STR_21
  4141  000BAC  6E4E               	movwf	printf@f,c
  4142  000BAE  0EFE               	movlw	high STR_21
  4143  000BB0  6E4F               	movwf	printf@f+1,c
  4144  000BB2  ECCA  F006         	call	_printf	;wreg free
  4145  000BB6  0012               	return	
  4146  000BB8                     __end_of_MC_END_EVENT:
  4147                           	opt stack 0
  4148                           tblptru	equ	0xFF8
  4149                           tblptrh	equ	0xFF7
  4150                           tblptrl	equ	0xFF6
  4151                           tablat	equ	0xFF5
  4152                           prodh	equ	0xFF4
  4153                           prodl	equ	0xFF3
  4154                           intcon	equ	0xFF2
  4155                           postinc0	equ	0xFEE
  4156                           wreg	equ	0xFE8
  4157                           indf1	equ	0xFE7
  4158                           postdec1	equ	0xFE5
  4159                           fsr1h	equ	0xFE2
  4160                           fsr1l	equ	0xFE1
  4161                           indf2	equ	0xFDF
  4162                           fsr2h	equ	0xFDA
  4163                           fsr2l	equ	0xFD9
  4164                           status	equ	0xFD8
  4165                           
  4166 ;; *************** function _MC4_IO_SWP *****************
  4167 ;; Defined at:
  4168 ;;		line 262 in file "IO_SWP.c"
  4169 ;; Parameters:    Size  Location     Type
  4170 ;;		None
  4171 ;; Auto vars:     Size  Location     Type
  4172 ;;		None
  4173 ;; Return value:  Size  Location     Type
  4174 ;;                  1    wreg      void 
  4175 ;; Registers used:
  4176 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4177 ;; Tracked objects:
  4178 ;;		On entry : 0/0
  4179 ;;		On exit  : 0/0
  4180 ;;		Unchanged: 0/0
  4181 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4185 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4186 ;;Total ram usage:        0 bytes
  4187 ;; Hardware stack levels used:    1
  4188 ;; Hardware stack levels required when called:    5
  4189 ;; This function calls:
  4190 ;;		_printf
  4191 ;; This function is called by:
  4192 ;;		_main
  4193 ;; This function uses a non-reentrant model
  4194 ;;
  4195                           
  4196                           	psect	text13
  4197  0009BA                     __ptext13:
  4198                           	opt stack 0
  4199  0009BA                     _MC4_IO_SWP:
  4200                           	opt stack 25
  4201                           
  4202                           ;IO_SWP.c: 264: switch (MC4_Channel)
  4203                           
  4204                           ;incstack = 0
  4205  0009BA  D013               	goto	l3459
  4206  0009BC                     l686:
  4207                           
  4208                           ;IO_SWP.c: 267: LATC6=!LATC6;
  4209  0009BC  BC8B               	btfsc	3979,6,c	;volatile
  4210  0009BE  D002               	goto	u5090
  4211  0009C0  8C8B               	bsf	3979,6,c	;volatile
  4212  0009C2  D017               	goto	l687
  4213  0009C4                     u5090:
  4214  0009C4  9C8B               	bcf	3979,6,c	;volatile
  4215                           
  4216                           ;IO_SWP.c: 268: break;
  4217  0009C6  D015               	goto	l687
  4218  0009C8                     l688:
  4219                           
  4220                           ;IO_SWP.c: 270: LATC7=!LATC7;
  4221  0009C8  BE8B               	btfsc	3979,7,c	;volatile
  4222  0009CA  D002               	goto	u5110
  4223  0009CC  8E8B               	bsf	3979,7,c	;volatile
  4224  0009CE  D011               	goto	l687
  4225  0009D0                     u5110:
  4226  0009D0  9E8B               	bcf	3979,7,c	;volatile
  4227                           
  4228                           ;IO_SWP.c: 271: break;
  4229  0009D2  D00F               	goto	l687
  4230  0009D4                     l3455:
  4231                           
  4232                           ;IO_SWP.c: 273: printf("½ûÓÃMC4Í¨µÀ!\r\n");
  4233  0009D4  0EEF               	movlw	low STR_5
  4234  0009D6  6E4E               	movwf	printf@f,c
  4235  0009D8  0EFF               	movlw	high STR_5
  4236  0009DA  6E4F               	movwf	printf@f+1,c
  4237  0009DC  ECCA  F006         	call	_printf	;wreg free
  4238                           
  4239                           ;IO_SWP.c: 275: }
  4240                           
  4241                           ;IO_SWP.c: 274: break;
  4242  0009E0  D008               	goto	l687
  4243  0009E2                     l3459:
  4244  0009E2  505A               	movf	_MC4_Channel,w,c
  4245                           
  4246                           ; Switch size 1, requested type "space"
  4247                           ; Number of cases is 2, Range of values is 64 to 128
  4248                           ; switch strategies available:
  4249                           ; Name         Instructions Cycles
  4250                           ; simple_byte            7     4 (average)
  4251                           ;	Chosen strategy is simple_byte
  4252  0009E4  0A40               	xorlw	64	; case 64
  4253  0009E6  B4D8               	btfsc	status,2,c
  4254  0009E8  D7E9               	goto	l686
  4255  0009EA  0AC0               	xorlw	192	; case 128
  4256  0009EC  B4D8               	btfsc	status,2,c
  4257  0009EE  D7EC               	goto	l688
  4258  0009F0  D7F1               	goto	l3455
  4259  0009F2                     l687:
  4260                           
  4261                           ;IO_SWP.c: 277: if(MC4_IO_STATE==1)
  4262  0009F2  A622               	btfss	34,3,c	;volatile
  4263  0009F4  D007               	goto	l690
  4264                           
  4265                           ;IO_SWP.c: 278: {
  4266                           ;IO_SWP.c: 279: MC4_SwapDelay=MC4_TIME_L;
  4267  0009F6  C030  F028         	movff	_MC4_TIME_L,_MC4_SwapDelay
  4268  0009FA  C031  F029         	movff	_MC4_TIME_L+1,_MC4_SwapDelay+1
  4269                           
  4270                           ;IO_SWP.c: 280: MC4_IO_STATE=0;
  4271  0009FE  9622               	bcf	34,3,c	;volatile
  4272                           
  4273                           ;IO_SWP.c: 281: MC4_FZ_BZ=0;
  4274  000A00  9E21               	bcf	33,7,c	;volatile
  4275                           
  4276                           ;IO_SWP.c: 283: }
  4277  000A02  0012               	return	
  4278  000A04                     l690:
  4279                           
  4280                           ;IO_SWP.c: 284: else
  4281                           ;IO_SWP.c: 285: {
  4282                           ;IO_SWP.c: 287: MC4_SwapDelay=MC4_TIME_H;
  4283  000A04  C038  F028         	movff	_MC4_TIME_H,_MC4_SwapDelay
  4284  000A08  C039  F029         	movff	_MC4_TIME_H+1,_MC4_SwapDelay+1
  4285                           
  4286                           ;IO_SWP.c: 288: MC4_IO_STATE=1;
  4287  000A0C  8622               	bsf	34,3,c	;volatile
  4288                           
  4289                           ;IO_SWP.c: 289: MC4_FZ_BZ=0;
  4290  000A0E  9E21               	bcf	33,7,c	;volatile
  4291  000A10  0012               	return	
  4292  000A12                     __end_of_MC4_IO_SWP:
  4293                           	opt stack 0
  4294                           tblptru	equ	0xFF8
  4295                           tblptrh	equ	0xFF7
  4296                           tblptrl	equ	0xFF6
  4297                           tablat	equ	0xFF5
  4298                           prodh	equ	0xFF4
  4299                           prodl	equ	0xFF3
  4300                           intcon	equ	0xFF2
  4301                           postinc0	equ	0xFEE
  4302                           wreg	equ	0xFE8
  4303                           indf1	equ	0xFE7
  4304                           postdec1	equ	0xFE5
  4305                           fsr1h	equ	0xFE2
  4306                           fsr1l	equ	0xFE1
  4307                           indf2	equ	0xFDF
  4308                           fsr2h	equ	0xFDA
  4309                           fsr2l	equ	0xFD9
  4310                           status	equ	0xFD8
  4311                           
  4312 ;; *************** function _MC3_IO_SWP *****************
  4313 ;; Defined at:
  4314 ;;		line 210 in file "IO_SWP.c"
  4315 ;; Parameters:    Size  Location     Type
  4316 ;;		None
  4317 ;; Auto vars:     Size  Location     Type
  4318 ;;		None
  4319 ;; Return value:  Size  Location     Type
  4320 ;;                  1    wreg      void 
  4321 ;; Registers used:
  4322 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4323 ;; Tracked objects:
  4324 ;;		On entry : 0/0
  4325 ;;		On exit  : 0/0
  4326 ;;		Unchanged: 0/0
  4327 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4332 ;;Total ram usage:        0 bytes
  4333 ;; Hardware stack levels used:    1
  4334 ;; Hardware stack levels required when called:    5
  4335 ;; This function calls:
  4336 ;;		_printf
  4337 ;; This function is called by:
  4338 ;;		_main
  4339 ;; This function uses a non-reentrant model
  4340 ;;
  4341                           
  4342                           	psect	text14
  4343  000A12                     __ptext14:
  4344                           	opt stack 0
  4345  000A12                     _MC3_IO_SWP:
  4346                           	opt stack 25
  4347                           
  4348                           ;IO_SWP.c: 212: switch (MC3_Channel)
  4349                           
  4350                           ;incstack = 0
  4351  000A12  D013               	goto	l3449
  4352  000A14                     l676:
  4353                           
  4354                           ;IO_SWP.c: 227: LATC4=!LATC4;
  4355  000A14  B88B               	btfsc	3979,4,c	;volatile
  4356  000A16  D002               	goto	u5040
  4357  000A18  888B               	bsf	3979,4,c	;volatile
  4358  000A1A  D017               	goto	l677
  4359  000A1C                     u5040:
  4360  000A1C  988B               	bcf	3979,4,c	;volatile
  4361                           
  4362                           ;IO_SWP.c: 228: break;
  4363  000A1E  D015               	goto	l677
  4364  000A20                     l678:
  4365                           
  4366                           ;IO_SWP.c: 230: LATC5=!LATC5;
  4367  000A20  BA8B               	btfsc	3979,5,c	;volatile
  4368  000A22  D002               	goto	u5060
  4369  000A24  8A8B               	bsf	3979,5,c	;volatile
  4370  000A26  D011               	goto	l677
  4371  000A28                     u5060:
  4372  000A28  9A8B               	bcf	3979,5,c	;volatile
  4373                           
  4374                           ;IO_SWP.c: 231: break;
  4375  000A2A  D00F               	goto	l677
  4376  000A2C                     l3445:
  4377                           
  4378                           ;IO_SWP.c: 239: printf("½ûÓÃMC3Í¨µÀ!\r\n");
  4379  000A2C  0EE0               	movlw	low STR_4
  4380  000A2E  6E4E               	movwf	printf@f,c
  4381  000A30  0EFF               	movlw	high STR_4
  4382  000A32  6E4F               	movwf	printf@f+1,c
  4383  000A34  ECCA  F006         	call	_printf	;wreg free
  4384                           
  4385                           ;IO_SWP.c: 241: }
  4386                           
  4387                           ;IO_SWP.c: 240: break;
  4388  000A38  D008               	goto	l677
  4389  000A3A                     l3449:
  4390  000A3A  505B               	movf	_MC3_Channel,w,c
  4391                           
  4392                           ; Switch size 1, requested type "space"
  4393                           ; Number of cases is 2, Range of values is 16 to 32
  4394                           ; switch strategies available:
  4395                           ; Name         Instructions Cycles
  4396                           ; simple_byte            7     4 (average)
  4397                           ;	Chosen strategy is simple_byte
  4398  000A3C  0A10               	xorlw	16	; case 16
  4399  000A3E  B4D8               	btfsc	status,2,c
  4400  000A40  D7E9               	goto	l676
  4401  000A42  0A30               	xorlw	48	; case 32
  4402  000A44  B4D8               	btfsc	status,2,c
  4403  000A46  D7EC               	goto	l678
  4404  000A48  D7F1               	goto	l3445
  4405  000A4A                     l677:
  4406                           
  4407                           ;IO_SWP.c: 243: if(MC3_IO_STATE==1)
  4408  000A4A  A422               	btfss	34,2,c	;volatile
  4409  000A4C  D007               	goto	l680
  4410                           
  4411                           ;IO_SWP.c: 244: {
  4412                           ;IO_SWP.c: 245: MC3_SwapDelay=MC3_TIME_L;
  4413  000A4E  C032  F02A         	movff	_MC3_TIME_L,_MC3_SwapDelay
  4414  000A52  C033  F02B         	movff	_MC3_TIME_L+1,_MC3_SwapDelay+1
  4415                           
  4416                           ;IO_SWP.c: 246: MC3_IO_STATE=0;
  4417  000A56  9422               	bcf	34,2,c	;volatile
  4418                           
  4419                           ;IO_SWP.c: 247: MC3_FZ_BZ=0;
  4420  000A58  9C21               	bcf	33,6,c	;volatile
  4421                           
  4422                           ;IO_SWP.c: 248: }
  4423  000A5A  0012               	return	
  4424  000A5C                     l680:
  4425                           
  4426                           ;IO_SWP.c: 249: else
  4427                           ;IO_SWP.c: 250: {
  4428                           ;IO_SWP.c: 252: MC3_SwapDelay=MC3_TIME_H;
  4429  000A5C  C03A  F02A         	movff	_MC3_TIME_H,_MC3_SwapDelay
  4430  000A60  C03B  F02B         	movff	_MC3_TIME_H+1,_MC3_SwapDelay+1
  4431                           
  4432                           ;IO_SWP.c: 253: MC3_IO_STATE=1;
  4433  000A64  8422               	bsf	34,2,c	;volatile
  4434                           
  4435                           ;IO_SWP.c: 254: MC3_FZ_BZ=0;
  4436  000A66  9C21               	bcf	33,6,c	;volatile
  4437  000A68  0012               	return	
  4438  000A6A                     __end_of_MC3_IO_SWP:
  4439                           	opt stack 0
  4440                           tblptru	equ	0xFF8
  4441                           tblptrh	equ	0xFF7
  4442                           tblptrl	equ	0xFF6
  4443                           tablat	equ	0xFF5
  4444                           prodh	equ	0xFF4
  4445                           prodl	equ	0xFF3
  4446                           intcon	equ	0xFF2
  4447                           postinc0	equ	0xFEE
  4448                           wreg	equ	0xFE8
  4449                           indf1	equ	0xFE7
  4450                           postdec1	equ	0xFE5
  4451                           fsr1h	equ	0xFE2
  4452                           fsr1l	equ	0xFE1
  4453                           indf2	equ	0xFDF
  4454                           fsr2h	equ	0xFDA
  4455                           fsr2l	equ	0xFD9
  4456                           status	equ	0xFD8
  4457                           
  4458 ;; *************** function _MC2_IO_SWP *****************
  4459 ;; Defined at:
  4460 ;;		line 159 in file "IO_SWP.c"
  4461 ;; Parameters:    Size  Location     Type
  4462 ;;		None
  4463 ;; Auto vars:     Size  Location     Type
  4464 ;;		None
  4465 ;; Return value:  Size  Location     Type
  4466 ;;                  1    wreg      void 
  4467 ;; Registers used:
  4468 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4469 ;; Tracked objects:
  4470 ;;		On entry : 0/0
  4471 ;;		On exit  : 0/0
  4472 ;;		Unchanged: 0/0
  4473 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4477 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4478 ;;Total ram usage:        0 bytes
  4479 ;; Hardware stack levels used:    1
  4480 ;; Hardware stack levels required when called:    5
  4481 ;; This function calls:
  4482 ;;		_printf
  4483 ;; This function is called by:
  4484 ;;		_main
  4485 ;; This function uses a non-reentrant model
  4486 ;;
  4487                           
  4488                           	psect	text15
  4489  000A6A                     __ptext15:
  4490                           	opt stack 0
  4491  000A6A                     _MC2_IO_SWP:
  4492                           	opt stack 25
  4493                           
  4494                           ;IO_SWP.c: 161: switch (MC2_Channel)
  4495                           
  4496                           ;incstack = 0
  4497  000A6A  D013               	goto	l3439
  4498  000A6C                     l666:
  4499                           
  4500                           ;IO_SWP.c: 170: LATC2=!LATC2;
  4501  000A6C  B48B               	btfsc	3979,2,c	;volatile
  4502  000A6E  D002               	goto	u4990
  4503  000A70  848B               	bsf	3979,2,c	;volatile
  4504  000A72  D017               	goto	l667
  4505  000A74                     u4990:
  4506  000A74  948B               	bcf	3979,2,c	;volatile
  4507                           
  4508                           ;IO_SWP.c: 171: break;
  4509  000A76  D015               	goto	l667
  4510  000A78                     l668:
  4511                           
  4512                           ;IO_SWP.c: 173: LATC3=!LATC3;
  4513  000A78  B68B               	btfsc	3979,3,c	;volatile
  4514  000A7A  D002               	goto	u5010
  4515  000A7C  868B               	bsf	3979,3,c	;volatile
  4516  000A7E  D011               	goto	l667
  4517  000A80                     u5010:
  4518  000A80  968B               	bcf	3979,3,c	;volatile
  4519                           
  4520                           ;IO_SWP.c: 174: break;
  4521  000A82  D00F               	goto	l667
  4522  000A84                     l3435:
  4523                           
  4524                           ;IO_SWP.c: 188: printf("½ûÓÃMC2Í¨µÀ!\r\n");
  4525  000A84  0ED1               	movlw	low STR_3
  4526  000A86  6E4E               	movwf	printf@f,c
  4527  000A88  0EFF               	movlw	high STR_3
  4528  000A8A  6E4F               	movwf	printf@f+1,c
  4529  000A8C  ECCA  F006         	call	_printf	;wreg free
  4530                           
  4531                           ;IO_SWP.c: 190: }
  4532                           
  4533                           ;IO_SWP.c: 189: break;
  4534  000A90  D008               	goto	l667
  4535  000A92                     l3439:
  4536  000A92  505C               	movf	_MC2_Channel,w,c
  4537                           
  4538                           ; Switch size 1, requested type "space"
  4539                           ; Number of cases is 2, Range of values is 4 to 8
  4540                           ; switch strategies available:
  4541                           ; Name         Instructions Cycles
  4542                           ; simple_byte            7     4 (average)
  4543                           ;	Chosen strategy is simple_byte
  4544  000A94  0A04               	xorlw	4	; case 4
  4545  000A96  B4D8               	btfsc	status,2,c
  4546  000A98  D7E9               	goto	l666
  4547  000A9A  0A0C               	xorlw	12	; case 8
  4548  000A9C  B4D8               	btfsc	status,2,c
  4549  000A9E  D7EC               	goto	l668
  4550  000AA0  D7F1               	goto	l3435
  4551  000AA2                     l667:
  4552                           
  4553                           ;IO_SWP.c: 192: if(MC2_IO_STATE==1)
  4554  000AA2  A222               	btfss	34,1,c	;volatile
  4555  000AA4  D007               	goto	l670
  4556                           
  4557                           ;IO_SWP.c: 193: {
  4558                           ;IO_SWP.c: 194: MC2_SwapDelay=MC2_TIME_L;
  4559  000AA6  C034  F02C         	movff	_MC2_TIME_L,_MC2_SwapDelay
  4560  000AAA  C035  F02D         	movff	_MC2_TIME_L+1,_MC2_SwapDelay+1
  4561                           
  4562                           ;IO_SWP.c: 195: MC2_IO_STATE=0;
  4563  000AAE  9222               	bcf	34,1,c	;volatile
  4564                           
  4565                           ;IO_SWP.c: 196: MC2_FZ_BZ=0;
  4566  000AB0  9A21               	bcf	33,5,c	;volatile
  4567                           
  4568                           ;IO_SWP.c: 197: }
  4569  000AB2  0012               	return	
  4570  000AB4                     l670:
  4571                           
  4572                           ;IO_SWP.c: 198: else
  4573                           ;IO_SWP.c: 199: {
  4574                           ;IO_SWP.c: 201: MC2_SwapDelay=MC2_TIME_H;
  4575  000AB4  C001  F02C         	movff	_MC2_TIME_H,_MC2_SwapDelay
  4576  000AB8  C002  F02D         	movff	_MC2_TIME_H+1,_MC2_SwapDelay+1
  4577                           
  4578                           ;IO_SWP.c: 202: MC2_IO_STATE=1;
  4579  000ABC  8222               	bsf	34,1,c	;volatile
  4580                           
  4581                           ;IO_SWP.c: 203: MC2_FZ_BZ=0;
  4582  000ABE  9A21               	bcf	33,5,c	;volatile
  4583  000AC0  0012               	return	
  4584  000AC2                     __end_of_MC2_IO_SWP:
  4585                           	opt stack 0
  4586                           tblptru	equ	0xFF8
  4587                           tblptrh	equ	0xFF7
  4588                           tblptrl	equ	0xFF6
  4589                           tablat	equ	0xFF5
  4590                           prodh	equ	0xFF4
  4591                           prodl	equ	0xFF3
  4592                           intcon	equ	0xFF2
  4593                           postinc0	equ	0xFEE
  4594                           wreg	equ	0xFE8
  4595                           indf1	equ	0xFE7
  4596                           postdec1	equ	0xFE5
  4597                           fsr1h	equ	0xFE2
  4598                           fsr1l	equ	0xFE1
  4599                           indf2	equ	0xFDF
  4600                           fsr2h	equ	0xFDA
  4601                           fsr2l	equ	0xFD9
  4602                           status	equ	0xFD8
  4603                           
  4604 ;; *************** function _MC1_IO_SWP *****************
  4605 ;; Defined at:
  4606 ;;		line 109 in file "IO_SWP.c"
  4607 ;; Parameters:    Size  Location     Type
  4608 ;;		None
  4609 ;; Auto vars:     Size  Location     Type
  4610 ;;		None
  4611 ;; Return value:  Size  Location     Type
  4612 ;;                  1    wreg      void 
  4613 ;; Registers used:
  4614 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4615 ;; Tracked objects:
  4616 ;;		On entry : 0/0
  4617 ;;		On exit  : 0/0
  4618 ;;		Unchanged: 0/0
  4619 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4624 ;;Total ram usage:        0 bytes
  4625 ;; Hardware stack levels used:    1
  4626 ;; Hardware stack levels required when called:    5
  4627 ;; This function calls:
  4628 ;;		_printf
  4629 ;; This function is called by:
  4630 ;;		_main
  4631 ;; This function uses a non-reentrant model
  4632 ;;
  4633                           
  4634                           	psect	text16
  4635  000AC2                     __ptext16:
  4636                           	opt stack 0
  4637  000AC2                     _MC1_IO_SWP:
  4638                           	opt stack 25
  4639                           
  4640                           ;IO_SWP.c: 111: switch (MC1_Channel)
  4641                           
  4642                           ;incstack = 0
  4643  000AC2  D013               	goto	l3429
  4644  000AC4                     l656:
  4645                           
  4646                           ;IO_SWP.c: 114: LATC0=!LATC0;
  4647  000AC4  B08B               	btfsc	3979,0,c	;volatile
  4648  000AC6  D002               	goto	u4940
  4649  000AC8  808B               	bsf	3979,0,c	;volatile
  4650  000ACA  D017               	goto	l657
  4651  000ACC                     u4940:
  4652  000ACC  908B               	bcf	3979,0,c	;volatile
  4653                           
  4654                           ;IO_SWP.c: 115: break;
  4655  000ACE  D015               	goto	l657
  4656  000AD0                     l658:
  4657                           
  4658                           ;IO_SWP.c: 117: LATC1=!LATC1;
  4659  000AD0  B28B               	btfsc	3979,1,c	;volatile
  4660  000AD2  D002               	goto	u4960
  4661  000AD4  828B               	bsf	3979,1,c	;volatile
  4662  000AD6  D011               	goto	l657
  4663  000AD8                     u4960:
  4664  000AD8  928B               	bcf	3979,1,c	;volatile
  4665                           
  4666                           ;IO_SWP.c: 118: break;
  4667  000ADA  D00F               	goto	l657
  4668  000ADC                     l3425:
  4669                           
  4670                           ;IO_SWP.c: 138: printf("½ûÓÃMC1Í¨µÀ!\r\n");
  4671  000ADC  0EC2               	movlw	low STR_2
  4672  000ADE  6E4E               	movwf	printf@f,c
  4673  000AE0  0EFF               	movlw	high STR_2
  4674  000AE2  6E4F               	movwf	printf@f+1,c
  4675  000AE4  ECCA  F006         	call	_printf	;wreg free
  4676                           
  4677                           ;IO_SWP.c: 140: }
  4678                           
  4679                           ;IO_SWP.c: 139: break;
  4680  000AE8  D008               	goto	l657
  4681  000AEA                     l3429:
  4682  000AEA  505D               	movf	_MC1_Channel,w,c
  4683                           
  4684                           ; Switch size 1, requested type "space"
  4685                           ; Number of cases is 2, Range of values is 1 to 2
  4686                           ; switch strategies available:
  4687                           ; Name         Instructions Cycles
  4688                           ; simple_byte            7     4 (average)
  4689                           ;	Chosen strategy is simple_byte
  4690  000AEC  0A01               	xorlw	1	; case 1
  4691  000AEE  B4D8               	btfsc	status,2,c
  4692  000AF0  D7E9               	goto	l656
  4693  000AF2  0A03               	xorlw	3	; case 2
  4694  000AF4  B4D8               	btfsc	status,2,c
  4695  000AF6  D7EC               	goto	l658
  4696  000AF8  D7F1               	goto	l3425
  4697  000AFA                     l657:
  4698                           
  4699                           ;IO_SWP.c: 143: if(MC1_IO_STATE==1)
  4700  000AFA  A022               	btfss	34,0,c	;volatile
  4701  000AFC  D007               	goto	l660
  4702                           
  4703                           ;IO_SWP.c: 144: {
  4704                           ;IO_SWP.c: 145: MC1_SwapDelay=MC1_TIME_L;
  4705  000AFE  C036  F02E         	movff	_MC1_TIME_L,_MC1_SwapDelay
  4706  000B02  C037  F02F         	movff	_MC1_TIME_L+1,_MC1_SwapDelay+1
  4707                           
  4708                           ;IO_SWP.c: 146: MC1_IO_STATE=0;
  4709  000B06  9022               	bcf	34,0,c	;volatile
  4710                           
  4711                           ;IO_SWP.c: 147: MC1_FZ_BZ=0;
  4712  000B08  9821               	bcf	33,4,c	;volatile
  4713                           
  4714                           ;IO_SWP.c: 148: }
  4715  000B0A  0012               	return	
  4716  000B0C                     l660:
  4717                           
  4718                           ;IO_SWP.c: 149: else
  4719                           ;IO_SWP.c: 150: {
  4720                           ;IO_SWP.c: 152: MC1_SwapDelay=MC1_TIME_H;
  4721  000B0C  C003  F02E         	movff	_MC1_TIME_H,_MC1_SwapDelay
  4722  000B10  C004  F02F         	movff	_MC1_TIME_H+1,_MC1_SwapDelay+1
  4723                           
  4724                           ;IO_SWP.c: 153: MC1_IO_STATE=1;
  4725  000B14  8022               	bsf	34,0,c	;volatile
  4726                           
  4727                           ;IO_SWP.c: 154: MC1_FZ_BZ=0;
  4728  000B16  9821               	bcf	33,4,c	;volatile
  4729  000B18  0012               	return	
  4730  000B1A                     __end_of_MC1_IO_SWP:
  4731                           	opt stack 0
  4732                           tblptru	equ	0xFF8
  4733                           tblptrh	equ	0xFF7
  4734                           tblptrl	equ	0xFF6
  4735                           tablat	equ	0xFF5
  4736                           prodh	equ	0xFF4
  4737                           prodl	equ	0xFF3
  4738                           intcon	equ	0xFF2
  4739                           postinc0	equ	0xFEE
  4740                           wreg	equ	0xFE8
  4741                           indf1	equ	0xFE7
  4742                           postdec1	equ	0xFE5
  4743                           fsr1h	equ	0xFE2
  4744                           fsr1l	equ	0xFE1
  4745                           indf2	equ	0xFDF
  4746                           fsr2h	equ	0xFDA
  4747                           fsr2l	equ	0xFD9
  4748                           status	equ	0xFD8
  4749                           
  4750 ;; *************** function _printf *****************
  4751 ;; Defined at:
  4752 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  4753 ;; Parameters:    Size  Location     Type
  4754 ;;  f               2   15[COMRAM] PTR const unsigned char 
  4755 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
  4756 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
  4757 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
  4758 ;;		 -> STR_30(17), STR_29(17), STR_28(17), STR_27(17), 
  4759 ;;		 -> STR_26(23), STR_25(23), STR_24(23), STR_23(23), 
  4760 ;;		 -> STR_22(23), STR_21(19), STR_20(19), STR_19(19), 
  4761 ;;		 -> STR_18(19), STR_17(20), STR_16(21), STR_15(21), 
  4762 ;;		 -> STR_14(20), STR_13(21), STR_12(21), STR_11(20), 
  4763 ;;		 -> STR_10(21), STR_9(21), STR_8(20), STR_7(21), 
  4764 ;;		 -> STR_6(21), STR_5(15), STR_4(15), STR_3(15), 
  4765 ;;		 -> STR_2(15), STR_1(32), 
  4766 ;; Auto vars:     Size  Location     Type
  4767 ;;  tmpval          4    0        struct .
  4768 ;;  cp              3    0        PTR const unsigned char 
  4769 ;;  ap              2   17[COMRAM] PTR void [1]
  4770 ;;		 -> ?_printf(2), 
  4771 ;;  len             2    0        unsigned int 
  4772 ;;  val             2    0        unsigned int 
  4773 ;;  c               1   19[COMRAM] char 
  4774 ;;  flag            1    0        unsigned char 
  4775 ;;  prec            1    0        char 
  4776 ;; Return value:  Size  Location     Type
  4777 ;;                  2   15[COMRAM] int 
  4778 ;; Registers used:
  4779 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4780 ;; Tracked objects:
  4781 ;;		On entry : 0/0
  4782 ;;		On exit  : 0/0
  4783 ;;		Unchanged: 0/0
  4784 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4785 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4786 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4788 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4789 ;;Total ram usage:        5 bytes
  4790 ;; Hardware stack levels used:    1
  4791 ;; Hardware stack levels required when called:    4
  4792 ;; This function calls:
  4793 ;;		_putch
  4794 ;; This function is called by:
  4795 ;;		_Usart_CL
  4796 ;;		_MC1_IO_SWP
  4797 ;;		_MC2_IO_SWP
  4798 ;;		_MC3_IO_SWP
  4799 ;;		_MC4_IO_SWP
  4800 ;;		_MC_EVENT_Trigge
  4801 ;;		_MC_END_EVENT
  4802 ;;		_MC1_PARM_CL
  4803 ;;		_MC2_PARM_CL
  4804 ;;		_MC3_PARM_CL
  4805 ;;		_MC4_PARM_CL
  4806 ;;		_RX_IOKZ_PARM
  4807 ;;		_IOKZ_Filter
  4808 ;; This function uses a non-reentrant model
  4809 ;;
  4810                           
  4811                           	psect	text17
  4812  000D94                     __ptext17:
  4813                           	opt stack 0
  4814  000D94                     _printf:
  4815                           	opt stack 25
  4816                           
  4817                           ;doprnt.c: 466: va_list ap;
  4818                           ;doprnt.c: 499: signed char c;
  4819                           ;doprnt.c: 506: signed char prec;
  4820                           ;doprnt.c: 508: unsigned char flag;
  4821                           ;doprnt.c: 523: union {
  4822                           ;doprnt.c: 524: unsigned long vd;
  4823                           ;doprnt.c: 525: double integ;
  4824                           ;doprnt.c: 526: } tmpval;
  4825                           ;doprnt.c: 528: unsigned int val;
  4826                           ;doprnt.c: 529: unsigned len;
  4827                           ;doprnt.c: 530: const char * cp;
  4828                           ;doprnt.c: 533: *ap = __va_start();
  4829                           
  4830                           ;incstack = 0
  4831  000D94  0E50               	movlw	low (?_printf+2)
  4832  000D96  6E50               	movwf	printf@ap,c
  4833  000D98  0E00               	movlw	high (?_printf+2)
  4834  000D9A  6E51               	movwf	printf@ap+1,c
  4835                           
  4836                           ;doprnt.c: 536: while(c = *f++) {
  4837  000D9C  D003               	goto	l3041
  4838  000D9E                     l3039:
  4839                           
  4840                           ;doprnt.c: 540: {
  4841                           ;doprnt.c: 541: (putch(c) );
  4842  000D9E  5052               	movf	printf@c,w,c
  4843  000DA0  EC61  F007         	call	_putch
  4844  000DA4                     l3041:
  4845  000DA4  C04E  FFF6         	movff	printf@f,tblptrl
  4846  000DA8  C04F  FFF7         	movff	printf@f+1,tblptrh
  4847  000DAC  4A4E               	infsnz	printf@f,f,c
  4848  000DAE  2A4F               	incf	printf@f+1,f,c
  4849  000DB0                     	if	0	;tblptru may be non-zero
  4850  000DB0                     	endif
  4851  000DB0                     	if	0	;tblptru may be non-zero
  4852  000DB0                     	endif
  4853  000DB0  0008               	tblrd		*
  4854  000DB2  CFF5 F052          	movff	tablat,printf@c
  4855  000DB6  5052               	movf	printf@c,w,c
  4856  000DB8  B4D8               	btfsc	status,2,c
  4857  000DBA  0012               	return	
  4858  000DBC  D7F0               	goto	l3039
  4859  000DBE                     __end_of_printf:
  4860                           	opt stack 0
  4861                           tblptru	equ	0xFF8
  4862                           tblptrh	equ	0xFF7
  4863                           tblptrl	equ	0xFF6
  4864                           tablat	equ	0xFF5
  4865                           prodh	equ	0xFF4
  4866                           prodl	equ	0xFF3
  4867                           intcon	equ	0xFF2
  4868                           postinc0	equ	0xFEE
  4869                           wreg	equ	0xFE8
  4870                           indf1	equ	0xFE7
  4871                           postdec1	equ	0xFE5
  4872                           fsr1h	equ	0xFE2
  4873                           fsr1l	equ	0xFE1
  4874                           indf2	equ	0xFDF
  4875                           fsr2h	equ	0xFDA
  4876                           fsr2l	equ	0xFD9
  4877                           status	equ	0xFD8
  4878                           
  4879 ;; *************** function _putch *****************
  4880 ;; Defined at:
  4881 ;;		line 12 in file "main.c"
  4882 ;; Parameters:    Size  Location     Type
  4883 ;;  data            1    wreg     unsigned char 
  4884 ;; Auto vars:     Size  Location     Type
  4885 ;;  data            1   14[COMRAM] unsigned char 
  4886 ;; Return value:  Size  Location     Type
  4887 ;;                  1    wreg      void 
  4888 ;; Registers used:
  4889 ;;		wreg
  4890 ;; Tracked objects:
  4891 ;;		On entry : 0/0
  4892 ;;		On exit  : 0/0
  4893 ;;		Unchanged: 0/0
  4894 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4896 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4898 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4899 ;;Total ram usage:        1 bytes
  4900 ;; Hardware stack levels used:    1
  4901 ;; Hardware stack levels required when called:    3
  4902 ;; This function calls:
  4903 ;;		Nothing
  4904 ;; This function is called by:
  4905 ;;		_printf
  4906 ;; This function uses a non-reentrant model
  4907 ;;
  4908                           
  4909                           	psect	text18
  4910  000EC2                     __ptext18:
  4911                           	opt stack 0
  4912  000EC2                     _putch:
  4913                           	opt stack 25
  4914                           
  4915                           ;incstack = 0
  4916                           ;putch@data stored from wreg
  4917  000EC2  6E4D               	movwf	putch@data,c
  4918  000EC4                     l137:
  4919  000EC4  A89E               	btfss	3998,4,c	;volatile
  4920  000EC6  D7FE               	goto	l137
  4921                           
  4922                           ;main.c: 16: TXREG=data;
  4923  000EC8  C04D  FFAD         	movff	putch@data,4013	;volatile
  4924  000ECC  0012               	return		;funcret
  4925  000ECE                     __end_of_putch:
  4926                           	opt stack 0
  4927                           tblptru	equ	0xFF8
  4928                           tblptrh	equ	0xFF7
  4929                           tblptrl	equ	0xFF6
  4930                           tablat	equ	0xFF5
  4931                           prodh	equ	0xFF4
  4932                           prodl	equ	0xFF3
  4933                           intcon	equ	0xFF2
  4934                           postinc0	equ	0xFEE
  4935                           wreg	equ	0xFE8
  4936                           indf1	equ	0xFE7
  4937                           postdec1	equ	0xFE5
  4938                           fsr1h	equ	0xFE2
  4939                           fsr1l	equ	0xFE1
  4940                           indf2	equ	0xFDF
  4941                           fsr2h	equ	0xFDA
  4942                           fsr2l	equ	0xFD9
  4943                           status	equ	0xFD8
  4944                           
  4945 ;; *************** function _IO_INT *****************
  4946 ;; Defined at:
  4947 ;;		line 11 in file "IO_INT.c"
  4948 ;; Parameters:    Size  Location     Type
  4949 ;;		None
  4950 ;; Auto vars:     Size  Location     Type
  4951 ;;		None
  4952 ;; Return value:  Size  Location     Type
  4953 ;;                  1    wreg      void 
  4954 ;; Registers used:
  4955 ;;		wreg, status,2
  4956 ;; Tracked objects:
  4957 ;;		On entry : 0/0
  4958 ;;		On exit  : 0/0
  4959 ;;		Unchanged: 0/0
  4960 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4965 ;;Total ram usage:        0 bytes
  4966 ;; Hardware stack levels used:    1
  4967 ;; Hardware stack levels required when called:    3
  4968 ;; This function calls:
  4969 ;;		Nothing
  4970 ;; This function is called by:
  4971 ;;		_main
  4972 ;; This function uses a non-reentrant model
  4973 ;;
  4974                           
  4975                           	psect	text19
  4976  000DBE                     __ptext19:
  4977                           	opt stack 0
  4978  000DBE                     _IO_INT:
  4979                           	opt stack 27
  4980                           
  4981                           ;IO_INT.c: 15: PORTC=0X00;
  4982                           
  4983                           ;incstack = 0
  4984  000DBE  0E00               	movlw	0
  4985  000DC0  6E82               	movwf	3970,c	;volatile
  4986                           
  4987                           ;IO_INT.c: 16: LATC=0X00;
  4988  000DC2  0E00               	movlw	0
  4989  000DC4  6E8B               	movwf	3979,c	;volatile
  4990                           
  4991                           ;IO_INT.c: 17: TRISC=0x00;
  4992  000DC6  0E00               	movlw	0
  4993  000DC8  6E94               	movwf	3988,c	;volatile
  4994                           
  4995                           ;IO_INT.c: 22: PORTD=0X00;
  4996  000DCA  0E00               	movlw	0
  4997  000DCC  6E83               	movwf	3971,c	;volatile
  4998                           
  4999                           ;IO_INT.c: 23: LATD=0X00;
  5000  000DCE  0E00               	movlw	0
  5001  000DD0  6E8C               	movwf	3980,c	;volatile
  5002                           
  5003                           ;IO_INT.c: 24: TRISD=0x00;
  5004  000DD2  0E00               	movlw	0
  5005  000DD4  6E95               	movwf	3989,c	;volatile
  5006                           
  5007                           ;IO_INT.c: 29: PORTF=0X00;
  5008  000DD6  0E00               	movlw	0
  5009  000DD8  6E85               	movwf	3973,c	;volatile
  5010                           
  5011                           ;IO_INT.c: 30: LATF=0X00;
  5012  000DDA  0E00               	movlw	0
  5013  000DDC  6E8E               	movwf	3982,c	;volatile
  5014                           
  5015                           ;IO_INT.c: 31: TRISF=0x00;
  5016  000DDE  0E00               	movlw	0
  5017  000DE0  6E97               	movwf	3991,c	;volatile
  5018  000DE2  0012               	return		;funcret
  5019  000DE4                     __end_of_IO_INT:
  5020                           	opt stack 0
  5021                           tblptru	equ	0xFF8
  5022                           tblptrh	equ	0xFF7
  5023                           tblptrl	equ	0xFF6
  5024                           tablat	equ	0xFF5
  5025                           prodh	equ	0xFF4
  5026                           prodl	equ	0xFF3
  5027                           intcon	equ	0xFF2
  5028                           postinc0	equ	0xFEE
  5029                           wreg	equ	0xFE8
  5030                           indf1	equ	0xFE7
  5031                           postdec1	equ	0xFE5
  5032                           fsr1h	equ	0xFE2
  5033                           fsr1l	equ	0xFE1
  5034                           indf2	equ	0xFDF
  5035                           fsr2h	equ	0xFDA
  5036                           fsr2l	equ	0xFD9
  5037                           status	equ	0xFD8
  5038                           
  5039 ;; *************** function _ISR *****************
  5040 ;; Defined at:
  5041 ;;		line 39 in file "main.c"
  5042 ;; Parameters:    Size  Location     Type
  5043 ;;		None
  5044 ;; Auto vars:     Size  Location     Type
  5045 ;;		None
  5046 ;; Return value:  Size  Location     Type
  5047 ;;                  1    wreg      void 
  5048 ;; Registers used:
  5049 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5050 ;; Tracked objects:
  5051 ;;		On entry : 0/0
  5052 ;;		On exit  : 0/0
  5053 ;;		Unchanged: 0/0
  5054 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  5055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5057 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5058 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5059 ;;Total ram usage:       14 bytes
  5060 ;; Hardware stack levels used:    1
  5061 ;; Hardware stack levels required when called:    2
  5062 ;; This function calls:
  5063 ;;		_USART_RX
  5064 ;;		_tmr1
  5065 ;; This function is called by:
  5066 ;;		Interrupt level 2
  5067 ;; This function uses a non-reentrant model
  5068 ;;
  5069                           
  5070                           	psect	intcode
  5071  000008                     __pintcode:
  5072                           	opt stack 0
  5073  000008                     _ISR:
  5074                           	opt stack 23
  5075                           
  5076                           ;incstack = 0
  5077  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5078  00000A  CFFA F03F          	movff	pclath,??_ISR
  5079  00000E  CFFB F040          	movff	pclatu,??_ISR+1
  5080  000012  CFE9 F041          	movff	fsr0l,??_ISR+2
  5081  000016  CFEA F042          	movff	fsr0h,??_ISR+3
  5082  00001A  CFE1 F043          	movff	fsr1l,??_ISR+4
  5083  00001E  CFE2 F044          	movff	fsr1h,??_ISR+5
  5084  000022  CFD9 F045          	movff	fsr2l,??_ISR+6
  5085  000026  CFDA F046          	movff	fsr2h,??_ISR+7
  5086  00002A  CFF3 F047          	movff	prodl,??_ISR+8
  5087  00002E  CFF4 F048          	movff	prodh,??_ISR+9
  5088  000032  CFF6 F049          	movff	tblptrl,??_ISR+10
  5089  000036  CFF7 F04A          	movff	tblptrh,??_ISR+11
  5090  00003A  CFF8 F04B          	movff	tblptru,??_ISR+12
  5091  00003E  CFF5 F04C          	movff	tablat,??_ISR+13
  5092                           
  5093                           ;main.c: 41: USART_RX();
  5094  000042  EC91  F006         	call	_USART_RX	;wreg free
  5095                           
  5096                           ;main.c: 42: tmr1();
  5097  000046  ECDC  F005         	call	_tmr1	;wreg free
  5098  00004A  C04C  FFF5         	movff	??_ISR+13,tablat
  5099  00004E  C04B  FFF8         	movff	??_ISR+12,tblptru
  5100  000052  C04A  FFF7         	movff	??_ISR+11,tblptrh
  5101  000056  C049  FFF6         	movff	??_ISR+10,tblptrl
  5102  00005A  C048  FFF4         	movff	??_ISR+9,prodh
  5103  00005E  C047  FFF3         	movff	??_ISR+8,prodl
  5104  000062  C046  FFDA         	movff	??_ISR+7,fsr2h
  5105  000066  C045  FFD9         	movff	??_ISR+6,fsr2l
  5106  00006A  C044  FFE2         	movff	??_ISR+5,fsr1h
  5107  00006E  C043  FFE1         	movff	??_ISR+4,fsr1l
  5108  000072  C042  FFEA         	movff	??_ISR+3,fsr0h
  5109  000076  C041  FFE9         	movff	??_ISR+2,fsr0l
  5110  00007A  C040  FFFB         	movff	??_ISR+1,pclatu
  5111  00007E  C03F  FFFA         	movff	??_ISR,pclath
  5112  000082  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5113  000084  0011               	retfie		f
  5114  000086                     __end_of_ISR:
  5115                           	opt stack 0
  5116                           pclatu	equ	0xFFB
  5117                           pclath	equ	0xFFA
  5118                           tblptru	equ	0xFF8
  5119                           tblptrh	equ	0xFF7
  5120                           tblptrl	equ	0xFF6
  5121                           tablat	equ	0xFF5
  5122                           prodh	equ	0xFF4
  5123                           prodl	equ	0xFF3
  5124                           intcon	equ	0xFF2
  5125                           postinc0	equ	0xFEE
  5126                           fsr0h	equ	0xFEA
  5127                           fsr0l	equ	0xFE9
  5128                           wreg	equ	0xFE8
  5129                           indf1	equ	0xFE7
  5130                           postdec1	equ	0xFE5
  5131                           fsr1h	equ	0xFE2
  5132                           fsr1l	equ	0xFE1
  5133                           indf2	equ	0xFDF
  5134                           fsr2h	equ	0xFDA
  5135                           fsr2l	equ	0xFD9
  5136                           status	equ	0xFD8
  5137                           
  5138 ;; *************** function _tmr1 *****************
  5139 ;; Defined at:
  5140 ;;		line 26 in file "TMR1.c"
  5141 ;; Parameters:    Size  Location     Type
  5142 ;;		None
  5143 ;; Auto vars:     Size  Location     Type
  5144 ;;		None
  5145 ;; Return value:  Size  Location     Type
  5146 ;;                  1    wreg      void 
  5147 ;; Registers used:
  5148 ;;		wreg, status,2, status,0, cstack
  5149 ;; Tracked objects:
  5150 ;;		On entry : 0/0
  5151 ;;		On exit  : 0/0
  5152 ;;		Unchanged: 0/0
  5153 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  5154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5157 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5158 ;;Total ram usage:        0 bytes
  5159 ;; Hardware stack levels used:    1
  5160 ;; Hardware stack levels required when called:    1
  5161 ;; This function calls:
  5162 ;;		_MC1_SWP_Decision
  5163 ;;		_MC2_SWP_Decision
  5164 ;;		_MC3_SWP_Decision
  5165 ;;		_MC4_SWP_Decision
  5166 ;; This function is called by:
  5167 ;;		_ISR
  5168 ;; This function uses a non-reentrant model
  5169 ;;
  5170                           
  5171                           	psect	text21
  5172  000BB8                     __ptext21:
  5173                           	opt stack 0
  5174  000BB8                     _tmr1:
  5175                           	opt stack 23
  5176                           
  5177                           ;TMR1.c: 28: if(PIR1bits.TMR1IF ==1 && PIE1bits.TMR1IE ==1){
  5178                           
  5179                           ;incstack = 0
  5180  000BB8  A09E               	btfss	3998,0,c	;volatile
  5181  000BBA  0012               	return	
  5182  000BBC  A09D               	btfss	3997,0,c	;volatile
  5183  000BBE  0012               	return	
  5184                           
  5185                           ;TMR1.c: 29: PIR1bits.TMR1IF = 0;
  5186  000BC0  909E               	bcf	3998,0,c	;volatile
  5187                           
  5188                           ;TMR1.c: 30: TMR1H = (65536-1560)/256;
  5189  000BC2  0EF9               	movlw	249
  5190  000BC4  6ECF               	movwf	4047,c	;volatile
  5191                           
  5192                           ;TMR1.c: 31: TMR1L = (65536-1560)%256;
  5193  000BC6  0EE8               	movlw	232
  5194  000BC8  6ECE               	movwf	4046,c	;volatile
  5195                           
  5196                           ;TMR1.c: 32: MC1_SWP_Decision();
  5197  000BCA  EC3A  F007         	call	_MC1_SWP_Decision	;wreg free
  5198                           
  5199                           ;TMR1.c: 33: MC2_SWP_Decision();
  5200  000BCE  EC28  F007         	call	_MC2_SWP_Decision	;wreg free
  5201                           
  5202                           ;TMR1.c: 34: MC3_SWP_Decision();
  5203  000BD2  EC16  F007         	call	_MC3_SWP_Decision	;wreg free
  5204                           
  5205                           ;TMR1.c: 35: MC4_SWP_Decision();
  5206  000BD6  EC04  F007         	call	_MC4_SWP_Decision	;wreg free
  5207                           
  5208                           ;TMR1.c: 36: if(ct++==2000)
  5209  000BDA  4A3C               	infsnz	_ct,f,c
  5210  000BDC  2A3D               	incf	_ct+1,f,c
  5211  000BDE  0ED1               	movlw	209
  5212  000BE0  183C               	xorwf	_ct,w,c
  5213  000BE2  E10E               	bnz	i2l298
  5214  000BE4  0E07               	movlw	7
  5215  000BE6  183D               	xorwf	_ct+1,w,c
  5216  000BE8  A4D8               	btfss	status,2,c
  5217  000BEA  0012               	return	
  5218                           
  5219                           ;TMR1.c: 37: {
  5220                           ;TMR1.c: 38: ct=0;
  5221  000BEC  0E00               	movlw	0
  5222  000BEE  6E3D               	movwf	_ct+1,c
  5223  000BF0  0E00               	movlw	0
  5224  000BF2  6E3C               	movwf	_ct,c
  5225                           
  5226                           ;TMR1.c: 39: LATF7=!LATF7;
  5227  000BF4  BE8E               	btfsc	3982,7,c	;volatile
  5228  000BF6  D002               	goto	i2u356_40
  5229  000BF8  8E8E               	bsf	3982,7,c	;volatile
  5230  000BFA  0012               	return	
  5231  000BFC                     i2u356_40:
  5232  000BFC  9E8E               	bcf	3982,7,c	;volatile
  5233  000BFE  0012               	return	
  5234  000C00                     i2l298:
  5235  000C00  0012               	return		;funcret
  5236  000C02                     __end_of_tmr1:
  5237                           	opt stack 0
  5238                           pclatu	equ	0xFFB
  5239                           pclath	equ	0xFFA
  5240                           tblptru	equ	0xFF8
  5241                           tblptrh	equ	0xFF7
  5242                           tblptrl	equ	0xFF6
  5243                           tablat	equ	0xFF5
  5244                           prodh	equ	0xFF4
  5245                           prodl	equ	0xFF3
  5246                           intcon	equ	0xFF2
  5247                           postinc0	equ	0xFEE
  5248                           fsr0h	equ	0xFEA
  5249                           fsr0l	equ	0xFE9
  5250                           wreg	equ	0xFE8
  5251                           indf1	equ	0xFE7
  5252                           postdec1	equ	0xFE5
  5253                           fsr1h	equ	0xFE2
  5254                           fsr1l	equ	0xFE1
  5255                           indf2	equ	0xFDF
  5256                           fsr2h	equ	0xFDA
  5257                           fsr2l	equ	0xFD9
  5258                           status	equ	0xFD8
  5259                           
  5260 ;; *************** function _MC4_SWP_Decision *****************
  5261 ;; Defined at:
  5262 ;;		line 85 in file "IO_SWP.c"
  5263 ;; Parameters:    Size  Location     Type
  5264 ;;		None
  5265 ;; Auto vars:     Size  Location     Type
  5266 ;;		None
  5267 ;; Return value:  Size  Location     Type
  5268 ;;                  1    wreg      void 
  5269 ;; Registers used:
  5270 ;;		wreg, status,2, status,0
  5271 ;; Tracked objects:
  5272 ;;		On entry : 0/0
  5273 ;;		On exit  : 0/0
  5274 ;;		Unchanged: 0/0
  5275 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  5276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5280 ;;Total ram usage:        0 bytes
  5281 ;; Hardware stack levels used:    1
  5282 ;; This function calls:
  5283 ;;		Nothing
  5284 ;; This function is called by:
  5285 ;;		_tmr1
  5286 ;; This function uses a non-reentrant model
  5287 ;;
  5288                           
  5289                           	psect	text22
  5290  000E08                     __ptext22:
  5291                           	opt stack 0
  5292  000E08                     _MC4_SWP_Decision:
  5293                           	opt stack 23
  5294                           
  5295                           ;IO_SWP.c: 87: if(MC4_Start_BZ==1)
  5296                           
  5297                           ;incstack = 0
  5298  000E08  A621               	btfss	33,3,c	;volatile
  5299  000E0A  0012               	return	
  5300                           
  5301                           ;IO_SWP.c: 88: {
  5302                           ;IO_SWP.c: 89: MC4_SwapDelay--;
  5303  000E0C  0628               	decf	_MC4_SwapDelay,f,c
  5304  000E0E  A0D8               	btfss	status,0,c
  5305  000E10  0629               	decf	_MC4_SwapDelay+1,f,c
  5306                           
  5307                           ;IO_SWP.c: 90: if(MC4_SwapDelay==0)
  5308  000E12  5028               	movf	_MC4_SwapDelay,w,c
  5309  000E14  1029               	iorwf	_MC4_SwapDelay+1,w,c
  5310  000E16  A4D8               	btfss	status,2,c
  5311  000E18  0012               	return	
  5312                           
  5313                           ;IO_SWP.c: 91: {
  5314                           ;IO_SWP.c: 92: if(MC4_FZ_C>=1)
  5315  000E1A  5005               	movf	_MC4_FZ_C,w,c
  5316  000E1C  B4D8               	btfsc	status,2,c
  5317  000E1E  D003               	goto	i2l650
  5318                           
  5319                           ;IO_SWP.c: 93: {
  5320                           ;IO_SWP.c: 94: MC4_FZ_C--;
  5321  000E20  0605               	decf	_MC4_FZ_C,f,c
  5322                           
  5323                           ;IO_SWP.c: 95: MC4_FZ_BZ=1;
  5324  000E22  8E21               	bsf	33,7,c	;volatile
  5325                           
  5326                           ;IO_SWP.c: 96: }
  5327  000E24  0012               	return	
  5328  000E26                     i2l650:
  5329                           
  5330                           ;IO_SWP.c: 97: else
  5331                           ;IO_SWP.c: 98: {
  5332                           ;IO_SWP.c: 99: MC4_Start_BZ=0;
  5333  000E26  9621               	bcf	33,3,c	;volatile
  5334                           
  5335                           ;IO_SWP.c: 100: MC4_END_FLAT=1;
  5336  000E28  8E22               	bsf	34,7,c	;volatile
  5337  000E2A  0012               	return	
  5338  000E2C                     __end_of_MC4_SWP_Decision:
  5339                           	opt stack 0
  5340                           pclatu	equ	0xFFB
  5341                           pclath	equ	0xFFA
  5342                           tblptru	equ	0xFF8
  5343                           tblptrh	equ	0xFF7
  5344                           tblptrl	equ	0xFF6
  5345                           tablat	equ	0xFF5
  5346                           prodh	equ	0xFF4
  5347                           prodl	equ	0xFF3
  5348                           intcon	equ	0xFF2
  5349                           postinc0	equ	0xFEE
  5350                           fsr0h	equ	0xFEA
  5351                           fsr0l	equ	0xFE9
  5352                           wreg	equ	0xFE8
  5353                           indf1	equ	0xFE7
  5354                           postdec1	equ	0xFE5
  5355                           fsr1h	equ	0xFE2
  5356                           fsr1l	equ	0xFE1
  5357                           indf2	equ	0xFDF
  5358                           fsr2h	equ	0xFDA
  5359                           fsr2l	equ	0xFD9
  5360                           status	equ	0xFD8
  5361                           
  5362 ;; *************** function _MC3_SWP_Decision *****************
  5363 ;; Defined at:
  5364 ;;		line 62 in file "IO_SWP.c"
  5365 ;; Parameters:    Size  Location     Type
  5366 ;;		None
  5367 ;; Auto vars:     Size  Location     Type
  5368 ;;		None
  5369 ;; Return value:  Size  Location     Type
  5370 ;;                  1    wreg      void 
  5371 ;; Registers used:
  5372 ;;		wreg, status,2, status,0
  5373 ;; Tracked objects:
  5374 ;;		On entry : 0/0
  5375 ;;		On exit  : 0/0
  5376 ;;		Unchanged: 0/0
  5377 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  5378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5381 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5382 ;;Total ram usage:        0 bytes
  5383 ;; Hardware stack levels used:    1
  5384 ;; This function calls:
  5385 ;;		Nothing
  5386 ;; This function is called by:
  5387 ;;		_tmr1
  5388 ;; This function uses a non-reentrant model
  5389 ;;
  5390                           
  5391                           	psect	text23
  5392  000E2C                     __ptext23:
  5393                           	opt stack 0
  5394  000E2C                     _MC3_SWP_Decision:
  5395                           	opt stack 23
  5396                           
  5397                           ;IO_SWP.c: 64: if(MC3_Start_BZ==1)
  5398                           
  5399                           ;incstack = 0
  5400  000E2C  A421               	btfss	33,2,c	;volatile
  5401  000E2E  0012               	return	
  5402                           
  5403                           ;IO_SWP.c: 65: {
  5404                           ;IO_SWP.c: 66: MC3_SwapDelay--;
  5405  000E30  062A               	decf	_MC3_SwapDelay,f,c
  5406  000E32  A0D8               	btfss	status,0,c
  5407  000E34  062B               	decf	_MC3_SwapDelay+1,f,c
  5408                           
  5409                           ;IO_SWP.c: 67: if(MC3_SwapDelay==0)
  5410  000E36  502A               	movf	_MC3_SwapDelay,w,c
  5411  000E38  102B               	iorwf	_MC3_SwapDelay+1,w,c
  5412  000E3A  A4D8               	btfss	status,2,c
  5413  000E3C  0012               	return	
  5414                           
  5415                           ;IO_SWP.c: 68: {
  5416                           ;IO_SWP.c: 69: if(MC3_FZ_C>=1)
  5417  000E3E  5006               	movf	_MC3_FZ_C,w,c
  5418  000E40  B4D8               	btfsc	status,2,c
  5419  000E42  D003               	goto	i2l643
  5420                           
  5421                           ;IO_SWP.c: 70: {
  5422                           ;IO_SWP.c: 71: MC3_FZ_C--;
  5423  000E44  0606               	decf	_MC3_FZ_C,f,c
  5424                           
  5425                           ;IO_SWP.c: 72: MC3_FZ_BZ=1;
  5426  000E46  8C21               	bsf	33,6,c	;volatile
  5427                           
  5428                           ;IO_SWP.c: 73: }
  5429  000E48  0012               	return	
  5430  000E4A                     i2l643:
  5431                           
  5432                           ;IO_SWP.c: 74: else
  5433                           ;IO_SWP.c: 75: {
  5434                           ;IO_SWP.c: 76: MC3_Start_BZ=0;
  5435  000E4A  9421               	bcf	33,2,c	;volatile
  5436                           
  5437                           ;IO_SWP.c: 77: MC3_END_FLAT=1;
  5438  000E4C  8C22               	bsf	34,6,c	;volatile
  5439  000E4E  0012               	return	
  5440  000E50                     __end_of_MC3_SWP_Decision:
  5441                           	opt stack 0
  5442                           pclatu	equ	0xFFB
  5443                           pclath	equ	0xFFA
  5444                           tblptru	equ	0xFF8
  5445                           tblptrh	equ	0xFF7
  5446                           tblptrl	equ	0xFF6
  5447                           tablat	equ	0xFF5
  5448                           prodh	equ	0xFF4
  5449                           prodl	equ	0xFF3
  5450                           intcon	equ	0xFF2
  5451                           postinc0	equ	0xFEE
  5452                           fsr0h	equ	0xFEA
  5453                           fsr0l	equ	0xFE9
  5454                           wreg	equ	0xFE8
  5455                           indf1	equ	0xFE7
  5456                           postdec1	equ	0xFE5
  5457                           fsr1h	equ	0xFE2
  5458                           fsr1l	equ	0xFE1
  5459                           indf2	equ	0xFDF
  5460                           fsr2h	equ	0xFDA
  5461                           fsr2l	equ	0xFD9
  5462                           status	equ	0xFD8
  5463                           
  5464 ;; *************** function _MC2_SWP_Decision *****************
  5465 ;; Defined at:
  5466 ;;		line 39 in file "IO_SWP.c"
  5467 ;; Parameters:    Size  Location     Type
  5468 ;;		None
  5469 ;; Auto vars:     Size  Location     Type
  5470 ;;		None
  5471 ;; Return value:  Size  Location     Type
  5472 ;;                  1    wreg      void 
  5473 ;; Registers used:
  5474 ;;		wreg, status,2, status,0
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  5480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5484 ;;Total ram usage:        0 bytes
  5485 ;; Hardware stack levels used:    1
  5486 ;; This function calls:
  5487 ;;		Nothing
  5488 ;; This function is called by:
  5489 ;;		_tmr1
  5490 ;; This function uses a non-reentrant model
  5491 ;;
  5492                           
  5493                           	psect	text24
  5494  000E50                     __ptext24:
  5495                           	opt stack 0
  5496  000E50                     _MC2_SWP_Decision:
  5497                           	opt stack 23
  5498                           
  5499                           ;IO_SWP.c: 41: if(MC2_Start_BZ==1)
  5500                           
  5501                           ;incstack = 0
  5502  000E50  A221               	btfss	33,1,c	;volatile
  5503  000E52  0012               	return	
  5504                           
  5505                           ;IO_SWP.c: 42: {
  5506                           ;IO_SWP.c: 43: MC2_SwapDelay--;
  5507  000E54  062C               	decf	_MC2_SwapDelay,f,c
  5508  000E56  A0D8               	btfss	status,0,c
  5509  000E58  062D               	decf	_MC2_SwapDelay+1,f,c
  5510                           
  5511                           ;IO_SWP.c: 44: if(MC2_SwapDelay==0)
  5512  000E5A  502C               	movf	_MC2_SwapDelay,w,c
  5513  000E5C  102D               	iorwf	_MC2_SwapDelay+1,w,c
  5514  000E5E  A4D8               	btfss	status,2,c
  5515  000E60  0012               	return	
  5516                           
  5517                           ;IO_SWP.c: 45: {
  5518                           ;IO_SWP.c: 46: if(MC2_FZ_C>=1)
  5519  000E62  5007               	movf	_MC2_FZ_C,w,c
  5520  000E64  B4D8               	btfsc	status,2,c
  5521  000E66  D003               	goto	i2l636
  5522                           
  5523                           ;IO_SWP.c: 47: {
  5524                           ;IO_SWP.c: 48: MC2_FZ_C--;
  5525  000E68  0607               	decf	_MC2_FZ_C,f,c
  5526                           
  5527                           ;IO_SWP.c: 49: MC2_FZ_BZ=1;
  5528  000E6A  8A21               	bsf	33,5,c	;volatile
  5529                           
  5530                           ;IO_SWP.c: 50: }
  5531  000E6C  0012               	return	
  5532  000E6E                     i2l636:
  5533                           
  5534                           ;IO_SWP.c: 51: else
  5535                           ;IO_SWP.c: 52: {
  5536                           ;IO_SWP.c: 53: MC2_Start_BZ=0;
  5537  000E6E  9221               	bcf	33,1,c	;volatile
  5538                           
  5539                           ;IO_SWP.c: 54: MC2_END_FLAT=1;
  5540  000E70  8A22               	bsf	34,5,c	;volatile
  5541  000E72  0012               	return	
  5542  000E74                     __end_of_MC2_SWP_Decision:
  5543                           	opt stack 0
  5544                           pclatu	equ	0xFFB
  5545                           pclath	equ	0xFFA
  5546                           tblptru	equ	0xFF8
  5547                           tblptrh	equ	0xFF7
  5548                           tblptrl	equ	0xFF6
  5549                           tablat	equ	0xFF5
  5550                           prodh	equ	0xFF4
  5551                           prodl	equ	0xFF3
  5552                           intcon	equ	0xFF2
  5553                           postinc0	equ	0xFEE
  5554                           fsr0h	equ	0xFEA
  5555                           fsr0l	equ	0xFE9
  5556                           wreg	equ	0xFE8
  5557                           indf1	equ	0xFE7
  5558                           postdec1	equ	0xFE5
  5559                           fsr1h	equ	0xFE2
  5560                           fsr1l	equ	0xFE1
  5561                           indf2	equ	0xFDF
  5562                           fsr2h	equ	0xFDA
  5563                           fsr2l	equ	0xFD9
  5564                           status	equ	0xFD8
  5565                           
  5566 ;; *************** function _MC1_SWP_Decision *****************
  5567 ;; Defined at:
  5568 ;;		line 16 in file "IO_SWP.c"
  5569 ;; Parameters:    Size  Location     Type
  5570 ;;		None
  5571 ;; Auto vars:     Size  Location     Type
  5572 ;;		None
  5573 ;; Return value:  Size  Location     Type
  5574 ;;                  1    wreg      void 
  5575 ;; Registers used:
  5576 ;;		wreg, status,2, status,0
  5577 ;; Tracked objects:
  5578 ;;		On entry : 0/0
  5579 ;;		On exit  : 0/0
  5580 ;;		Unchanged: 0/0
  5581 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  5582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5585 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5586 ;;Total ram usage:        0 bytes
  5587 ;; Hardware stack levels used:    1
  5588 ;; This function calls:
  5589 ;;		Nothing
  5590 ;; This function is called by:
  5591 ;;		_tmr1
  5592 ;; This function uses a non-reentrant model
  5593 ;;
  5594                           
  5595                           	psect	text25
  5596  000E74                     __ptext25:
  5597                           	opt stack 0
  5598  000E74                     _MC1_SWP_Decision:
  5599                           	opt stack 23
  5600                           
  5601                           ;IO_SWP.c: 18: if(MC1_Start_BZ==1)
  5602                           
  5603                           ;incstack = 0
  5604  000E74  A021               	btfss	33,0,c	;volatile
  5605  000E76  0012               	return	
  5606                           
  5607                           ;IO_SWP.c: 19: {
  5608                           ;IO_SWP.c: 20: MC1_SwapDelay--;
  5609  000E78  062E               	decf	_MC1_SwapDelay,f,c
  5610  000E7A  A0D8               	btfss	status,0,c
  5611  000E7C  062F               	decf	_MC1_SwapDelay+1,f,c
  5612                           
  5613                           ;IO_SWP.c: 21: if(MC1_SwapDelay==0)
  5614  000E7E  502E               	movf	_MC1_SwapDelay,w,c
  5615  000E80  102F               	iorwf	_MC1_SwapDelay+1,w,c
  5616  000E82  A4D8               	btfss	status,2,c
  5617  000E84  0012               	return	
  5618                           
  5619                           ;IO_SWP.c: 22: {
  5620                           ;IO_SWP.c: 23: if(MC1_FZ_C>=1)
  5621  000E86  5008               	movf	_MC1_FZ_C,w,c
  5622  000E88  B4D8               	btfsc	status,2,c
  5623  000E8A  D003               	goto	i2l629
  5624                           
  5625                           ;IO_SWP.c: 24: {
  5626                           ;IO_SWP.c: 25: MC1_FZ_C--;
  5627  000E8C  0608               	decf	_MC1_FZ_C,f,c
  5628                           
  5629                           ;IO_SWP.c: 26: MC1_FZ_BZ=1;
  5630  000E8E  8821               	bsf	33,4,c	;volatile
  5631                           
  5632                           ;IO_SWP.c: 27: }
  5633  000E90  0012               	return	
  5634  000E92                     i2l629:
  5635                           
  5636                           ;IO_SWP.c: 28: else
  5637                           ;IO_SWP.c: 29: {
  5638                           ;IO_SWP.c: 30: MC1_Start_BZ=0;
  5639  000E92  9021               	bcf	33,0,c	;volatile
  5640                           
  5641                           ;IO_SWP.c: 31: MC1_END_FLAT=1;
  5642  000E94  8822               	bsf	34,4,c	;volatile
  5643  000E96  0012               	return	
  5644  000E98                     __end_of_MC1_SWP_Decision:
  5645                           	opt stack 0
  5646                           pclatu	equ	0xFFB
  5647                           pclath	equ	0xFFA
  5648                           tblptru	equ	0xFF8
  5649                           tblptrh	equ	0xFF7
  5650                           tblptrl	equ	0xFF6
  5651                           tablat	equ	0xFF5
  5652                           prodh	equ	0xFF4
  5653                           prodl	equ	0xFF3
  5654                           intcon	equ	0xFF2
  5655                           postinc0	equ	0xFEE
  5656                           fsr0h	equ	0xFEA
  5657                           fsr0l	equ	0xFE9
  5658                           wreg	equ	0xFE8
  5659                           indf1	equ	0xFE7
  5660                           postdec1	equ	0xFE5
  5661                           fsr1h	equ	0xFE2
  5662                           fsr1l	equ	0xFE1
  5663                           indf2	equ	0xFDF
  5664                           fsr2h	equ	0xFDA
  5665                           fsr2l	equ	0xFD9
  5666                           status	equ	0xFD8
  5667                           
  5668 ;; *************** function _USART_RX *****************
  5669 ;; Defined at:
  5670 ;;		line 94 in file "USART1.c"
  5671 ;; Parameters:    Size  Location     Type
  5672 ;;		None
  5673 ;; Auto vars:     Size  Location     Type
  5674 ;;		None
  5675 ;; Return value:  Size  Location     Type
  5676 ;;                  1    wreg      void 
  5677 ;; Registers used:
  5678 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5679 ;; Tracked objects:
  5680 ;;		On entry : 0/0
  5681 ;;		On exit  : 0/0
  5682 ;;		Unchanged: 0/0
  5683 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  5684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5687 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5688 ;;Total ram usage:        0 bytes
  5689 ;; Hardware stack levels used:    1
  5690 ;; This function calls:
  5691 ;;		Nothing
  5692 ;; This function is called by:
  5693 ;;		_ISR
  5694 ;; This function uses a non-reentrant model
  5695 ;;
  5696                           
  5697                           	psect	text26
  5698  000D22                     __ptext26:
  5699                           	opt stack 0
  5700  000D22                     _USART_RX:
  5701                           	opt stack 24
  5702                           
  5703                           ;USART1.c: 97: if(RC1IE&&RC1IF)
  5704                           
  5705                           ;incstack = 0
  5706  000D22  AA9D               	btfss	3997,5,c	;volatile
  5707  000D24  0012               	return	
  5708  000D26  AA9E               	btfss	3998,5,c	;volatile
  5709  000D28  0012               	return	
  5710                           
  5711                           ;USART1.c: 98: {
  5712                           ;USART1.c: 101: RX[RX_C++]= RCREG1;
  5713  000D2A  503E               	movf	_RX_C,w,c
  5714  000D2C  0D01               	mullw	1
  5715  000D2E  0E80               	movlw	low _RX
  5716  000D30  24F3               	addwf	prodl,w,c
  5717  000D32  6ED9               	movwf	fsr2l,c
  5718  000D34  0E00               	movlw	high _RX
  5719  000D36  20F4               	addwfc	prodh,w,c
  5720  000D38  6EDA               	movwf	fsr2h,c
  5721  000D3A  CFAE FFDF          	movff	4014,indf2	;volatile
  5722  000D3E  2A3E               	incf	_RX_C,f,c
  5723                           
  5724                           ;USART1.c: 104: if(RX[0]!=0XD0)RX_C=0;
  5725  000D40  0ED0               	movlw	208
  5726  000D42  0100               	movlb	0	; () banked
  5727  000D44  1980               	xorwf	_RX& (0+255),w,b
  5728  000D46  B4D8               	btfsc	status,2,c
  5729  000D48  D002               	goto	i2l2975
  5730                           
  5731                           ; BSR set to: 0
  5732  000D4A  0E00               	movlw	0
  5733  000D4C  6E3E               	movwf	_RX_C,c
  5734  000D4E                     i2l2975:
  5735                           
  5736                           ; BSR set to: 0
  5737                           ;USART1.c: 106: if(RX_C>=8)
  5738  000D4E  0E07               	movlw	7
  5739  000D50  643E               	cpfsgt	_RX_C,c
  5740  000D52  0012               	return	
  5741                           
  5742                           ; BSR set to: 0
  5743                           ;USART1.c: 107: {
  5744                           ;USART1.c: 108: RX_C=0;
  5745  000D54  0E00               	movlw	0
  5746  000D56  6E3E               	movwf	_RX_C,c
  5747                           
  5748                           ; BSR set to: 0
  5749                           ;USART1.c: 109: RX_flag=1;
  5750  000D58  805E               	bsf	_RX_flag/(0+8),_RX_flag& (0+7),c
  5751                           
  5752                           ; BSR set to: 0
  5753  000D5A  0012               	return	
  5754  000D5C                     __end_of_USART_RX:
  5755                           	opt stack 0
  5756                           pclatu	equ	0xFFB
  5757                           pclath	equ	0xFFA
  5758                           tblptru	equ	0xFF8
  5759                           tblptrh	equ	0xFF7
  5760                           tblptrl	equ	0xFF6
  5761                           tablat	equ	0xFF5
  5762                           prodh	equ	0xFF4
  5763                           prodl	equ	0xFF3
  5764                           intcon	equ	0xFF2
  5765                           postinc0	equ	0xFEE
  5766                           fsr0h	equ	0xFEA
  5767                           fsr0l	equ	0xFE9
  5768                           wreg	equ	0xFE8
  5769                           indf1	equ	0xFE7
  5770                           postdec1	equ	0xFE5
  5771                           fsr1h	equ	0xFE2
  5772                           fsr1l	equ	0xFE1
  5773                           indf2	equ	0xFDF
  5774                           fsr2h	equ	0xFDA
  5775                           fsr2l	equ	0xFD9
  5776                           status	equ	0xFD8
  5777                           pclatu	equ	0xFFB
  5778                           pclath	equ	0xFFA
  5779                           tblptru	equ	0xFF8
  5780                           tblptrh	equ	0xFF7
  5781                           tblptrl	equ	0xFF6
  5782                           tablat	equ	0xFF5
  5783                           prodh	equ	0xFF4
  5784                           prodl	equ	0xFF3
  5785                           intcon	equ	0xFF2
  5786                           postinc0	equ	0xFEE
  5787                           fsr0h	equ	0xFEA
  5788                           fsr0l	equ	0xFE9
  5789                           wreg	equ	0xFE8
  5790                           indf1	equ	0xFE7
  5791                           postdec1	equ	0xFE5
  5792                           fsr1h	equ	0xFE2
  5793                           fsr1l	equ	0xFE1
  5794                           indf2	equ	0xFDF
  5795                           fsr2h	equ	0xFDA
  5796                           fsr2l	equ	0xFD9
  5797                           status	equ	0xFD8
  5798                           
  5799                           	psect	rparam
  5800  0000                     pclatu	equ	0xFFB
  5801                           pclath	equ	0xFFA
  5802                           tblptru	equ	0xFF8
  5803                           tblptrh	equ	0xFF7
  5804                           tblptrl	equ	0xFF6
  5805                           tablat	equ	0xFF5
  5806                           prodh	equ	0xFF4
  5807                           prodl	equ	0xFF3
  5808                           intcon	equ	0xFF2
  5809                           postinc0	equ	0xFEE
  5810                           fsr0h	equ	0xFEA
  5811                           fsr0l	equ	0xFE9
  5812                           wreg	equ	0xFE8
  5813                           indf1	equ	0xFE7
  5814                           postdec1	equ	0xFE5
  5815                           fsr1h	equ	0xFE2
  5816                           fsr1l	equ	0xFE1
  5817                           indf2	equ	0xFDF
  5818                           fsr2h	equ	0xFDA
  5819                           fsr2l	equ	0xFD9
  5820                           status	equ	0xFD8
  5821                           
  5822                           	psect	temp
  5823  00005F                     btemp:
  5824                           	opt stack 0
  5825  00005F                     	ds	1
  5826  0000                     int$flags	set	btemp
  5827                           pclatu	equ	0xFFB
  5828                           pclath	equ	0xFFA
  5829                           tblptru	equ	0xFF8
  5830                           tblptrh	equ	0xFF7
  5831                           tblptrl	equ	0xFF6
  5832                           tablat	equ	0xFF5
  5833                           prodh	equ	0xFF4
  5834                           prodl	equ	0xFF3
  5835                           intcon	equ	0xFF2
  5836                           postinc0	equ	0xFEE
  5837                           fsr0h	equ	0xFEA
  5838                           fsr0l	equ	0xFE9
  5839                           wreg	equ	0xFE8
  5840                           indf1	equ	0xFE7
  5841                           postdec1	equ	0xFE5
  5842                           fsr1h	equ	0xFE2
  5843                           fsr1l	equ	0xFE1
  5844                           indf2	equ	0xFDF
  5845                           fsr2h	equ	0xFDA
  5846                           fsr2l	equ	0xFD9
  5847                           status	equ	0xFD8


Data Sizes:
    Strings     803
    Constant    0
    Data        4
    BSS         91
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAMh          61     27      44
    COMRAMl          31      0      29
    BANK0           160     17      67
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 32
		 -> STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), 
		 -> STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[17]), STR_28(CODE[17]), STR_27(CODE[17]), 
		 -> STR_26(CODE[23]), STR_25(CODE[23]), STR_24(CODE[23]), STR_23(CODE[23]), 
		 -> STR_22(CODE[23]), STR_21(CODE[19]), STR_20(CODE[19]), STR_19(CODE[19]), 
		 -> STR_18(CODE[19]), STR_17(CODE[20]), STR_16(CODE[21]), STR_15(CODE[21]), 
		 -> STR_14(CODE[20]), STR_13(CODE[21]), STR_12(CODE[21]), STR_11(CODE[20]), 
		 -> STR_10(CODE[21]), STR_9(CODE[21]), STR_8(CODE[20]), STR_7(CODE[21]), 
		 -> STR_6(CODE[21]), STR_5(CODE[15]), STR_4(CODE[15]), STR_3(CODE[15]), 
		 -> STR_2(CODE[15]), STR_1(CODE[32]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAMh[2]), 


Critical Paths under _main in COMRAMh

    _Usart_CL->_RX_IOKZ_PARM
    _RX_IOKZ_PARM->_IOKZ_Filter
    _IOKZ_Filter->_printf
    _MC_EVENT_Trigge->_printf
    _MC4_PARM_CL->_printf
    _MC3_PARM_CL->_printf
    _MC2_PARM_CL->_printf
    _MC1_PARM_CL->_printf
    _MC_END_EVENT->_printf
    _MC4_IO_SWP->_printf
    _MC3_IO_SWP->_printf
    _MC2_IO_SWP->_printf
    _MC1_IO_SWP->_printf
    _printf->_putch

Critical Paths under _ISR in COMRAMh

    None.

Critical Paths under _main in COMRAMl

    None.

Critical Paths under _ISR in COMRAMl

    None.

Critical Paths under _main in BANK0

    _main->_Usart_CL

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5   53081
                                             12 BANK0      5     0      5
                             _IO_INT
                         _MC1_IO_SWP
                         _MC2_IO_SWP
                         _MC3_IO_SWP
                         _MC4_IO_SWP
                       _MC_END_EVENT
                           _UartInit
                           _Usart_CL
                           _tmr1_int
 ---------------------------------------------------------------------------------
 (1) _tmr1_int                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Usart_CL                                            12    12      0   33686
                                              0 BANK0     12    12      0
                        _MC1_PARM_CL
                        _MC2_PARM_CL
                        _MC3_PARM_CL
                        _MC4_PARM_CL
                    _MC_EVENT_Trigge
                    _McStart_PARM_CL
                       _RX_IOKZ_PARM
                             _printf
 ---------------------------------------------------------------------------------
 (2) _RX_IOKZ_PARM                                         2     2      0    9632
                                             25 COMRAMh    2     2      0
                        _IOKZ_Filter
                             _printf
 ---------------------------------------------------------------------------------
 (3) _IOKZ_Filter                                          5     3      2    5640
                                             20 COMRAMh    5     3      2
                             _printf
 ---------------------------------------------------------------------------------
 (2) _McStart_PARM_CL                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MC_EVENT_Trigge                                      0     0      0    3879
                             _printf
 ---------------------------------------------------------------------------------
 (2) _MC4_PARM_CL                                          0     0      0    3879
                             _printf
 ---------------------------------------------------------------------------------
 (2) _MC3_PARM_CL                                          0     0      0    3879
                             _printf
 ---------------------------------------------------------------------------------
 (2) _MC2_PARM_CL                                          0     0      0    3879
                             _printf
 ---------------------------------------------------------------------------------
 (2) _MC1_PARM_CL                                          0     0      0    3879
                             _printf
 ---------------------------------------------------------------------------------
 (1) _UartInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MC_END_EVENT                                         0     0      0    3879
                             _printf
 ---------------------------------------------------------------------------------
 (1) _MC4_IO_SWP                                           0     0      0    3879
                             _printf
 ---------------------------------------------------------------------------------
 (1) _MC3_IO_SWP                                           0     0      0    3879
                             _printf
 ---------------------------------------------------------------------------------
 (1) _MC2_IO_SWP                                           0     0      0    3879
                             _printf
 ---------------------------------------------------------------------------------
 (1) _MC1_IO_SWP                                           0     0      0    3879
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              18    16      2    3879
                                             15 COMRAMh    5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      31
                                             14 COMRAMh    1     1      0
 ---------------------------------------------------------------------------------
 (1) _IO_INT                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 14    14      0       0
                                              0 COMRAMh   14    14      0
                           _USART_RX
                               _tmr1
 ---------------------------------------------------------------------------------
 (7) _tmr1                                                 0     0      0       0
                   _MC1_SWP_Decision
                   _MC2_SWP_Decision
                   _MC3_SWP_Decision
                   _MC4_SWP_Decision
 ---------------------------------------------------------------------------------
 (8) _MC4_SWP_Decision                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _MC3_SWP_Decision                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _MC2_SWP_Decision                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _MC1_SWP_Decision                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _USART_RX                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _IO_INT
   _MC1_IO_SWP
     _printf
       _putch
   _MC2_IO_SWP
     _printf
       _putch
   _MC3_IO_SWP
     _printf
       _putch
   _MC4_IO_SWP
     _printf
       _putch
   _MC_END_EVENT
     _printf
       _putch
   _UartInit
   _Usart_CL
     _MC1_PARM_CL
       _printf
         _putch
     _MC2_PARM_CL
       _printf
         _putch
     _MC3_PARM_CL
       _printf
         _putch
     _MC4_PARM_CL
       _printf
         _putch
     _MC_EVENT_Trigge
       _printf
         _putch
     _McStart_PARM_CL
     _RX_IOKZ_PARM
       _IOKZ_Filter
         _printf
           _putch
       _printf
         _putch
     _printf
       _putch
   _tmr1_int

 _ISR (ROOT)
   _USART_RX
   _tmr1
     _MC1_SWP_Decision
     _MC2_SWP_Decision
     _MC3_SWP_Decision
     _MC4_SWP_Decision

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAMh            E1E      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      33        0.0%
BANK13             100      0       0      34        0.0%
BITBANK12          100      0       0      31        0.0%
BANK12             100      0       0      32        0.0%
BITBANK11          100      0       0      29        0.0%
BANK11             100      0       0      30        0.0%
BITBANK10          100      0       0      27        0.0%
BANK10             100      0       0      28        0.0%
BITBANK9           100      0       0      24        0.0%
BANK9              100      0       0      25        0.0%
BITBANK8           100      0       0      22        0.0%
BANK8              100      0       0      23        0.0%
BITBANK7           100      0       0      20        0.0%
BANK7              100      0       0      21        0.0%
BITBANK6           100      0       0      18        0.0%
BANK6              100      0       0      19        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      17        0.0%
BITBANK4           100      0       0      14        0.0%
BANK4              100      0       0      15        0.0%
BITBANK3           100      0       0      12        0.0%
BANK3              100      0       0      13        0.0%
BITBANK2           100      0       0      10        0.0%
BANK2              100      0       0      11        0.0%
BITBANK1           100      0       0       8        0.0%
BANK1              100      0       0       9        0.0%
BITBANK0            A0      0       0       6        0.0%
BANK0               A0     11      43       7       41.9%
BITBANK14           41      0       0      35        0.0%
BANK14              41      0       0      36        0.0%
COMRAMh             3D     1B      2C       2       72.1%
BITCOMRAMh          3D      0       0       0        0.0%
BIGRAMl             20      0       0      38        0.0%
BITCOMRAMl          1F      0       1       1        3.2%
COMRAMl             1F      0      1D       3       93.5%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       4        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8C      26        0.0%
DATA                 0      0      8C       5        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Fri Dec 14 10:45:06 2018

                           _RX 0080                             _ct 003C                    __CFG_BORV$3 000000  
                 __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000  
                 __CFG_CP3$OFF 000000                            l137 0EC4                            l660 0B0C  
                          l812 077E                            l821 07E4                            l670 0AB4  
                          l830 084A                            l806 074A                            l815 07B0  
                          l656 0AC4                            l680 0A5C                            l824 0816  
                          l808 0760                            l657 0AFA                            l833 087C  
                          l817 07C6                            l658 0AD0                            l666 0A6C  
                          l690 0A04                            l826 082C                            l667 0AA2  
                          l835 0892                            l668 0A78                            l676 0A14  
                          l677 0A4A                            l678 0A20                            l686 09BC  
                          l687 09F2                            l839 08B0                            l688 09C8  
                          l993 08D8                            l994 08DE                            l996 08EA  
                 __CFG_CPB$OFF 000000                   __CFG_CPD$OFF 000000                            _ISR 0008  
      __end_of_MC_EVENT_Trigge 08CC                            prod 000FF3                            wreg 000FE8  
                   _TXSTA1bits 000FAC                           ?_ISR 003F                     _RX_IO_PARM 0023  
                         l1000 0904                           l1170 01BE                           l3101 02B6  
                         l1174 011A                           l3111 0326                           l1175 013E  
                         l1176 016E                           l3041 0DA4                           l3113 0332  
                         l3105 02E8                           l3131 03A6                           l3107 02F4  
                         l3133 03B2                           l3125 0378                           l3117 0354  
                         l3053 00C2                           l3301 08FC                           l3039 0D9E  
                         l3215 0764                           l3151 0458                           l3143 041A  
                         l3127 0384                           l3119 0360                           l3311 091C  
                         l3303 090A                           l3225 0798                           l3161 04C8  
                         l3145 0426                           l3137 03DC                           l3081 0204  
                         l3057 00EA                           l3049 00A2                           l3313 0924  
                         l3305 090E                           l3321 093E                           l3163 04D4  
                         l3155 048A                           l3139 03E8                           l3083 0210  
                         l3075 01D6                           l3067 019E                           l3315 0928  
                         l3307 0912                           l3323 09A2                           l3403 06AA  
                         l3331 050C                           l3237 07CA                           l3157 0496  
                         l3149 044C                           l3093 0278                           l3077 01E2  
                         l3317 0930                           l3309 0918                           l3405 06B4  
                         l3333 0516                           l3421 070A                           l3175 0D14  
                         l3183 0CCC                           l3191 0C84                           l3247 07FE  
                         l3167 04F6                           l3095 0284                           l3087 023A  
                         l3415 06F6                           l3351 057E                           l3343 0558  
                         l3425 0ADC                           l3281 0896                           l3089 0246  
                         l3417 06FC                           l3409 06CA                           l3361 05BA  
                         l3345 055E                           l3337 052C                           l3435 0A84  
                         l3259 0830                           l3099 02AA                           l3371 05FC  
                         l3347 0568                           l3429 0AEA                           l3445 0A2C  
                         l3269 0864                           l3293 08D4                           l3373 0602  
                         l3365 05D0                           l3357 05AA                           l3439 0A92  
                         l3455 09D4                           l3199 0C3C                           l3295 08E4  
                         l3375 060C                           l3359 05B0                           l3449 0A3A  
                         l3481 0BA4                           l3297 08F0                           l3393 0674  
                         l3385 064E                           l3459 09E2                           l3475 0B92  
                         l3299 08F8                           l3387 0654                           l3379 0622  
                         l3469 0B80                           l3389 065E                           l3493 0D70  
                         l3399 06A0                           STR_1 FCDB                           STR_2 FFC2  
                         STR_3 FFD1                           STR_4 FFE0                           STR_5 FFEF  
                         STR_6 FDC2                           STR_7 FD6E                           STR_8 FE16  
                         STR_9 FDD7                           _LATC 000F8B                           _LATD 000F8C  
                         u4010 0200                           _LATF 000F8E                           u4100 02A6  
                         u4200 0322                           u4040 0236                           u5010 0A80  
                         u4125 02BE                           u5110 09D0                           u4150 02E4  
                         u4070 0274                           u5040 0A1C                           u4320 03A2  
                         u4225 033A                           u4145 02D2                           u4410 0448  
                         u4250 0350                           u5060 0A28                           u3700 00C0  
                         u4245 0346                           u4510 04C4                           u4350 03D8  
                         u4175 02FC                           u4505 04B2                           u5090 09C4  
                         u4290 0374                           u3730 00E8                           u4435 0460  
                         u4195 0310                           u4460 0486                           u4380 0416  
                         u3670 00A0                           u4535 04DC                           u4455 0474  
                         u3815 0146                           u4560 04F2                           u3840 016C  
                         u3760 0118                           u4555 04E8                           u3915 01A6  
                         u3835 015A                           u3940 01BC                           u4485 049E  
                         u3790 013C                           u3935 01B2                           u3865 0176  
                         u3890 019C                           u4940 0ACC                           u3980 01D2  
                         u3885 018A                           u4960 0AD8                           u4990 0A74  
                         _TXIF 007CF4                           _RX_C 003E                           _main 0D5C  
                         _tmr1 0BB8                           fsr0h 000FEA                           fsr1h 000FE2  
                         fsr2h 000FDA                           fsr0l 000FE9                           indf1 000FE7  
                         indf2 000FDF                           fsr1l 000FE1                           fsr2l 000FD9  
                         btemp 005F                           prodh 000FF4                           prodl 000FF3  
                         start 0086                  __CFG_IESO$OFF 000000                  __CFG_FOSC$HS2 000000  
                 ___param_bank 000000            __size_of_MC1_IO_SWP 0058              ?_MC1_SWP_Decision 0000  
     __end_of_MC3_SWP_Decision 0E50            __size_of_MC2_IO_SWP 0058            __size_of_MC3_IO_SWP 0058  
                        ??_ISR 003F            __size_of_MC4_IO_SWP 0058             ??_MC1_SWP_Decision 003F  
                 _BAUDCON1bits 000FA7                          ?_main 009E                          ?_tmr1 0000  
                        STR_10 FD83                          STR_11 FE2A                          STR_20 FE8C  
                        STR_12 FDEC                          STR_21 FE9F                          STR_13 FD98  
                        STR_30 FF18                          STR_14 FE3E                          STR_22 FD12  
                        STR_31 FF3A                          STR_15 FE01                          STR_23 FD29  
                        STR_40 FF6D                          STR_32 FF5C                          STR_16 FDAD  
                        STR_24 FD40                          STR_41 FF8F                          STR_33 FF7E  
                        STR_17 FE52                          STR_25 FD57                          STR_42 FFB1  
                        STR_34 FFA0                          STR_18 FE66                          STR_26 FCFB  
                        STR_35 FEC3                          STR_27 FEB2                          STR_19 FE79  
                        STR_36 FEE5                          STR_28 FED4                          STR_37 FF07  
                        STR_29 FEF6                          STR_38 FF29                          STR_39 FF4B  
                 ?_IOKZ_Filter 0053                          _T1CON 000FCD                          _LATC0 007C58  
                        _LATC1 007C59                          _LATC2 007C5A                          _LATD0 007C60  
                        _LATC3 007C5B                          _LATD1 007C61                          _LATC4 007C5C  
                        _LATD2 007C62                          _RC1IE 007CED                          _LATC5 007C5D  
                        _LATD3 007C63                          _RC1IF 007CF5                          _LATC6 007C5E  
                        _LATD4 007C64                          _LATF0 007C70                          _LATC7 007C5F  
                        _LATD5 007C65                          _LATF1 007C71                          _LATD6 007C66  
                        _LATF2 007C72                          _LATD7 007C67                          _LATF3 007C73  
                        _LATF4 007C74                          _LATF5 007C75                          _LATF6 007C76  
                        _LATF7 007C77                          i2l650 0E26                          i2l298 0C00  
                        i2l643 0E4A                          i2l636 0E6E                          i2l629 0E92  
                        _TMR1H 000FCF                          _TMR1L 000FCE                          _PORTC 000F82  
                        _PORTD 000F83                          _PORTF 000F85                          _TRISC 000F94  
                        _TRISD 000F95                          _TRISF 000F97                          _TRISG 000F98  
                        _TXREG 000FAD                  __CFG_WRT0$OFF 000000                  __CFG_WRT1$OFF 000000  
               __pidataCOMRAMh 0ECE                  __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000  
               __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000  
               __CFG_EBTR2$OFF 000000                 __CFG_EBTR3$OFF 000000                  __CFG_WRTB$OFF 000000  
        __size_of_RX_IOKZ_PARM 00EE                  __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000  
               __CFG_EBTRB$OFF 000000               __end_of_USART_RX 0D5C                          _putch 0EC2  
               __CFG_BOREN$OFF 000000                          pclath 000FFA                          tablat 000FF5  
                        status 000FD8                  ?_MC_END_EVENT 0000                 __CFG_MCLRE$OFF 000000  
         __size_of_MC1_PARM_CL 0048                __initialization 0B1A           __size_of_MC2_PARM_CL 0048  
                 __end_of_main 0D94                   __end_of_tmr1 0C02           __size_of_MC3_PARM_CL 0048  
                   _Current_RX 000D           __size_of_MC4_PARM_CL 0048                   _RX_IOKZ_PARM 08CC  
                       ??_main 005A                         ??_tmr1 003F                  __activetblptr 000002  
               __CFG_PLLCFG$ON 000000               ?_MC_EVENT_Trigge 0000               __end_of_UartInit 0E08  
               __CFG_RETEN$OFF 000000               __end_of_Usart_CL 0732                         ?_putch 003F  
              __CFG_BBSIZ$BB2K 000000                 __CFG_WDTEN$OFF 000000                         i2l2975 0D4E  
                       _INTCON 000FF2                         _RCREG1 000FAE                         _IO_INT 0DBE  
                       _SPBRG1 000FAF                 ??_MC_END_EVENT 0053                 __CFG_XINST$OFF 000000  
                Usart_CL@i_801 0094                  Usart_CL@i_802 0096                  Usart_CL@i_803 0098  
                Usart_CL@i_804 009A                  Usart_CL@i_805 009C            IOKZ_Filter@PORTX_KZ 0054  
            ?_MC2_SWP_Decision 0000       __end_of_MC4_SWP_Decision 0E2C             ??_MC2_SWP_Decision 003F  
                       clear_0 0B40                         clear_1 0B4C                         clear_2 0B5A  
                       _printf 0D94               __end_of_tmr1_int 0EB0                __pbitbssCOMRAMl 02F0  
                 ??_MC1_IO_SWP 0053                   __mediumconst FCDA                   ??_MC2_IO_SWP 0053  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                 ??_MC3_IO_SWP 0053                   ??_MC4_IO_SWP 0053  RX_IOKZ_PARM@MC_Occupy_Channel 0058  
                   __accesstop 0060        __end_of__initialization 0B60                   __pbssCOMRAMh 0001  
                ___rparam_used 000001                   __pbssCOMRAMl 0023          RX_IOKZ_PARM@RC_PB_BIT 0059  
           __end_of_MC1_IO_SWP 0B1A             __end_of_MC2_IO_SWP 0AC2             __end_of_MC3_IO_SWP 0A6A  
           __end_of_MC4_IO_SWP 0A12                  __end_of_putch 0ECE                      ?_USART_RX 0000  
         __size_of_IOKZ_Filter 047A                   _MC1_END_FLAT 000114                   _MC2_END_FLAT 000115  
                      ??_putch 004D                     __pbssBANK0 0060                   _MC3_END_FLAT 000116  
                      ?_IO_INT 0000                   _MC1_IO_STATE 000110                   _MC4_END_FLAT 000117  
                 _MC2_IO_STATE 000111                      ?_UartInit 0000       __size_of_McStart_PARM_CL 0012  
                 _MC3_IO_STATE 000112              ?_MC3_SWP_Decision 0000                   _McStart_PARM 0088  
                    ?_Usart_CL 0000                   _MC4_IO_STATE 000113             ??_MC3_SWP_Decision 003F  
                   ??_USART_RX 003F               _MC1_START_Signal 000C                        ?_printf 004E  
             __CFG_CANMX$PORTB 000000           __end_of_MC_END_EVENT 0BB8      __size_of_MC1_SWP_Decision 0024  
              __size_of_IO_INT 0026                        _RX_flag 02F0                __CFG_PWRTEN$OFF 000000  
                    ?_tmr1_int 0000                        __Hparam 0000                   _MC1_Start_BZ 000108  
                      __Lparam 0000                     ??_UartInit 004D                   _MC2_Start_BZ 000109  
                   ??_Usart_CL 005A                __CFG_STVREN$OFF 000000                   _MC3_Start_BZ 00010A  
                      __pcinit 0B1A                      _MC1_FZ_BZ 00010C                        __ramtop 0F00  
                    _MC2_FZ_BZ 00010D                      _MC3_FZ_BZ 00010E                      _MC4_FZ_BZ 00010F  
                      __ptext0 0D5C                        __ptext1 0E98                        __ptext2 0504  
                      __ptext3 08CC                        __ptext4 008A                        __ptext5 0EB0  
                      __ptext6 0732                        __ptext7 0C02                        __ptext8 0C4A  
                      __ptext9 0C92                __size_of_printf 002A                   _MC4_Start_BZ 00010B  
                 __size_of_ISR 007E                      _T1CONbits 000FCD              __CFG_MSSPMSK$MSK7 000000  
         end_of_initialization 0B60                  __Lmediumconst FCDA                  __pdataCOMRAMh 005A  
                ??_MC1_PARM_CL 0053                  ??_MC2_PARM_CL 0053                     ??_tmr1_int 004D  
                ??_MC3_PARM_CL 0053                  ??_MC4_PARM_CL 0053                        printf@c 0052  
                      printf@f 004E                        postdec1 000FE5                        postinc0 000FEE  
            ?_MC4_SWP_Decision 0000             ??_MC4_SWP_Decision 003F              ??_McStart_PARM_CL 004D  
             _MC2_START_Signal 000B      __size_of_MC2_SWP_Decision 0024       __size_of_MC_EVENT_Trigge 019A  
               __end_of_IO_INT 0DE4                __pcstackCOMRAMh 003F                __pcstackCOMRAMl 0000  
          __end_of_MC1_PARM_CL 0D22            __end_of_MC2_PARM_CL 0CDA              IOKZ_Filter@PB_BIT 0053  
        __size_of_MC_END_EVENT 004A            __end_of_MC3_PARM_CL 0C92            __end_of_MC4_PARM_CL 0C4A  
               __end_of_printf 0DBE              __size_of_USART_RX 003A            start_initialization 0B1A  
                  __end_of_ISR 0086               _MC1_SWP_Decision 0E74                       ??_IO_INT 004D  
                 _MC_END_EVENT 0B6E              __size_of_UartInit 0024                       ??_printf 0050  
                ??_IOKZ_Filter 0055               _MC3_START_Signal 000A              __size_of_Usart_CL 022E  
           _MC_Channel_IO_PARM 008E                  __pcstackBANK0 0092      __size_of_MC3_SWP_Decision 0024  
                    Usart_CL@i 0092                    _MC1_PARM_CL 0CDA                    _MC2_PARM_CL 0C92  
            ??_MC_EVENT_Trigge 0053                    _MC3_PARM_CL 0C4A                      __pintcode 0008  
                  _MC4_PARM_CL 0C02                  __pmediumconst FCDA              __size_of_tmr1_int 0018  
                  _MC1_Channel 005D                    _MC2_Channel 005C                  ?_RX_IOKZ_PARM 0000  
                  _MC3_Channel 005B                    _MC4_Channel 005A               _MC2_SWP_Decision 0E50  
          __end_of_IOKZ_Filter 0504                       _MC1_PARM 0078                       _MC2_PARM 0070  
                     _MC1_FZ_C 0008                       _MC3_PARM 0068                       _MC2_FZ_C 0007  
                     _MC4_PARM 0060                       _MC3_FZ_C 0006                       _MC4_FZ_C 0005  
               __size_of_putch 000C                       _PIE1bits 000F9D                       _PMD1bits 000F58  
              _McStart_PARM_CL 0EB0                       _PIR1bits 000F9E                       i2u356_40 0BFC  
               ??_RX_IOKZ_PARM 0058                       _USART_RX 0D22               __CFG_SOSCSEL$DIG 000000  
             _MC4_START_Signal 0009      __size_of_MC4_SWP_Decision 0024                      copy_data0 0B2E  
                _MC1_SwapDelay 002E                       __Hrparam 0000                       _UartInit 0DE4  
     __end_of_MC1_SWP_Decision 0E98                       __Lrparam 0000                  _MC2_SwapDelay 002C  
                     _Usart_CL 0504                    _MC_IO_STATE 000022                    _IOKZ_Filter 008A  
                _MC3_SwapDelay 002A                     _MC1_IO_SWP 0AC2                     _MC1_TIME_H 0003  
                   _MC1_TIME_L 0036                     _MC2_IO_SWP 0A6A                     _MC2_TIME_H 0001  
                   _MC2_TIME_L 0034                     _MC3_IO_SWP 0A12                     _MC3_TIME_H 003A  
                   _MC3_TIME_L 0032               _MC3_SWP_Decision 0E2C                       __ptext10 0CDA  
                     __ptext11 0DE4                       __ptext12 0B6E                       __ptext21 0BB8  
                     __ptext13 09BA                       __ptext22 0E08                       __ptext14 0A12  
                     __ptext23 0E2C                       __ptext15 0A6A                       __ptext24 0E50  
                     __ptext16 0AC2                     _MC4_IO_SWP 09BA                       __ptext25 0E74  
                     __ptext17 0D94                       __ptext26 0D22                       __ptext18 0EC2  
                     __ptext19 0DBE                     _MC4_TIME_H 0038                     _MC4_TIME_L 0030  
                _MC4_SwapDelay 0028        __end_of_McStart_PARM_CL 0EC2                  IOKZ_Filter@RX 0057  
                __size_of_main 0038                  __size_of_tmr1 004A                       _tmr1_int 0E98  
                     int$flags 005F                       main@argc 009E                       main@argv 00A0  
          __CFG_INTOSCSEL$HIGH 000000                      putch@data 004D                     _INTCONbits 000FF2  
                  _MC_Start_BZ 000021                _MC_EVENT_Trigge 0732                       intlevel2 0000  
         __end_of_RX_IOKZ_PARM 09BA              __CFG_T0CKMX$PORTB 000000                   ?_MC1_PARM_CL 0000  
                   _RCSTA1bits 000FAB                   ?_MC2_PARM_CL 0000                   ?_MC3_PARM_CL 0000  
     __end_of_MC2_SWP_Decision 0E74                   ?_MC4_PARM_CL 0000                       printf@ap 0050  
           __CFG_WDTPS$1048576 000000                    ?_MC1_IO_SWP 0000                    ?_MC2_IO_SWP 0000  
            __CFG_T3CKMX$PORTG 000000                    ?_MC3_IO_SWP 0000                    ?_MC4_IO_SWP 0000  
             _MC4_SWP_Decision 0E08               ?_McStart_PARM_CL 0000            __CFG_BORPWR$ZPBORMV 000000  
